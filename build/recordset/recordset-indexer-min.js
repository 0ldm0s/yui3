YUI.add("recordset-indexer",function(B){function A(C){A.superclass.constructor.apply(this,arguments);}B.mix(A,{NS:"indexer",NAME:"recordsetIndexer",ATTRS:{hash:{valueFn:"_setDefaultHash",lazyAdd:false},defaultKey:{value:"id",setter:"_setDefaultKey"}}});B.extend(A,B.Plugin.Base,{initializer:function(C){var D=this.get("host");this.onHostEvent("add",B.bind("_defAddHash",this),D);this.onHostEvent("remove",B.bind("_defRemoveHash",this),D);this.onHostEvent("update",B.bind("_defUpdateHash",this),D);},destructor:function(C){},_setDefaultHash:function(){var D=this.get("host"),E={},C=this.get("defaultKey");D.each(function(){E[this.get(C)]=this;});return E;},_setDefaultKey:function(C){},_defAddHash:function(F){var E=this.get("hash"),D=this.get("defaultKey"),C=0;for(;C<F.added.length;C++){E[F.added[C].get(D)]=F.added[C];}},_defRemoveHash:function(F){var E=this.get("hash"),D=this.get("defaultKey"),C=0;for(;C<F.removed.length;C++){delete E[F.removed[C].get(D)];}},_defUpdateHash:function(F){var E={},D=this.get("defaultKey"),C=0;for(;C<F.updated.length;C++){delete E[F.overwritten[C].get(D)];E[F.updated[C].get(D)]=F.updated[C];}}});B.namespace("Plugin").RecordsetIndexer=A;},"@VERSION@",{requires:["recordset-base","plugin"]});