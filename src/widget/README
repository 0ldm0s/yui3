3.1.0

Added support for:

- An "id" attribute

- A "render" attribute, to auto-render the widget at the end of construction

- A "srcNode" attribute, to act as the root for parseHTML. Used doesn't 
  need to worry about contentBox vs. boundingBox.

- Single Box model (contentBox and boundingBox point to same node).
  activated by setting CONTENT_TEMPLATE to null

- Added _bindAttrUI and _syncAttrUI sugar methods (WIP)

- Renamed private _parseHTML to _parseNode

- Added _preParseNode and _postParseNode methods to allow for easy
  parseNode customization, by allowing developers to customize
  node passed in and configuration merge.

- All changes should be backward compatible. Existing Widget impls
  should still work. However HTML_PARSER implementations based on
  contentBox being the root node should be modified to work off 
  of srcNode.

3.0.0

No Changes

3.0.0 beta 1

* PluginHost moved down to Base.

* Render event args added to event facade instead of being passed
  across separately (e.parentNode).

* "hasFocus" attribute renamed to "focused"

* "focused" attribute is read only

* "focused" attribute is set via:
   - user interaction
   - the "focus" and "blur" methods

* Only one DOM focus event handler is used now (two for WebKit) and it is 
  bound to the widget's ownerDocument.  This allows modal widgets to maintain
  a reference to the element in the document that previously had focus and 
  to be able to restore that focus when the modal widget is hidden.

* "tabIndex" attribute was updated
  - accepts a number or null
  - more documentation

3.0.0PR2 - Initial release

Module Name: "widget"
Documentation: http://developer.yahoo.com/yui/3/widget

Provides the base Widget class along with an augmentable PluginHost 
interface.

Widget is the foundation class from which all YUI 3 widgets are derived. 

It provides the following pieces of core functionality:

* The render lifecycle method, in addition to the init and destroy 
  lifecycle methods provided by Base
* Abstract rendering methods to support a consistent MVC structure across
  widgets
* A common set of base widget attributes
* Consistent class-name generation support
* Plugin support

