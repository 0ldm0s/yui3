<style>
.color {
    border: 1px solid rgba(0,0,0,0.5);
    box-shadow: 1px 1px 2px 0px rgba(0,0,0,0.3);
    display: inline-block;
    zoom: 1;
    *display: inline;
    width: 12px;
    height: 12px;
    vertical-align: top;
    margin: 0 0.3em;
}
</style>
<div class="intro">
<p> The Color Utility will give you the ability to convert colors to and from RGB, HSL, and Hex.</p>
</div>

{{>getting-started}}

<h2 id="using">Using {{displayName}}</h2>
<p>Color allows you to convert a color from and to hexadecimal, RGB, and HSL.</p>
<p></p>

<h3 id="options">Color Options</h3>
<p>Color methods take an object of options. Some methods require different options. In general, `value` is the only option required for every method.</p>
<table>
    <thead>
        <tr>
            <th>Option</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>type</td>
            <td>String</td>
            <td>Identifies the type of color provided</td>
        </tr>
        <tr>
            <td>value</td>
            <td>String | Array</td>
            <td>Color value to be converted</td>
        </tr>
        <tr>
            <td>to</td>
            <td>String</td>
            <td>Desired converted color type</td>
        </tr>
        <tr>
            <td>css</td>
            <td>Boolean</td>
            <td>Denotes if the returned value should be a CSS string (true) or an Array of color values</td>
        </tr>
        <tr>
            <td>count</td>
            <td>Number</td>
            <td>Denotes the requested number of returned harmony colors</td>
        </tr>
        <tr>
            <td>variance</td>
            <td>Number</td>
            <td>Denotes plus or minus max variance when calculating similar colors</td>
        </tr>
    </tbody>
</table>

<p>Color uses `options.type` to specify what `options.value` should be provided. If `options.value` is a string and `options.type` is not provided, Color will attempt to detect the correct type.</p>
<table>
    <thead>
        <tr>
            <th>options.type</th>
            <th>options.value</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>keyword</td>
            <td>Must be a keyword in Y.Color.KEYWORDS</td>
        </tr>
        <tr>
            <td>hex</td>
            <td>3 or 6 character representation with or without a '#' or Array of `[rr, gg, bb]` strings</td>
        </tr>
        <tr>
            <td>rgb</td>
            <td>`"rgb(r, g, b)"` string or Array of `[r, g, b]` values</td>
        </tr>
        <tr>
            <td>rgba</td>
            <td>`"rgba(r, g, b, a)"` string or Array of `[r, g, b, a]` values</td>
        </tr>
        <tr>
            <td>hsl</td>
            <td>`"hsl(h, s%, l%)"` string or Array of `[h, s, l]` values</td>
        </tr>
        <tr>
            <td>hsla</td>
            <td>`"hsla(h, s%, l%, a)"` string or Array of `[h, s, l, a]` values</td>
        </tr>
    </tbody>
</table>

<p>Color uses `options.to` and `options.css` to specify the return value. The value will be converted to an Array of values specific to `options.to`.</p>
<table>
    <thead>
        <tr>
            <th>options.to</th>
            <th>Return value</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>hex</td>
            <td>returns `[rr, gg, bb]` or `#rrggbb` if `options.css` is true</td>
        </tr>
        <tr>
            <td>rgb</td>
            <td>returns `[r, g, b]` or `rgb(r, g, b)` if `options.css` is true</td>
        </tr>
        <tr>
            <td>rgba</td>
            <td>returns `[r, g, b, a]` or `rgba(r, g, b, a)` if `options.css` is true</td>
        </tr>
        <tr>
            <td>hsl</td>
            <td>returns `[h, s, l]` or `hsl(h, s%, l%)` if `options.css` is true</td>
        </tr>
        <tr>
            <td>hsla</td>
            <td>returns `[h, s, l, a]` or `hsla(h, s%, l%, a)` if `options.css` is true</td>
        </tr>
    </tbody>
</table>

<h3 id="basic">Basic Conversion</h3>
<p>`toRGB` and `toHex` have the ability to take only a string to convert to either hex or RGB strings.</p>
<pre class="code prettyprint">
Y.Color.toRGB('f00'); // rgb(255, 0, 0) {{>color-s}}#ff0000{{>color-e}}
Y.Color.toHex('rgb(255, 0, 0)') // #ff0000 {{>color-s}}#ff0000{{>color-e}}
</pre>

<p>`toHex` `toRGB` and `toHSL` can take an options object allowing you to specify the return value type. Remember, by default it will return an Array of color values.</p>
<pre class="code prettyprint">
Y.Color.toHex({
    type: 'rgb',
    value: [255, 255, 0]
}); // ["ff", "ff", "00"] {{>color-s}}#ffff00{{>color-e}}
</pre>
<pre class="code prettyprint">
Y.Color.toHex({
    type: 'rgb',
    value: [255, 255, 0]
}); // ["ff", "ff", "00"] {{>color-s}}#ffff00{{>color-e}}

Y.Color.toHex({
    type: 'rgb',
    value: [255, 255, 0],
    css: true
}); // #ffff00 {{>color-s}}#ffff00{{>color-e}}
</pre>

<p>Color also provides a sugar method, `convert()`. It takes an options object and uses `options.to` to determine what to convert the color to.</p>
<pre class="code prettyprint">
Y.Color.convert({
    type: 'hsl',
    value: [240, 100, 50],
    to: 'hex',
    css: true
}); // #0000ff {{>color-s}}#0000ff{{>color-e}}
</pre>

<h2 id="harmony">Harmony Colors</h2>
<p>Color also makes it easy to get complementary, triads, tetrads, or offsets of a color through `color-harmony`. Harmony methods that return colors, will return an Array with the color provided (converted, if requested) as the first index.</p>
```
<script>
// Create a new YUI instance and populate it with the required modules.
YUI().use('color-harmony', function (Y) {
    // Color is available and ready for use with harmony methods added on.
    // Add implementation code here.
});
</script>
```

For the following examples, we will use these color options to keep the examples concise.
<pre class="code prettyprint">
var white =  { value: '#fff', to: 'hex', css: true },
    black =  { value: '#000', to: 'hex', css: true },
    red  =   { value: '#f00', to: 'hex', css: true },
    orange = { value: '#f70', to: 'hex', css: true },
    yellow = { value: '#ff0', to: 'hex', css: true },
    green =  { value: '#0f0', to: 'hex', css: true },
    blue =   { value: '#00f', to: 'hex', css: true },
    purple = { value: '#f0f', to: 'hex', css: true };
</pre>


<h3 id="complementary">Complementary</h3>
<p>A complementary color is the opposite color on the subtractive color wheel.</p>
<p>`getComplementary` will return an Array of two color values or strings. The first being the color provided. The second being the complementary color.</p>
<img src="../assets/color/complementary-red-w.png">
<pre class="code prettyprint">
Y.Color.getComplementary(red); // [ "#ff0000" {{>color-s}}#ff0000{{>color-e}}, "#00ff00" {{>color-s}}#00ff00{{>color-e}}]
</pre>

<h3 id="split">Split Complementary</h3>
<p>Split complementary is a similar to complementary, with the exception of getting one color opposite the starting color, you get two colors adjacent to the complementary color.</p>
<p>`getSplit` will return an Array of three color values or strings. The first being the color provided. The second being a 30 degree offset from the complementary color. The third being a -30 degree offset from the complementary color.</p>
<img src="../assets/color/split-red-w.png">
<pre class="code prettyprint">
Y.Color.getSplit(red); //["#ff0000" {{>color-s}}#ff0000{{>color-e}}, "#00ffff" {{>color-s}}#00ffff{{>color-e}}, "#55ff00" {{>color-s}}#55ff00{{>color-e}}]
</pre>

<h3 id="analogous">Analogous</h3>
<p>Analogous colors are colors adjacent to each other. Color will return an Array of colors.</p>
<p>The first color is the color you provided. The next to colors are clockwise from the start color. The last two are counter clockwise from the start color.</p>
<p>The offset distance can be set with `options.offset`. The offset by default is `10`.</p>
<img src="../assets/color/analogous-orange-w.png">
<pre class="code prettyprint">
Y.Color.getAnalogous(orange);
// ["#ff7700" {{>color-s}}#ff7700{{>color-e}}, "#ff9100" {{>color-s}}#ff9100{{>color-e}}, "#ffae00" {{>color-s}}#ffae00{{>color-e}}, "#ff5900" {{>color-s}}#ff5900{{>color-e}}, "#ff3c00" {{>color-s}}#ff3c00{{>color-e}}]
</pre>

<h3 id="triad">Triad</h3>
<p>A triad will return three evenly spaced colors. The first being the color provided, the next two will be 120 degrees clockwise.</p>
<img src="../assets/color/triad-purple-w.png">
<pre class="code prettyprint">
Y.Color.getTriad(purple); // ["#ff00ff" {{>color-s}}#ff00ff{{>color-e}}, "#ffaa00" {{>color-s}}#ffaa00{{>color-e}}, "#00ff00" {{>color-s}}#00ff00{{>color-e}}]
</pre>

<h3 id="square">Square</h3>
<p>A square will return four evenly spaced colors. The first being the color provided, the remaining three will be 90 degree offsets clockwise.</p>
<img src="../assets/color/square-blue-w.png">
<pre class="code prettyprint">
Y.Color.getSquare(blue);
// ["#0000ff" {{>color-s}}#0000ff{{>color-e}}, "#ff0080" {{>color-s}}#ff0080{{>color-e}}, "#ffaa00" {{>color-s}}#ffaa00{{>color-e}}, "#55ff00" {{>color-s}}#55ff00{{>color-e}}]
</pre>

<h3 id="tretrad">Tetrad</h3>
<p>Tetrad is similar to square although the offsets are not equal. Square is comprised of the complementary color and an offset from the original and the complementary color.</p>
<p>The offset distance can be set with `options.offset`. The offset by default is `60`.</p>
<img src="../assets/color/tetrad-blue-w.png">
<pre class="code prettyprint">
Y.Color.getTetrad(blue);
// ["#0000ff" {{>color-s}}#0000ff{{>color-e}}, "#ff00ff" {{>color-s}}#ff00ff{{>color-e}}, "#ffaa00" {{>color-s}}#ffaa00{{>color-e}}, "#aaff00" {{>color-s}}#aaff00{{>color-e}}]
</pre>

<h3 id="monochrome">Monochromatic</h3>
<p>A monochromatic harmony set takes the hue and saturation of the provided color and returns an Array of colors with adjusted luminance from zero to one hundred percent.</p>
<p>You can specify the number of colors returned with `options.count`. The default is `5` resulting in five items returned.</p>
<img src="../assets/color/monochrome-green.png">
<pre class="code prettyprint">
Y.Color.getMonochrome(green);
// ["#000000" {{>color-s}}#000000{{>color-e}}, "#008000" {{>color-s}}#008000{{>color-e}}, "#00ff00" {{>color-s}}#00ff00{{>color-e}}, "#80ff80" {{>color-s}}#80ff80{{>color-e}}, "#ffffff" {{>color-s}}#ffffff{{>color-e}}]
</pre>

<h3 id="similar">Similar Colors</h3>
<p>You can also get a set of colors similar to provided color. A similar color is a color with a similar hue, saturation, and/or luminance.</p>
<p>To change the maximum offset, set `options.offset`. The offset by default is `10`.</p>
<p>You can specify the number of colors returned with `options.count`. By default five items are returned.</p>
<pre class="code prettyprint">
Y.Color.getSimilar(purple);
// ["#ff00ff" {{>color-s}}#ff00ff{{>color-e}}, "#f429ff" {{>color-s}}#f429ff{{>color-e}}, "#bb03d3" {{>color-s}}#bb03d3{{>color-e}}, "#c405d6" {{>color-s}}#c405d6{{>color-e}}, "#e01ff9" {{>color-s}}#e01ff9{{>color-e}}, "#e402e8" {{>color-s}}#e402e8{{>color-e}}]
</pre>

<h3 id="offset">Hue, Saturation, Luminance Offsets</h3>
<p>You adjust hue, saturation, or luminance individually using `getOffset`. The offset is plus or minus the current value. Saturation and luminance can only go as high as `100` and as low as `0`.</p>
<p>To change the maximum offset, set `options.offset`. The offset by default is `10`.</p>
<pre class="code prettyprint">
Y.Color.getOffset(red, {h: 40}); // #ff6e00 {{>color-s}}#ff6e00{{>color-e}}

Y.Color.getOffset(red, {l: 20}); // #ff6666 {{>color-s}}#ff6666{{>color-e}}

Y.Color.getOffset(red, {s: -50}); // #bf4040 {{>color-s}}#bf4040{{>color-e}}
</pre>
<p>You can also offset multiple factors at the same time.</p>
<pre class="code prettyprint">
Y.Color.getOffset(red, {h: 40, l: 20, s: -50}); // #d9ad8c {{>color-s}}#d9ad8c{{>color-e}}
</pre>

<h3 id="brightness">Perceived Brightness</h3>
<p>Different hues as the same saturation and luminance can be perceived brighter or darker than each other (such as blue and yellow). Brightness is represented as a value from `0` to `1` &mdash; where `0` is black and `1` is white.</p>

<p>Note: `getBrightness` uses a weighted distance in 3D space algorithm. Traditionally these values are `{r: 0.241, g: 0.691, b: 0.068 }`. These values were adjusted during tests to `{ r: 0.221, g: 0.711, b: 0.068 }`. You can override these values with `Y.Color._brightnessWeights`.</p>
<pre class="code prettyprint">
Y.Color.getBrightness(white); // 1

Y.Color.getBrightness(black); // 0

Y.Color.getBrightness(yellow); // 0.9654014708917736
</pre>

<h3 id="similar-brightness">Match Brightness</h3>
<p>You may wish to match one color to the preceived brightness of another color. This process will keep the hue and saturation the same, and only adjust the luminance to a color that is the same, or nearly the same, perceived brightness.</p>
<p>`getSimiliarBrightness` takes two parameters. The first is the color you wish to adjust. The second is the color you wish to match the perceived brightness to.</p>
<p>It will return an Array of color values or the color as a string.</p>
<pre class="code prettyprint">
Y.Color.getSimilarBrightness(orange, blue);
// adjust orange {{>color-s}}#ff7700{{>color-e}} to match the brightness of blue {{>color-s}}#0000ff{{>color-e}},   returns #703800 {{>color-s}}#703800{{>color-e}}

Y.Color.getSimilarBrightness(white, green);
// adjust white {{>color-s}}#ffffff{{>color-e}} to match the brightness of green {{>color-s}}#00ff00{{>color-e}},   returns #d9d9d9 {{>color-s}}#d9d9d9{{>color-e}}
</pre>
