<div class="intro">
    <p>The Button component for YUI 3 is a light-weight, Y.Base wrapper around DOM elements you'd like treated like a button.  This includes things like look &amp; feel, state management, and accessibility.</p>
</div>

{{>getting-started}}

<h2>Using Button</h2>
<h3>Quick Start</h3>
<p>There are two ways to create a Y.Button instance.</p>

```
// Or, use an existing node
var button = new Y.Button({
    srcNode: "#myButton"
})
```

You can also create an unattached node and 
```
// Dynamically create the node
var button = new Y.Button();
var node = button.getNode();
Y.one('#container').append(node);
```

<p>In either case, you will receive a Y.Button instance that contains a few attributes, and wraps around a Y.Node instance.  The markup generated will look something similar to:</p>

```
<button id="myButton" class="yui3-button" role="button"
        aria-selected="false" aria-pressed="false">My Button</button>
```

<p>At this point, you can modify `button`'s attributes, manipulate its state, or listen for change events.</p>

<h3>Events</h3>

<p>Most commonly with button elements, you want to listen for any clicks that occur.  That can be achieved with something like this...</p>

```
var button = new Y.Button({
    srcNode: "#myButton"
});

button.on('click', function(){
    alert("Hello!");
});
```

<p>You can also pass in groups of events at creation:</p>

```
var button = new Y.Button({
    srcNode: '#myButton',
    type: 'toggle',
    on: {
        click: function(){
            Y.log('This will fire when the button is clicked.')
        },
        focus: function(){
            Y.log('The button is now focused')
        },
        selectedChange: function(){
            Y.log('This will fire when the toggled state changed')
        }
    }
})
```

<p>Any event handlers can also be assigned by using the `on` property in the configuration object.  Valid events include any <a href="">DOM events</a>, as well as Y.Button attribute change events (e.g. 'selectedChange').</p>

<h3>Benefits</h3>
<p>So what do you get from Y.Button over just creating your own, via `new Y.Node.create('<button></button>')`</p>
<ul>
    <li><strong>Accessibility</strong> - Your buttons automatically create and manage their own ARIA states.  This includes `aria-selected` and `aria-pressed`.  Y.Button instances also automatically get the `role='button'` attribute to properly identify their purpose (as a button) to screen readers even if they are not a `<button>` or `<input type="button">` element.</li>
<li><strong>State management</strong> - Y.Button instances automatically apply classes, such as yui3-button-selected, yui3-button-disabled, and yui3-button-focused, which are useful for styling purposes. Also, assigning a type of 'toggle' will fire a 'selectedChange' event only when it's state changes from selected to unselected, or vice-versa, eliminating the classical case of listening for 'click' and then checking to see if the state changed.</li>
</ul>

<p><em>Note: In the future, Y.Button instances will be capable of being assigned to groups and managed via a new ButtonGroup module.</em></p>

<h3>Styling</h3>
<p>YUI's Button component was designed with the idea in mind that you may only want button styles, no JS functionality.  Instead of `use('button')`, you can just include the `cssbuttons` sub-module.  This can be done either dynamically by `use('cssbuttons')` or statically with a <link> tag.  Including this module will load in a stylesheet consisting of the following classes:</p>
<ul>
    <li>yui3-button</li>
    <li>yui3-button:hover</li>
    <li>yui3-button:active</li>
    <li>yui3-button-disabled</li>
</ul>

<p>These styles are designed to progressively enhance.  In legacy browsers, you'll get styles that appear a bit nicer than native buttons, and in modern browsers you'll get buttons using the latest styles that CSS3 has to offer.</p>





<h3>Events</h3>
<table>
  <thead>
    <tr>
      <th>Event</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`selectedChange`</td>
      <td>
         
      </td>
    </tr>
    <tr>
      <td>`disabledChange`</td>
      <td>
         
      </td>
    </tr>
    <tr>
      <td>`typeChange`</td>
      <td>
         
      </td>
    </tr>
    <tr>
      <td>`labelChange`</td>
      <td>
         
      </td>
    </tr>
  </tbody>
</table>


<h3>Configuration</h3>
<table>
  <thead>
    <tr>
      <th>Event</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`srcNode`</td>
      <td>
         The source node 
      </td>
    </tr>
    <tr>
      <td>`label`</td>
      <td>
          The textual representation of the element
      </td>
    </tr>
    <tr>
      <td>`on`</td>
      <td>
         Any single event, or group of events
      </td>
    </tr>
    <tr>
      <td>`disabled`</td>
      <td>
         Whether or not the button should be disabled by default
      </td>
    </tr>
    <tr>
      <td>`selected`</td>
      <td>
         Whether or not the button should be selected by default
      </td>
    </tr>
  </tbody>
</table>