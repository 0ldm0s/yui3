module.exports = function (grunt) {

    var path = require('path'),

        HANDLEBARS_LIB       = path.join(process.cwd(), '../../../', 'handlebars.js/lib'),
        PREPENDED_COMMENT    = '/* THIS FILE IS GENERATED BY A BUILD SCRIPT - DO NOT EDIT! */\n',
        REMOVE_EXPORTS_REGEX = /^\/\/ BEGIN\(BROWSER\)$\s*([\s\S]*)^\/\/ END\(BROWSER\)$/m,

        baseFiles = [
            'handlebars/base.js',
            'handlebars/utils.js',
            'handlebars/runtime.js'
        ],

        compilerFiles = [
            'handlebars/compiler/parser.js',
            'handlebars/compiler/base.js',
            'handlebars/compiler/ast.js',
            'handlebars/compiler/compiler.js'
        ];

    grunt.registerTask('clean', 'Clean imported Handlebars source files', function () {
        var files = grunt.file.expand('js/handlebars-*.js');

        files.forEach(function (file) {
            grunt.log.writeln('Deleting: '.red + file.cyan);
            grunt.file['delete'](file);
        });
    });

    grunt.registerTask('import-base', 'Import Handlebars base source', function () {
        var prefix = 'handlebars-';

        baseFiles.forEach(function (file) {
            var src  = path.join(HANDLEBARS_LIB, file),
                dest = path.join('js', prefix + path.basename(file));

            if (!grunt.file.exists(src)) {
                grunt.fail.fatal('Did you build Handlebars.js yet?');
            }

            grunt.log.writeln('Copying: '.green + file.cyan + ' to ' + dest.cyan);
            grunt.file.copy(src, dest, {force: true});
        });
    });

    grunt.registerTask('import-compiler', 'Import Handlebars compiler source', function () {
        var prefix = 'handlebars-compiler-';

        compilerFiles.forEach(function (file) {
            var src  = path.join(HANDLEBARS_LIB, file),
                dest = path.join('js', prefix + path.basename(file));

            if (!grunt.file.exists(src)) {
                grunt.fail.fatal('Did you build Handlebars.js yet?');
            }

            grunt.log.writeln('Copying: '.green + file.cyan + ' to ' + dest.cyan);
            grunt.file.copy(src, dest, {force: true});
        });
    });

    grunt.registerTask('process', 'Post process Handlebars source', function () {
        var files = grunt.file.expand('js/handlebars-*.js');

        function removeExports(source) {
            var match = source.match(REMOVE_EXPORTS_REGEX);
            return match ? match[1] : source;
        }

        files.forEach(function (file) {
            var source = grunt.file.read(file),
                processed;

            grunt.log.writeln('Post-processing: '.green + file.cyan);

            // Processes the raw file by adding a the "this is a build file"
            // comment, and remove the module exports from the source file. This
            // also trims the file and makes sure it ends with a newline char.
            processed = [
                PREPENDED_COMMENT,
                removeExports(source).trim(),
                ''
            ].join('\n');

            grunt.file.write(file, processed);
        });
    });

    grunt.registerTask('prep', 'Prep Handlebars.js for import', function () {
        grunt.log.write('Looking for Handlebars.js'.green);

        if (!grunt.file.exists(HANDLEBARS_LIB)) {
            grunt.log.writeln('');
            grunt.fail.fatal('Could not locate Handlebars repo: ' + HANDLEBARS_LIB + '\nDid you clone it above the yui3 repo?');
        }

        grunt.log.writeln('...OK'.white);
    });

    grunt.registerTask('all', [
        'prep',
        'clean',
        'import',
        'process'
    ]);

    grunt.registerTask('import', [
        'import-base',
        'import-compiler'
    ]);

    grunt.registerTask('default', ['all']);
};
