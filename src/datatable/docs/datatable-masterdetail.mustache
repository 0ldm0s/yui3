<style scoped>
  .yui3-datatable-col-nchars {
        text-align: center;
    }

    .yui3-skin-sam .yui3-datatable td.myhilite {
        background-color: #C0ffc0;
    }
</style>

<div class="intro">
    <p>Demonstrates a method of linking two DataTables together.  In this case we link a row selection within a Master (or "parent") table
    to creation of a separate Detail (or "child") table.  This is a common usage case for datasets that may have related rows within
    different datasets or as a result of typical database one-to-many key relationships.
    </p>
</div>

<div class="example yui3-skin-sam">
    {{>datatable-masterdetail-source}}
</div>

<h2>Sample Data</h2>

<p>Let's assume we have an array of data that includes parent elements and children elements.  The example we'll use defines several animal
categories and for each category it provides the names of some common characters from literature or pop culture of each type (<em>except for the lowly
amoeba, we couldn't think of any ...</em>).</p>
```
    var animal_data = [
        {  aname: 'Lions',  chars:[ 'Leo', 'Simba', 'Elsa', 'Cowardly Lion' ] },
        {  aname: 'Amoebas' },
        {  aname: 'Tigers', chars:[ 'Shere Kahn', 'Tigger', 'Tony' ] },
        {  aname: 'Mules',  chars:[ 'Francis' ] },
        {  aname: 'Bears',  chars:[ 'Smokey', 'Reginald', 'Winnie-the-Pooh', 'Baloo', 'Yogi' ] },
        {  aname: 'Snakes', chars:[ 'Kaa', 'The Serpent', 'Nagini' ] }
    ];
```

<h2>The DataTables</h2>

<p>Two DataTables are utilized for this example and for convenience they operate using the same `animal_data` JavaScript array.  In most practical applications
the data would probably be received from a remote source via DataSource or using the Model `sync` capability.
</p>

<h3>The "Master" table</h3>

<p>Our primary DataTable consists of two columns, `aname` which is the category of the animals and the other column is
a calculated (or "unbound") column that is populated by a custom formatter.  The custom formatter for `nchars` simply returns the length of the `chars` array
associated with the record, or zero if none are defined.</p>

```
var dt_master = new Y.DataTable({
    columns : [
        { key:'aname',  label:'Type' },
        { name:'nchars', label:'No. of Chars',
          formatter: function(o){
               return ( o.data.chars ) ? o.data.chars.length : 0;
             }
        }
    ],
    data : animal_data,
    width: 200
}).render("#mtable");

// also ... after rendering, let's turn the "cursor" on for this DT so the
//    user knows a click will do something ...

dt_master.get("srcNode").all("tbody tr").setStyle("cursor","pointer");
```
<h3>The "Detail" table</h3>

<p>We can proceed with defining the linked child table and rendering it initially because we have hidden
this DataTable within a DIV with style `display:none;` (the DIV becomes visible on the first row click).  This child DataTable consisits of
another calculated (i.e. unbound) column `aname` (which just fills with the parent category name) and
  a column `char_name`.   The data for this table is initially empty, but will be populated by the click handler.</p>

```
var dt_detail = new Y.DataTable({
    columns : [
        { name:'aname', label:'Animal Category',
          formatter: function(o){
             return parent_rec.get('aname');
           }
         },
        { key:'char_name', label:'Character' }
     ],
    data : [],      // the data is empty initially
    strings : {
        emptyMessage : "No critter characters were found!"
    },
    width: 350
}).render("#dtable");
```

<h2>The Click Handler</h2>
<p>
   The "glue" between the master and detail DataTables is the delegated click handler on
   the Master DataTable's rows.   When a row is clicked, then underlying record from the Master table is
   determined and the Detail DataTable is populated with the corresponding `chars` data from the clicked record.
     We also handle TR highlighting for the clicked row by toggling a background color within this delegate handler.
</p>
```
var parent_rec = null,      // local variable to hold the last clicked Master Record
    parent_tr = null;       //   ... and the last clicked Master TR

dt_master.delegate( "click", function(e){
    var tr = e.currentTarget,
        rec = this.getRecord(tr);

    // turn off highlighting of last clicked row
    if ( parent_tr ) parent_tr.all("td").toggleClass("myhilite");

    if (!parent_tr)  Y.one("#chars").show();    // on first click, display the Detail DT

    parent_rec = rec;
    parent_tr  = tr;

    // turn on highlighting of the current row
    tr.all("td").toggleClass("myhilite");

    Y.one("#acategory").setContent(rec.get('aname'));   // update text preceding table

//
//  Collect the "chars" member of the parent record into an array of objects
//    with property name "aname"
//
    var detail_data =[];
    if ( rec.get('chars') ) {
        Y.each( rec.get('chars'), function(item){
            detail_data.push( {char_name:item});
        });
    }
//
//  Set the "detail_data" to the dt_detail DataTable
//   ( it automatically refreshes )
//
    dt_detail.set('data', detail_data );

},"tr", dt_master );
```
<p>Note: In the case of the use of remote data via DataSource, the TR click handler could be modified to
generate a `sendRequest` or similar remote call for the Detail data and the `on:success` handler could be
setup to set the `data` attribute.
</p>

<h2>Full Source Code</h2>

<h3>CSS</h3>
```
.yui3-datatable-col-nchars {
    text-align: center;
}

.yui3-skin-sam .yui3-datatable td.myhilite {
    background-color: #C0ffc0;
}
```

<h3>HTML Markup</h3>
```
Select an animal category below;
<div id="mtable"></div>

<div id="chars" style="display:none;">
    <br/>Characters of the <span id="acategory"></span> category include;
    <div id="dtable"></div>
</div>
```

<h3>Javascript</h3>
```
YUI().use( "datatable", function (Y) {

    var animal_data = [
        {  aname: 'Lions',  chars:[ 'Leo', 'Simba', 'Elsa', 'Cowardly Lion' ] },
        {  aname: 'Amoebas' },
        {  aname: 'Tigers', chars:[ 'Shere Kahn', 'Tigger', 'Tony' ] },
        {  aname: 'Mules',  chars:[ 'Francis' ] },
        {  aname: 'Bears',  chars:[ 'Smokey', 'Reginald', 'Winnie-the-Pooh', 'Baloo', 'Yogi' ] },
        {  aname: 'Snakes', chars:[ 'Kaa', 'The Serpent', 'Nagini' ] }
    ];


//
//   Create the "parent" DataTable
//
    var dt_master = new Y.DataTable({
        columns : [
            { key:'aname',  label:'Type' },
            { name:'nchars', label:'No. of Chars',
              formatter: function(o){
                   return ( o.data.chars ) ? o.data.chars.length : 0;
                 }
            }
        ],
        data : animal_data,
        width: 200
    }).render("#mtable");

    dt_master.get("srcNode").all("tbody tr").setStyle("cursor","pointer");

//
//   Create the characters DataTable and render it (it is hidden initially)
//
    var dt_detail = new Y.DataTable({
        columns : [
            { name:'aname', label:'Animal Category',
              formatter: function(o){
                 return parent_rec.get('aname');
                 }
             },
            { key:'char_name', label:'Character',
              formatter: function(o){
                return o.value;
                }
             }
         ],
        data : [],    // the data is empty initially
        strings : {
            emptyMessage : "No critter characters were found!"
        },
        width: 350
    }).render("#dtable");


//
//  Setup TR click delegation on the master table
//
    var parent_rec = null,
        parent_tr = null;

    dt_master.delegate( "click", function(e){
        var tr = e.currentTarget,
            rec = this.getRecord(tr);

        // turn off highlighting of last clicked row
        if ( parent_tr ) parent_tr.all("td").toggleClass("myhilite");

        if (!parent_tr)  Y.one("#chars").show();    // on first click, display the Detail DT

        parent_rec = rec;
        parent_tr  = tr;

        // turn on highlighting of the current row
        tr.all("td").toggleClass("myhilite");

        Y.one("#acategory").setContent(rec.get('aname'));   // update text preceding table

    //
    //  Collect the "chars" member of the parent record into an array of objects
    //    with property name "aname"
    //
        var detail_data =[];
        if ( rec.get('chars') ) {
            Y.each( rec.get('chars'), function(item){
                detail_data.push( {char_name:item});
            });
        }
    //
    //  Set the "detail_data" to the dt_detail DataTable
    //   ( it automatically refreshes )
    //
        dt_detail.set('data', detail_data );

    },"tr", dt_master );

});
```
