<script type="text/x-template" id="auto-page-template">
    <dt>Page {page}</dt>
    <dd class="results"></dd>
</script>
<script type="text/x-template" id="auto-item-template">
    <img src="{image}">
</script>

<style>
#auto-app.loading {
    background: yellow;
}
</style>

<div id="auto-app">
    <div class="header">
        <form>
            <input type="text" name="q" value="kitten">
            <input type="submit" value="Search" class="yui3-button">
        </form>
    </div>
    <div class="body"></div>
    <div class="footer">
        <a href="#" class="loadMore">load more</a>
    </div>
</div>


<script>
YUI({
    combine: false,
    filter: 'raw'
}).use('model-list', 'model', 'view', 'paginator', 'jsonp', 'base-build', 'node', 'node-scroll-info', 'querystring', 'io', function (Y) {
    var AutoSearch = function () {};

    AutoSearch.Item = Y.Base.create('auto-item', Y.Model, [], {}, {});

    AutoSearch.ItemList = Y.Base.create('auto-item-list', Y.ModelList, [], {
        model: AutoSearch.Item
    }, {});

    AutoSearch.ItemView = Y.Base.create('auto-item', Y.View, [], {

        containerTemplate: '<div class="item media"></div>',

        template: Y.one('#auto-item-template').getHTML(),

        initializer: function () {
            var model = this.get('model');
            model.after('change', this.render, this);
        },

        render: function () {
            var container = this.get('container'),
                model     = this.get('model');

            container.setHTML(Y.Lang.sub(this.template, model.toJSON()));

            return this;
        }
    }, {});

    AutoSearch.PageView = Y.Base.create('page-app', Y.View, [], {

        containerTemplate: '<dl class="page"></dl>',

        template: Y.one('#auto-page-template').getHTML(),

        initializer: function () {
            var items = this.items = new AutoSearch.ItemList();

            items.after('add', this.add, this);

            this.after('destroy', function (e) {
                items.destroy();
            });
        },

        render: function () {
            var items = this.items;

            this.get('container').append(
                Y.Lang.sub(this.template, {
                    page: this.get('page')
                })
            );

            if (items.isEmpty()) {
                return this;
            }

            return this;

        },

        add: function (e) {
            var view = new AutoSearch.ItemView({
                model: e.model
            });

            this.get('container').one('.results').append(
                view.render().get('container')
            );
        }

    }, {
        ATTRS: {
            page: {}
        }
    });

    AutoSearch.App = Y.Base.create('auto-app', Y.View, [], {

        flickrUrl: 'http://api.flickr.com/services/rest/?',

        flickrApi: {
            api_key: '0c13dc70aa7eb3df87b3fee5caf37080',
            method: 'flickr.photos.search',
            safe_search: 1,
            sort: 'relevance',
            format: 'json',
            license: 4
        },

        events: {
            'form': {
                'submit': '_querySubmit'
            },
            '.loadMore': {
                'click': 'loadMore'
            }
        },

        initializer: function () {
            this.pages = [];

            this._loadMoreNode = this.get('container').one('.loadMore');

            var body = Y.one('body');

            body.plug(Y.Plugin.ScrollInfo, {
                scrollDelay: 40
            });

            body.scrollInfo.on('scroll', function (e) {
                if (!this.isLoading && this._inViewport(this._loadMoreNode)) {
                    this.loadMore();
                }
            }, this);
        },

        clearResults: function () {
            var page;

            while(this.pages.length) {
                page = this.pages.shift();
                page.destroy({ remove: true });
            }

            page = null;
            this.pages = [];
        },

        loadMore: function(e) {
            this._search(e);
        },

        addLoading: function () {
            this.isLoading = true;
            this.get('container').addClass('loading');
        },

        removeLoading: function () {
            this.isLoading = false;
            this.get('container').removeClass('loading');
        },

        processResults: function (results) {
            var images = [],
                result;

            function quoteBack(resp, index) {
                console.log(resp)
            }

            while (results.length) {
                result = results.shift();

                images.push({
                    image: Y.Lang.sub('http://farm{farm}.staticflickr.com/{server}/{id}_{secret}_q.jpg', result)
                });
            }

            this._createNewPage(images);
        },

        _reqPhotos: function () {

            var flickrApi = this.flickrApi,
                url = this.flickrUrl,
                self = this;

            flickrApi.page = this.pages.length;
            flickrApi.per_page = 20;
            flickrApi.text = this.get('container').one('input').get('value');

            url += Y.QueryString.stringify(flickrApi);

            Y.jsonp(url, {
                format: function (url, proxy) {
                    return url + '&jsoncallback=' + proxy;
                },
                on: {
                    failure: Y.bind(function () {
                        this.removeLoading();
                        console.log('oops!! something broke');
                    }, self),

                    success: Y.bind(function (resp) {
                        this.removeLoading();
                        this.processResults(resp.photos.photo);
                    }, self)
                }
            });
        },

        _querySubmit: function (e) {
            this.clearResults();

            this._search(e);
        },

        _search: function (e) {
            if (e) {
                e.preventDefault();
            }

            this.addLoading();

            this._reqPhotos();
        },

        _createNewPage: function (results) {
            var page = new AutoSearch.PageView({
                page: this.pages.length + 1
            });

            this.get('container').one('.body').append(
                page.render().get('container')
            );

            page.items.add(results);
            this.pages.push(page);

            if (this._inViewport(this._loadMoreNode)) {
                this.loadMore();
            } else {
                this.removeLoading();
            }
        },

        _inViewport: function (node, margin) {
            margin || (margin = 100);

            return (node.get('viewportRegion').bottom + margin > node.get('region').top);
        }

    }, {
        ATTRS: {
            container: {
                valueFn: function () {
                    return '#auto-app';
                }
            },

            queryNode: {
                valueFn: function () {
                    return Y.one('#auto-app input');
                }
            }
        }
    });

    new AutoSearch.App();
});
</script>



<script>
    /*

    <style>
        #demo.busy .controls {
            background: #efefef;
        }
        #demo.busy .controls a {
            opacity: 0;
        }
        #demo form {
            border: 1px solid #cbcbcb;
            border-radius: 3px;
            padding: 10px;
            background: #fff;
        }
        #demo form input {
            font-size: 180%;
            padding: 3px 7px;
        }
        #demo .results {
            padding: 10px;
        }
        #demo ol {
            margin: 0;
            padding: 0;
            text-align: center;
        }
        #demo li {
            list-style: none;
            display: inline-block;
            zoom: 1; *display: inline;
            padding: 0 3px;
            position: relative;
            width: 150px;
            height: 150px;
        }
        #demo li img {
            background: #efefef;
            width: 150px;
            height: 150px;
        }
        #demo li:hover img {
            position: absolute;
            left: -5px;
            top: -5px;
            width: 160px;
            height: 160px;
            z-index: 10;
            border: 3px solid #fff;
            box-shadow: 3px 3px 4px hsla(250, 40%, 30%, 0.5);
        }
        #demo .controls {
            clear: both;
            padding: 10px 0;
            text-align: center;
        }
        #demo .controls a {
            text-align: center;
            display: inline-block;
            zoom: 1; *display: inline;
            margin-top: 5px;
            border: solid 1px #CBCBCB;
            text-decoration: none;
            line-height: 1.7em;
            color: #4A4A4A;
            font-size: 1.4em;
            font-family: arial,san-serif;
            border-radius: 4px;
            padding: 0 10px;
            background: #fff;
        }
        #demo .controls a:hover {
            background-color: #bfdaff;
            color: #000;
        }
        #demo .controls a:active {
            background: #2647a0;
            color: #ffffff;
        }
    </style>
    <div id="demo" class="yui3-skin-sam">
        <form>
            <input type="text" name="q" value="kitten">
            <input type="submit" value="Search" class="yui3-button">
        </form>
        <div class="results">
            <div class="pages">
            </div>
            <div class="controls">
                <a href="#">Load Moar!</a>
            </div>
        </div>
    </div>
    <script>
    YUI({
        combine: false,
        filter: 'raw'
    }).use('paginator', 'node', 'jsonp', 'querystring', 'cssbutton', function (Y) {


        var flickrUrl = 'http://api.flickr.com/services/rest/?',
            flickrApi = {
                api_key: '0c13dc70aa7eb3df87b3fee5caf37080',
                method: 'flickr.photos.search',
                safe_search: 1,
                sort: 'relevance',
                format: 'json',
                license: 4
            },
            pg = new Y.Paginator({
                itemsPerPage: 20
            });

        function reqPhotos () {
            flickrApi.page = pg.get('page');
            flickrApi.per_page = pg.get('itemsPerPage');
            flickrApi.text = Y.one('#demo input').get('value');

            var url = flickrUrl + Y.QueryString.stringify(flickrApi);

            Y.one('#demo').addClass('busy');

            Y.jsonp(url, {
                format: function (url, proxy) {
                    return url + '&jsoncallback=' + proxy;
                },
                on: {
                    failure: function () {
                        removeLoading();
                        console.log('oops!! something broke');
                    },

                    success: function (resp) {
                        removeLoading();
                        showPhotos(resp.photos.photo);
                    }
                }
            });
        }

        function showPhotos (photos) {
            var srcTemplate = 'http://farm{farm}.staticflickr.com/{server}/{id}_{secret}_q.jpg',
                images = '',
                i,
                l;

            for (i = 0, l = photos.length; i < l; i++) {
                images += '<li><img src="' + Y.Lang.sub(srcTemplate, photos[i]) + '"></li>';
            }


            if (pg.get('page') === 1) {
                Y.one('#demo .results ol').setContent(images);
            } else {
                Y.one('#demo .results ol').append(images);
            }

        }

        function removeLoading () {
            Y.one('#demo').removeClass('busy');
        }

        Y.one('#demo form').on('submit', function (e) {
            e.preventDefault();
            pg.set('page', 1);
            reqPhotos();
        });

        Y.one('#demo .controls a').on('click', function (e) {
            e.preventDefault();
            pg.nextPage();
            reqPhotos();
        });

        reqPhotos();

    });
//*/
</script>

