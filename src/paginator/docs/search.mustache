<style>
#demo.busy .controls {
    background: #efefef;
}
#demo.busy .controls a {
    opacity: 0;
}
#demo form {
    border: 1px solid #cbcbcb;
    border-radius: 3px;
    padding: 10px;
    background: #fff;
}
#demo form input {
    font-size: 180%;
    padding: 3px 7px;
}
#demo .results {
    padding: 10px;
    position: relative;
}
#demo .results ol {
    margin: 0;
    padding: 0;
    text-align: center;
    position: absolute;
    opacity: 0.3;
}
#demo .results li {
    list-style: none;
    display: inline-block;
    zoom: 1; *display: inline;
    padding: 0 3px;
    position: relative;
    width: 150px;
    height: 150px;
}
#demo .results li img {
    background: #efefef;
    width: 150px;
    height: 150px;
}
#demo .results li:hover img {
    position: absolute;
    left: -10px;
    top: -10px;
    width: 160px;
    height: 160px;
    z-index: 10;
    border: 3px solid #fff;
    box-shadow: 3px 3px 4px hsla(250, 40%, 30%, 0.5);
}
#demo .controls {
    clear: both;
    padding: 10px 0;
    text-align: center;
}
#demo .controls a {
    text-align: center;
    display: inline-block;
    zoom: 1; *display: inline;
    margin-top: 5px;
    border: solid 1px #CBCBCB;
    text-decoration: none;
    line-height: 1.7em;
    color: #4A4A4A;
    font-size: 1.4em;
    font-family: arial,san-serif;
    border-radius: 4px;
    padding: 0 10px;
    background: #fff;
}
#demo .controls a:hover {
    background-color: #bfdaff;
    color: #000;
}
#demo .controls a:active {
    background: #2647a0;
    color: #ffffff;
}

/** PAGINATOR CSS **/
#demo.hide-pg .paginator {
    display: none;
}

#demo .paginator .control {
    display: block;
    padding: 0 .5em;
    text-align: center;
    text-decoration: none;
}

#demo .paginator ul {
    margin: 0; /* needed for IE */
    padding: 0;
}
#demo .paginator ul li {
    display: inline-block;
    zoom: 1; *display: inline;
    list-style: none;
}

#demo .paginator .control {
    border: solid 1px #CBCBCB;
    display: inline-block;
    zoom: 1; *display: inline;
    margin: 0 3px;
    padding: 0 .5em;
    text-align: center;
    text-decoration: none;
    line-height: 1.7em;
    color: #4A4A4A;
    font-family: arial,san-serif;
    background-color: #E6E6E6;
    -moz-border-radius: 3px;
    -webkit-border-radius: 3px;
    border-radius: 3px;
}

#demo .paginator .control:hover {
    background-color: #d6d6d6;
    color: #3a3a3a;
}

#demo .paginator .control.selected,
#demo .paginator .control.selected:hover {
    cursor: default;
    font-weight: bold;
    font-weight: bold;
    background-color: #2647a0;
    color: #fff;
}

#demo .paginator .control.disabled,
#demo .paginator .control.disabled:hover {
    cursor: default;
    opacity: 0.55;
    filter: alpha(opacity=55);
}

#demo .paginator .page:hover {
    background-color: #bfdaff;
    color: #000;
}


</style>
<div id="demo" class="yui3-skin-sam hide-pg">
    <form>
        <input type="text" name="q" value="kitten">
        <input type="submit" value="Search" class="yui3-button">
    </form>
    <div class="results"></div>
    <div class="paginator"></div>
</div>
<script>
YUI({
    combine: false,
    filter: 'raw'
}).use('model', 'model-list', 'view', 'widget', 'paginator', 'node', 'jsonp', 'querystring', 'cssbutton', 'transition', function (Y) {

    var FlickrSearch = function () {};


    FlickrSearch.Image = Y.Base.create('image-model', Y.Model, []);

    FlickrSearch.ImageList = Y.Base.create('image-list', Y.ModelList, [], {
        model: FlickrSearch.Image
    });

    FlickrSearch.ImageView = Y.Base.create('image-view', Y.View, [], {
        containerTemplate: '<li></li>',

        image: '<img src="http://farm{farm}.staticflickr.com/{server}/{id}_{secret}_q.jpg">',

        initializer: function () {
            var model = this.get('model');
            model.after('change', this.render, this);
        },

        render: function () {
            var container = this.get('container'),
                model = this.get('model');

            container.setHTML(Y.Lang.sub(this.image, model.toJSON()));

            return this;
        }
    });

    FlickrSearch.PageView = Y.Base.create('page-view', Y.View, [], {

        containerTemplate: '<ol></ol>',

        initializer: function () {
            var items = this.items = new FlickrSearch.ImageList();

            items.after('add', this.add, this);
        },

        add: function (e) {
            var view = new FlickrSearch.ImageView({
                model: e.model
            });

            this.get('container').append(
                view.render().get('container')
            );

        }
    });

    FlickrSearch.Paginator = Y.Base.create('pager', Y.Widget, [Y.Paginator], {

        CONTENT_TEMPLATE: '<ul></ul>',

        PAGE_TEMPLATE: '<li class="{control} page page-{page}" data-type="page" data-page="{page}">{page}</li>',

        classes: {
            control: 'control',
            disabled: 'disabled',
            selected: 'selected'
        },

        renderUI: function () {
            var controls = Y.Lang.sub(
                '<li class="{control} first" data-type="first">First</li>' +
                '<li class="{control} prev" data-type="prev">Previous</li>' +
                '<li><ul class="pages"></ul></li>' +
                '<li class="{control} next" data-type="next">Next</li>' +
                '<li class="{control} last" data-type="last">Last</li>'
            , this.classes);

            this.get('contentBox').setContent(controls);
        },

        bindUI: function () {
            this.get('boundingBox').delegate('click', this._afterControlClick, '.' + this.classes.control, this);

            this.after('pageChange', this.syncUI, this);

            this.after('totalItemsChange', function (e) {
                this.set('page', 1);
            }, this);
        },

        syncUI: function() {
            // disable controls
            var hasPrev = this.hasPrevPage(),
                hasNext = this.hasNextPage(),
                classes = this.classes,
                controls = this.get('contentBox');

            controls.one('.first').toggleClass(classes.disabled, !hasPrev);
            controls.one('.prev').toggleClass(classes.disabled, !hasPrev);
            controls.one('.next').toggleClass(classes.disabled, !hasNext);
            controls.one('.last').toggleClass(classes.disabled, !hasNext);

            // update page controls list
            this._buildPageList();

        },

        _afterControlClick: function (e) {
            e.preventDefault();

            var control = e.currentTarget.getData('type');

            if (e.currentTarget.hasClass('disabled')) {
                return;
            }

            switch (control) {
                case 'first':
                    this.set('page', 1);
                    break;
                case 'prev':
                    this.set('page', +this.get('page') - 1);
                    break;
                case 'next':
                    this.set('page', +this.get('page') + 1);
                    break;
                case 'last':
                    this.set('page', this.get('totalPages'));
                    break;
                case 'page':
                    this.set('page', e.currentTarget.getData('page'));
                    break;
            }

        },

        _buildPageList: function () {
            var pages = this.get('totalPages'),
                page = this.get('page'),
                pagesNode = '',
                display = this.get('display'),
                min = Math.max(1, page - Math.floor(display / 2)),
                max = min + display - 1;

            if (max > pages) {
                min -= max - pages;
            }

            min = Math.max(1, min);
            max = Math.min(pages, max);

            for (; min <= max; min++) {
                pagesNode += Y.Lang.sub(this.PAGE_TEMPLATE, {
                    control: this.classes.control,
                    page: min
                });
            }

            this.get('contentBox').one('.pages').setContent(pagesNode)

            if (pagesNode) {
                this.get('contentBox').one('.page-' + page).addClass(this.classes.selected);
            }
        }
    }, {
        ATTRS: {
            display: {
                value: 10
            }
        }
    });

    FlickrSearch.App = Y.Base.create('search', Y.View, [], {

        url: 'http://api.flickr.com/services/rest/?',

        _isNewQuery: false,

        _pages: [],

        paginator: new FlickrSearch.Paginator(),

        api: {
            api_key: '0c13dc70aa7eb3df87b3fee5caf37080',
            method: 'flickr.photos.search',
            safe_search: 1,
            sort: 'relevance',
            format: 'json',
            license: 4
        },

        events: {
            'form': {
                'submit': 'handleQuery'
            }
        },

        initializer: function () {
            this.api.per_page = this.get('perPage');
        },

        render: function () {
            this.paginator.render(this.get('container').one('.paginator'));
            this.bind();
        },

        bind: function () {
            this.paginator.after('pageChange', this._afterPageChange, this);
        },

        handleQuery: function (e) {
            e.preventDefault();

            while (this._pages.length) {
                this._pages.shift().destroy({ remove: true });
            }

            this.api.text = this.get('container').one('form input').get('value');

            if (this.paginator.get('page') !== 1) {
                this.paginator.set('page', 1);
            } else {
                this._isNewQuery = true;
                this.requestPhotos();
            }
        },

        requestPhotos: function (page) {
            this.setLoading(true);

            var self = this,
                api = this.api,
                url = this.url;

            api.page = page || 1;

            url += Y.QueryString.stringify(api);

            Y.jsonp(url, {
                format: function (url, proxy) {
                    return url + '&jsoncallback=' + proxy;
                },
                on: {
                    failure: Y.bind(function () {
                        this.setLoading(false);
                        console.log('oops!! something broke');
                    }, self),

                    success: Y.bind(function (resp) {
                        this.setLoading(false);
                        this._processResults(resp.photos);
                        this._isNewQuery = false;
                    }, self)
                }
            });
        },

        setLoading: function (status) {
            this.get('container').toggleClass('loading', status);
        },

        setMessage: function (msg) {
            var container = this.get('container');

            if (msg) {
                container.one('.results').setContent('<div class="msg">' + msg + '</div>');
                container.removeClass('hide-pg');
                this.setLoading(false);
            } else {
                if (container.one('.results .msg')) {
                    container.one('.results .msg').remove();
                }
            }
        },

        _processResults: function (resp) {
            if (resp.pages < 1) {
                return this.setMessage('There are no images for "' + this.api.text + '"');
            } else {
                this.setMessage();
            }
            if (this._isNewQuery) {
                this.paginator.set('totalItems', resp.pages);
            }

            this._createNewPage(resp.photo);

            this.paginator.syncUI();
        },

        _createNewPage: function (photos) {
            var page = new FlickrSearch.PageView(),
                resultsNode = this.get('container').one('.results'),
                pageContainer;

            page.items.add(photos);

            pageContainer = page.get('container');

            resultsNode.append(pageContainer);
            resultsNode.setStyle('height', pageContainer.get('offsetHeight'));

            var images = pageContainer.all('img'),
                imagesLeft = images.size();

            images.after('load', function (e) {

                imagesLeft--;

                if (!(--imagesLeft)) {

                    var prevPage = (this._pages.length > 1) ? this._pages.shift() : null;

                    page.get('container').transition({
                        opacity: 1
                    });

                    if (prevPage) {
                        prevPage.get('container').transition({
                            opacity: 0
                        }, function (e) {
                            prevPage.destroy({
                                remove: true
                            });
                        });
                    }
                }
            }, this);

            this._pages.push(page);
            this.get('container').removeClass('hide-pg');


        },

        _afterPageChange: function (e) {
            this.requestPhotos(e.newVal);
        }

    }, {
        ATTRS: {
            transitions: {
                value: true
            },

            perPage: {
                value: 20
            }
        }
    });

    var flickrSearch = new FlickrSearch.App({
        container: '#demo'
    });

    flickrSearch.render();

});
</script>