/**
An Extension which provides a RESTful HTTP sync implementation that can be mixed
into a Model or ModelList subclass.

@module app
@submodule model-sync-rest
@since 3.6.0
**/

var Lang = Y.Lang;

/**
An Extension which provides a RESTful HTTP sync implementation that can be mixed
into a Model or ModelList subclass.

This makes it trivial for your Model or ModelList subclasses communicate and
transmit its data via RESTful HTTP. In most cases you'll only need to provide a
value for `root` when sub-classing `Y.Model`, and only provide a value for `url`
when sub-classing `Y.ModelList`.

    var User = Y.Base.create('user', Y.Model, [Y.ModelSync.REST], {
        root: '/users'
    });

    var Users = Y.Base.create('users', Y.ModelList, [Y.ModelSync.REST], {
        model: User,
        url  : '/users'
    });

@class ModelSync.REST
@extensionfor Model
@extensionfor ModelList
@since 3.6.0
**/
function RESTSync() {}

/**
Static lookup hash table of RESTful HTTP methods corresponding to CRUD actions.

@property HTTP_METHODS
@type Object
@default
    {
        'create': 'POST',
        'read'  : 'GET',
        'update': 'PUT',
        'delete': 'DELETE'
    }
@static
@since 3.6.0
**/
RESTSync.HTTP_METHODS = {
    'create': 'POST',
    'read'  : 'GET',
    'update': 'PUT',
    'delete': 'DELETE'
};

/**
Default headers used with all XHRs.

By default the `Accept` and `Content-Type` headers are set to
"application/json", this singals to the HTTP server to process the resquest
bodies as JSON and send JSON responses. If you're sending and receiving content
other than JSON, you can override these headers and the `parse()` and
`serialize()` methods.

**Note:** These headers will be merged with any request-specific headers, and
the request-specific headers will take precedence.

@property HTTP_HEADERS
@type Object
@default
    {
        'Accept'      : 'application/json',
        'Content-Type': 'application/json'
    }
@static
@since 3.6.0
**/
RESTSync.HTTP_HEADERS = {
    'Accept'      : 'application/json',
    'Content-Type': 'application/json'
};

/**
The number of milliseconds before the XHRs will timeout/abort. This defaults to
30 seconds.

**Note:** This can be overridden on a per-request basis. See `sync()` method.

@property HTTP_TIMEOUT
@type Number
@default 30000
@static
@since 3.6.0
**/
RESTSync.HTTP_TIMEOUT = 30000;

/**
Static flag to use the HTTP POST method instead of PUT or DELETE.

If the server-side HTTP framework isn't RESTful, setting this flag to `true`
will cause all PUT and DELETE requests to instead use the POST HTTP method, and
add a `X-HTTP-Method-Override` HTTP header with the value of the method type
which was overridden.

@property EMULATE_HTTP
@type Boolean
@default false
@static
@since 3.6.0
**/
RESTSync.EMULATE_HTTP = false;

/**
A request authenticity token to validate HTTP requests made by this extension
with the server when the request results in changing persistent state. This
allows you to protect your server from Cross-Site Request Forgery attacks.

A CSRF token provided by the server can be embedded in the HTML document and
assigned to `YUI.Env.CSRF_TOKEN` like this:

    <script>
        YUI.Env.CSRF_TOKEN = {{session.authenticityToken}};
    </script>

The above should come after YUI seed file so that `YUI.Env` will be defined.

**Note:** This can be overridden on a per-request basis. See `sync()` method.

When a value for the CSRF token is provided, either statically or via `options`
passed to the `save()` and `destroy()` methods, the applicable HTTP requests
will have a `X-CSRF-Token` header added with the token value.

@property CSRF_TOKEN
@type String
@default YUI.Env.CSRF_TOKEN
@static
@since 3.6.0
**/
RESTSync.CSRF_TOKEN = YUI.Env.CSRF_TOKEN;

/**
Properties that shouldn't be turned into ad-hoc attributes when passed to a
Model or ModelList constructor.

@property _NON_ATTRS_CFG
@type Array
@default ['root', 'url']
@static
@protected
@since 3.6.0
**/
RESTSync._NON_ATTRS_CFG = ['root', 'url'];

RESTSync.prototype = {

    // -- Public Properties ----------------------------------------------------

    /**
    A string which represents the root or collection part of the URL which
    relates to a Model or ModelList. Usually this value should be same for all
    instances of a specific Model/ModelList subclass.

    When sub-classing `Y.Model`, usually you'll only need to override this
    property, which lets the URLs for the XHRs be generated by convention. If
    the `root` string ends with a trailing-slash, XHR URLs will also end with a
    "/", and if the `root` does not end with a slash, neither will the XHR URLs.

    @example
        var User = Y.Base.create('user', Y.Model, [Y.ModelSync.REST], {
            root: '/users/'
        });

        var myUser = new User({id: '123'});
        myUser.load(); // Will GET the User data from: /users/123/

        var newUser = new User({name: 'Eric Ferraiuolo'});
        newUser.save(); // Will POST the User data to: /users/

    When sub-classing `Y.ModelList`, usually you'll want to ignore configuring
    the `root` and instead set the `url` to a string; but if you only specify a
    value for `root`, things will work correctly.

    @property root
    @type String
    @default ""
    @since 3.6.0
    **/
    root: '',

    /**
    A string which specifies the URL to use when making XHRs, or a function
    which will generate the URLs.

    While a `url` can be provided for each Model/ModelList instnace, usually
    you'll want to instead provide a function or string-pattern on the prototype
    which can be used for all instances.

    If the `url` property is a function, it should return the string that should
    be used as the URL. Function values will be called before each request and
    will be passed the sync `action` which is currently being performed.

    If the `url` property is a string, it will be processed by `Y.Lang.sub()`,
    which is useful when the URLs for a Model/ModelList subclass match a
    specific pattern and can use simple replacement tokens; e.g.:

    @example
        var User = Y.Base.create('user', Y.Model, [Y.ModelSync.REST], {
            url: '/users/{id}'
        });

    **Note:** String substitution of the `url` property will only happen for
    `Y.Model` subclasses, and only string and number attribute values will be
    substituted. Do not expect something fancy to happen with Object, Array, or
    Boolean values, they will simply be ignored.

    When sub-classing Y.Model, you will probably be able to rely on the default
    implementation of `url()` which works in conjunction with the `root`
    property and whether the Model instance is new or not (i.e. has an `id`). If
    the `root` property ends with a trailing-slash, the generated URL for the
    specific Model instance will also end with a trailing-slash.

    If your URLs have plural roots or collection URLs, while the specific item
    resources are under a singular name, e.g. "/users" (plural) and "/user/123"
    (singular), you'll probably want to configure the `root` and `url`
    properties like this:

    @example
        var User = Y.Base.create('user', Y.Model, [Y.ModelSync.REST], {
            root: '/users',
            url : '/user/{id}'
        });

        var myUser = new User({id: '123'});
        myUser.load(); // Will GET the User data from: /user/123

        var newUser = new User({name: 'Eric Ferraiuolo'});
        newUser.save(); // Will POST the User data to: /users

    When sub-classing `Y.ModelList`, usually you'll only need to specify a
    simple string for the `url` property and leave `root` to be the default
    value.

    @property url
    @type Function|String
    @since 3.6.0
    **/
    url: function () {
        var root = this.root,
            url;

        if (this._isYUIModelList || this.isNew()) {
            return root;
        }

        url = this.getAsURL('id');

        if (root && root.charAt(root.length - 1) === '/') {
            // Add trailing-slash because root has a trailing-slash.
            url += '/';
        }

        return this._joinURL(url);
    },

    // -- Lifecycle Methods ----------------------------------------------------

    initializer: function (config) {
        config || (config = {});
        Lang.isValue(config.url) && (this.url = config.url);
    },

    // -- Public Methods -------------------------------------------------------

    /**
    Serializes `this` model to be used as the HTTP request entity body.

    By default this model will be serialized to a JSON string via its `toJSON()`
    method.

    You can override this method when the HTTP server expects a different
    representation of this model's data that is different from the default JSON
    serialization. If you're sending and receive content other than JSON, be
    sure change the `Accept` and `Content-Type` `HTTP_HEADERS` as well.

    **Note:** A model's `toJSON()` method can also be overridden. If you only
    need to modify which attributes are serialized to JSON, that's a better
    place to start.

    @method serialize
    @return {String} serialized HTTP request entity body.
    @since 3.6.0
    **/
    serialize: function () {
        return Y.JSON.stringify(this);
    },

    /**
    Communicates with a RESTful HTTP server by sending and receiving data via
    XHRs.

    This method is called internally by load(), save(), and destroy().

    @method sync
    @param {String} action Sync action to perform. May be one of the following:

      * `create`: Store a newly-created model for the first time.
      * `delete`: Delete an existing model.
      * `read`  : Load an existing model.
      * `update`: Update an existing model.

    @param {Object} [options] Sync options:
      @param {String} [options.csrfToken] The authenticity token used by the
        server to verify the validity of this request and protected against CSRF
        attacks. This overrides the default value provided by the static
        `CSRF_TOKEN` property.
      @param {Object} [options.headers] The HTTP headers to mix with the default
        headers specified by the static `HTTP_HEADERS` property.
      @param {Number} [options.timeout] The number of milliseconds before the
        request will timeout and be aborted. This overrides the default provided
        by the static `HTTP_TIMEOUT` property.
    @param {Function} [callback] Called when the sync operation finishes.
      @param {Error|null} callback.err If an error occurred, this parameter will
        contain the error. If the sync operation succeeded, _err_ will be
        falsy.
      @param {Any} [callback.response] The server's response.
    **/
    sync: function (action, options, callback) {
        options || (options = {});

        var url       = this._getURL(action),
            method    = RESTSync.HTTP_METHODS[action],
            headers   = Y.merge(RESTSync.HTTP_HEADERS, options.headers),
            timeout   = options.timeout || RESTSync.HTTP_TIMEOUT,
            csrfToken = options.csrfToken || RESTSync.CSRF_TOKEN,
            entity;

        // Prepare the content if we are sending data to the server.
        if (method === 'POST' || method === 'PUT') {
            entity = this.serialize();
        } else {
            // Remove header, no content is being sent.
            delete headers['Content-Type'];
        }

        // Setup HTTP emulation for older servers if we need it.
        if (RESTSync.EMULATE_HTTP &&
                (method === 'PUT' || method === 'DELETE')) {

            // Pass along original method type in the headers.
            headers['X-HTTP-Method-Override'] = method;

            // Fall-back to using POST method type.
            method = 'POST';
        }

        // Add CSRF token to HTTP request headers if one is specified.
        if (csrfToken &&
                (method === 'POST' || method === 'PUT' || method === 'DELETE')) {

            headers['X-CSRF-Token'] = csrfToken;
        }

        // Setup and send the XHR.
        Y.io(url, {
            method : method,
            headers: headers,
            data   : entity,
            timeout: timeout,

            on: {
                success: function (txId, res) {
                    if (Lang.isFunction(callback)) {
                        callback(null, res.responseText);
                    }
                },

                failure: function (txId, res) {
                    if (Lang.isFunction(callback)) {
                        callback({
                            code: res.status,
                            msg : res.statusText
                        }, res.responseText);
                    }
                }
            }
        });
    },

    // -- Protected Methods ----------------------------------------------------

    /**
    Helper method to return the URL to use when making the XHR to the server.

    This method correctly handles variations of the `url` property/method.

    @method _getURL
    @param {String} action Sync action to perform.
    @return {String} the URL for the XHR.
    @protected
    @since 3.6.0
    **/
    _getURL: function (action) {
        var url = this.url,
            data;

        if (Lang.isFunction(url)) {
            return this.url(action);
        }

        if (this._isYUIModel) {
            data = {};

            Y.Object.each(this.getAttrs(), function (v, k) {
                if (Lang.isString(v) || Lang.isNumber(v)) {
                    // URL-encode any string or number values.
                    data[k] = encodeURIComponent(v);
                }
            });

            // Substitute placeholders with the URL-encoded data values.
            url = Lang.sub(url, data);
        }

        return url || this.root;
    },

    /**
    Joins the `root` URL to the specified `url`, normalizing leading/trailing
    "/" characters.

    @example
        model.root = '/foo'
        model._joinURL('bar');  // => '/foo/bar'
        model._joinURL('/bar'); // => '/foo/bar'

        model.root = '/foo/'
        model._joinURL('bar');  // => '/foo/bar'
        model._joinURL('/bar'); // => '/foo/bar'

    @method _joinURL
    @param {String} url URL to append to the `root` URL.
    @return {String} Joined URL.
    @protected
    @since 3.6.0
    **/
    _joinURL: function (url) {
        var root = this.root;

        if (url.charAt(0) === '/') {
            url = url.substring(1);
        }

        return root && root.charAt(root.length - 1) === '/' ?
                root + url :
                root + '/' + url;
    }
};

// -- Namespace ----------------------------------------------------------------

Y.namespace('ModelSync').REST = RESTSync;
