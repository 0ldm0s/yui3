{"classmap": {"NodeList": {"name": "NodeList", "namespace": "", "module": "node", "guessedname": "NodeList", "methods": {"toggleClass": {"params": [{"type": "String", "name": "className", "description": " the class name to be toggled"}], "description": "If the className exists on the node it is removed, if it doesn't exist it is added."}, "set": {"see": "Node", "params": [{"type": "String", "name": "prop", "description": " Property to set"}, {"type": "any", "name": "val", "description": " Value to apply to the given property"}], "description": "Set the value of the property\/attribute on all HTMLElements bound to this NodeList.\nOnly strings\/numbers\/booleans are passed through unless a SETTER exists.", "guessedname": "set", "guessedtype": "function"}, "get": {"return": {"type": "Array", "description": "Array containing the current values mapped to the Node indexes"}, "description": "Get the value of the property\/attribute for each of the HTMLElements bound to this NodeList.\nOnly strings\/numbers\/booleans are passed through unless a GETTER exists.", "see": "Node", "params": [{"type": "String", "name": "prop", "description": " Property to get"}], "guessedname": "get", "guessedtype": "function"}, "removeClass": {"return": {"type": "Boolean | Array", "description": "A pass\/fail boolean or array of booleans"}, "params": [{"type": "String", "name": "className", "description": " the class name to remove from the class attribute"}], "description": "Removes a class name from a given element or collection of elements."}, "replaceClass": {"return": {"type": "Boolean | Array", "description": "A pass\/fail boolean or array of booleans"}, "params": [{"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for a given element or collection of elements.\nIf no oldClassName is present, the newClassName is simply added."}, "filter": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Filters the NodeList instance down to only nodes matching the given selector.", "see": "Selector", "params": [{"type": "String", "name": "selector", "description": " The selector to filter against"}], "guessedname": "filter", "guessedtype": "function"}, "item": {"return": {"type": "Node", "description": "The Node instance at the given index."}, "params": [{"type": "Number", "name": "index", "description": " The index of the target Node."}], "description": "Retrieves the Node instance at the given index.", "guessedname": "item", "guessedtype": "function"}, "each": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Applies the given function to each Node in the NodeList.", "see": "Y.each", "params": [{"type": "Function", "name": "fn", "description": " The function to apply"}], "guessedname": "each", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean | Array", "description": "A boolean value or array of boolean values"}, "params": [{"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether an HTMLElement has the given className."}, "addClass": {"return": {"type": "Boolean | Array", "description": "A pass\/fail boolean or array of booleans"}, "params": [{"type": "String", "name": "className", "description": " the class name to add to the class attribute"}], "description": "Adds a class name to a given element or collection of elements."}, "size": {"return": {"type": "Int", "description": "The number of items in the NodeList."}, "description": "Returns the current number of items in the NodeList.", "guessedname": "size", "guessedtype": "function"}}, "file": "Node.js", "guessedtype": "function", "shortname": "NodeList", "properties": {"requires": {"interface": "NodeExtras", "description": "An interface for advanced DOM features.", "guessedname": "requires", "guessedtype": "property"}, "ATTR": {"interface": "NodeRegion", "description": "A Region interface for Node.", "guessedname": "ATTR", "guessedtype": "property"}}, "description": "A wrapper for interacting with DOM elements"}, "YUI": {"methods": {"AlterReturn": {"description": "Return an AlterReturn object when you want to change the result returned\nfrom the core method to the caller", "guessedname": "AlterReturn", "guessedtype": "function"}, "use": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Bind a module to a YUI instance", "params": [{"type": "string", "name": "modules*", "description": "  1-n modules to bind (uses arguments array)"}, {"type": "function", "name": "*callback", "description": "  callback function executed when \nthe instance has the required functionality.  If included, it\nmust be the last parameter."}], "guessedname": "use", "guessedtype": "function", "todo": "Implement versioning?  loader can load different versions?\nShould sub-modules\/plugins be normal modules, or do\nwe add syntax for specifying these?\nYUI().use('dragdrop')\nYUI().use('dragdrop:2.4.0'); \/\/ specific version\nYUI().use('dragdrop:2.4.0-'); \/\/ at least this version\nYUI().use('dragdrop:2.4.0-2.9999.9999'); \/\/ version range\nYUI().use('*'); \/\/ use all available modules\nYUI().use('lang+dump+substitute'); \/\/ use lang and some plugins\nYUI().use('lang+*'); \/\/ use lang and all known plugins"}, "augment": {"return": {"type": "", "description": "the augmented object"}, "description": "Applies prototype properties from the supplier to the receiver.\nThe receiver can be a constructor or an instance.", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}, {"type": "Array | Any", "name": "args", "description": "  arg or arguments to apply to the supplier\nconstructor when initializing."}], "guessedname": "augment", "guessedtype": "function", "todo": "constructor optional?"}, "extend": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.", "static": "", "guessedname": "extend", "guessedtype": "function", "params": [{"type": "Function", "name": "r", "description": "   the object to modify"}, {"type": "Function", "name": "s", "description": " the object to inherit"}, {"type": "Object", "name": "px", "description": " prototype properties to add\/override"}, {"type": "Object", "name": "sx", "description": " static properties to add\/override"}]}, "mix": {"return": {"type": "", "description": "the augmented object"}, "description": "Applies the supplier's properties to the receiver.  By default\nall prototype and static propertes on the supplier are applied\nto the corresponding spot on the receiver.  By default all\nproperties are applied, and a property that is already on the\nreciever will not be overwritten.  The default behavior can\nbe modified by supplying the appropriate parameters.", "static": "", "guessedname": "mix", "guessedtype": "function", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}, {"type": "int", "name": "mode", "description": " what should be copies, and to where\ndefault(0): object to object\n1: prototype to prototype (old augment)\n2: prototype to prototype and object props (new augment)\n3: prototype to object\n4: object to prototype"}, {"type": "boolean", "name": "merge", "description": "  merge objects instead of overwriting\/ignoring\nUsed by Y.aggregate"}]}, "bind": {"return": {"type": "", "description": "the wrapped function"}, "params": [{"type": "Function", "name": "f", "description": "  the function to bind"}, {"type": "", "name": "c", "description": " the execution context"}], "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the end of the arguments the function\nis executed with.", "guessedname": "bind", "guessedtype": "function"}, "clone": {"return": {"type": "Array|Object", "description": "the cloned object"}, "description": "Deep obj\/array copy.  Functions will are cloned with Y.bind.\nArray-like objects are treated as arrays.\nprimitives are returned untouched.  Optionally a\nfunction can be provided to handle other data types,\nfilter keys, validate values, etc.", "params": [{"type": "", "name": "o", "description": " what to clone"}, {"type": "boolean", "name": "safe", "description": "  if true, objects will not have prototype\nitems from the source.  If false, it does.  In this case, the\noriginal is initally protected, but the clone is not completely immune\nfrom changes to the source object prototype.  Also, cloned prototype\nitems that are deleted from the clone will result in the value\nof the source prototype to be exposed.  If operating on a non-safe\nclone, items should be nulled out rather than deleted."}, {"type": "", "name": "f", "description": " optional function to apply to each item in a collection\nit will be executed prior to applying the value to\nthe new object.  Return false to prevent the copy."}, {"type": "", "name": "c", "description": " optional execution context for f"}, {"type": "", "name": "owner", "description": " Owner object passed when clone is iterating an\nobject.  Used to set up context for cloned functions."}], "guessedname": "clone", "guessedtype": "function", "todo": "review"}, "after": {"return": {"type": "", "description": "unsubscribe handle"}, "description": "Executes the callback after a DOM event, custom event\nor method.  If the first argument is a function, it\nis assumed the target is a method.\nFor DOM and custom events:\ntype, callback, context, 1-n arguments\nFor methods:\ncallback, object (method host), methodName, context, 1-n arguments", "guessedname": "after", "guessedtype": "function"}, "_init": {"guessedname": "_init", "params": [{"type": "", "name": "o", "description": " config options"}], "description": "Initialize this YUI instance", "private": "", "guessedtype": "function"}, "AlterArgs": {"description": "Return an AlterArgs object when you want to change the arguments that\nwere passed into the function.  An example would be a service that scrubs\nout illegal characters prior to executing the core business logic.", "guessedname": "AlterArgs", "guessedtype": "function"}, "merge": {"return": {"type": "", "description": "the new merged object"}, "params": [{"type": "Object*", "name": "arguments", "description": "  the objects to merge"}], "description": "Returns a new object containing all of the properties of\nall the supplied objects.  The properties from later objects\nwill overwrite those in earlier objects.  Passing in a\nsingle object will create a shallow copy of it.  For a deep\ncopy, use clone.", "guessedname": "merge", "guessedtype": "function"}, "add": {"return": {"type": "YUI", "description": "the YUI instance\nrequires   - features that should be present before loading\noptional   - optional features that should be present if load optional defined\nuse  - features that should be attached automatically\nskinnable  -\nrollup\nomit - features that should not be loaded if this module is present"}, "params": [{"type": "string", "name": "name", "description": "  module name"}, {"type": "string", "name": "namespace", "description": "  name space for the module"}, {"type": "Function", "name": "fn", "description": "  entry point into the module that\nis used to bind module to the YUI instance"}, {"type": "string", "name": "version", "description": "  version string"}], "description": "Register a module", "guessedname": "add", "guessedtype": "function"}, "log": {"return": {"type": "YUI", "description": "YUI instance"}, "description": "If the 'debug' config is true, a 'yui:log' event will be\ndispatched, which the logger widget and anything else\ncan consume.  If the 'useConsole' config is true, it will\nwrite to the browser console if available.", "static": "", "guessedname": "log", "guessedtype": "function", "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)"}]}, "Error": {"description": "Return an Error object when you want to terminate the execution\nof all subsequent method calls", "guessedname": "Error", "guessedtype": "function"}, "aggregate": {"return": {"type": "", "description": "the extended object"}, "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}], "description": "Applies object properties from the supplier to the receiver.  If\nthe target has the property, and the property is an object, the target\nobject will be augmented with the supplier's value.  If the property\nis an array, the suppliers value will be appended to the target.", "guessedname": "aggregate", "guessedtype": "function"}, "_setup": {"private": "", "description": "Finishes the instance setup. Attaches whatever modules were defined\nwhen the yui modules was registered.", "guessedname": "_setup", "guessedtype": "function"}, "namespace": {"return": {"type": "Object", "description": "A reference to the last namespace object created"}, "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nYUI.namespace(\"property.package\");\nYUI.namespace(\"YUI.property.package\");\n<\/pre>\nEither of the above would create YUI.property, then\nYUI.property.package\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nYUI.namespace(\"really.long.nested.namespace\");\n<\/pre>\nThis fails because \"long\" is a future reserved word in ECMAScript", "static": "", "guessedname": "namespace", "guessedtype": "function", "params": [{"type": "String*", "name": "arguments", "description": " 1-n namespaces to create"}]}, "dump": {"return": {"type": "String", "description": "the dump result"}, "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.", "params": [{"type": "Object", "name": "o", "description": "  The object to dump"}, {"type": "int", "name": "d", "description": "  How deep to recurse child objects, default 3"}], "guessedname": "dump", "guessedtype": "function", "todo": "dumping a window is causing an unhandled exception in\nFireFox.  Trying to account for it is hanging FireFox.\nCould be a FireBug interaction."}, "before": {"return": {"type": "", "description": "unsubscribe handle"}, "description": "Executes the callback before a DOM event, custom event\nor method.  If the first argument is a function, it\nis assumed the target is a method.\nFor DOM and custom events:\ntype, callback, context, 1-n arguments\nFor methods:\ncallback, object (method host), methodName, context, 1-n arguments", "guessedname": "before", "guessedtype": "function"}}, "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved.", "constructors": [{"params": [{"type": "", "name": "o", "description": " configuration object"}], "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved."}], "namespace": "", "module": "yui", "file": "YUI.js", "shortname": "YUI", "properties": {"_iefix": {"description": "IE will not enumerate native functions in a derived object even if the\nfunction was overridden.  This is a workaround for specific functions \nwe care about on the Object prototype.", "param": "{Function} r  the object to receive the augmentation", "static": "", "private": "", "guessedname": "_iefix", "guessedtype": "property"}}, "name": "YUI"}, "array": {"name": "array", "namespace": "", "module": "yui", "methods": {"test": {"todo": "current implementation (intenionally) will not implicitly \nhandle html elements that are array-like (forms, selects, etc).", "return": {"type": "int", "description": "a number indicating the results:\n0: Not an array or an array-like collection\n1: A real array. \n2: array-like collection."}, "description": "Evaluates the input to determine if it is an array, array-like, or \nsomething else.  This is used to handle the arguments collection \navailable within functions, and HTMLElement collections", "guessedname": "test", "guessedtype": "function"}, "indexOf": {"return": {"type": "", "description": "the index of the item that contains the value or -1"}, "params": [{"type": "Array", "name": "a", "description": "  the array to search"}, {"type": "", "name": "val", "description": " the value to search for"}], "description": "Returns the index of the first item in the array\nthat contains the specified value, -1 if the\nvalue isn't found.", "guessedname": "indexOf", "guessedtype": "function"}, "Array": {"todo": "this will not automatically convert elements that are also collections\nsuch as forms and selects.  Passing true as the third param will\nforce a conversion.", "params": [{"type": "", "name": "o", "description": " the item to arrayify"}, {"type": "int", "name": "i", "description": "  if an array or array-like, this is the start index"}, {"type": "boolean", "name": "al", "description": "  if true, it forces the array-like fork.  This\ncan be used to avoid multiple array.test calls."}], "description": "Returns an array:\n- Arrays are return unmodified unless the start position is specified.\n- \"Array-like\" collections (@see Array.test) are converted to arrays\n- For everything else, a new array is created with the input as the sole item\n- The start position is used if the input is or is like an array to return\na subset of the collection.", "guessedname": "Array", "guessedtype": "function"}, "hash": {"return": {"type": "", "description": "the hash"}, "params": [{"type": "Array", "name": "k", "description": "  keyset"}, {"type": "Array", "name": "v", "description": "  optional valueset"}], "description": "Returns an object using the first array as keys, and\nthe second as values.  If the second array is not\nprovided the value is set to true for each.", "guessedname": "hash", "guessedtype": "function"}, "each": {"description": "Executes the supplied function on each item in the array.", "guessedname": "each", "guessedtype": "property"}}, "static": "", "file": "Array.js", "shortname": "array", "description": "Array utilities"}, "Node": {"name": "Node", "namespace": "", "module": "node", "guessedname": "BASE_NODE", "methods": {"appendChild": {"return": {"type": "Node", "description": "The appended node"}, "params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be appended"}], "description": "Passes through to DOM method.", "guessedname": "appendChild", "guessedtype": "property"}, "all": {"return": {"type": "NodeList", "description": "A wrapper instance for the supplied nodes."}, "params": [{"type": "HTMLCollection|Array|String", "name": "node", "description": " The object to wrap."}, {"type": "document|Node", "name": "doc", "description": " optional The document containing the node. Defaults to current document."}], "description": "Retrieves a NodeList instance for the given object\/string.", "guessedname": "all", "guessedtype": "function"}, "set": {"params": [{"type": "String", "name": "prop", "description": " Property to set"}, {"type": "any", "name": "val", "description": " Value to apply to the given property"}], "description": "Set the value of the property\/attribute on the HTMLElement bound to this Node.\nOnly strings\/numbers\/booleans are passed through unless a SETTER exists.", "guessedname": "set", "guessedtype": "function"}, "getAttribute": {"return": {"type": "String", "description": "The current value of the attribute"}, "params": [{"type": "String", "name": "attribute", "description": " The attribute to retrieve"}], "description": "Passes through to DOM method.", "guessedname": "getAttribute", "guessedtype": "property"}, "focus": {"description": "Passes through to DOM method.", "guessedname": "focus", "guessedtype": "property"}, "cloneNode": {"return": {"type": "Node", "description": "The clone"}, "params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be cloned"}], "description": "Passes through to DOM method.", "guessedname": "cloneNode", "guessedtype": "property"}, "setStyle": {"params": [{"type": "String", "name": "attr", "description": " The style attribute to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "description": "Applies a CSS style to a given node.", "guessedname": "setStyle", "guessedtype": "function"}, "nodeInOut": {"description": "Wraps the input and outputs of a node instance", "guessedname": "nodeInOut", "guessedtype": "function"}, "query": {"return": {"type": "Node", "description": "A Node instance for the matching HTMLElement."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Retrieves a single node based on the given CSS selector.", "guessedname": "query", "guessedtype": "function"}, "next": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "Function", "name": "fn", "description": " A boolean function used to test siblings\nthat receives the sibling node being tested as its only argument"}], "description": "Returns the next HTMLElement sibling that passes the boolean method. \nReturns the nearest HTMLElement sibling if no method provided.", "guessedname": "next", "guessedtype": "function"}, "queryAll": {"return": {"type": "NodeList", "description": "A NodeList instance for the matching HTMLCollection\/Array."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Retrieves a nodeList based on the given CSS selector.", "guessedname": "queryAll", "guessedtype": "function"}, "previous": {"return": {"type": "Node", "description": "Node instance or null if not found"}, "params": [{"type": "Function", "name": "fn", "description": " A boolean function used to test siblings\nthat receives the sibling node being tested as its only argument"}], "description": "Returns the previous sibling that is an HTMLElement. \nReturns the nearest HTMLElement sibling if no method provided.", "guessedname": "previous", "guessedtype": "function"}, "create": {"return": {"type": "Node", "description": "A new Node instance"}, "description": "Creates a Node instance from HTML string or jsonml", "param": "{String | Array} jsonml HTML string or jsonml", "params": [{"type": "String|Array", "name": "html", "description": " The string or jsonml to create from"}], "guessedname": "create", "guessedtype": "function"}, "contains": {"return": {"type": "Boolean", "description": "Whether or not this node is an ancestor of needle"}, "params": [{"type": "String | HTMLElement", "name": "needle", "description": " The possible descendent"}], "description": "Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy.", "guessedname": "contains", "guessedtype": "function"}, "getComputedStyle": {"return": {"type": "String", "description": "The computed value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Retrieves the computed value for the given style attribute.", "guessedname": "getComputedStyle", "guessedtype": "function"}, "submit": {"description": "Passes through to DOM method.\nOnly valid on FORM elements", "guessedname": "submit", "guessedtype": "property"}, "setStyles": {"params": [{"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "description": "Sets multiple style properties.", "guessedname": "setStyles", "guessedtype": "function"}, "get\nUse 'document' string to retrieve document Node instance from string": {"return": {"type": "Node", "description": "A wrapper instance for the supplied object."}, "params": [{"type": "document|HTMLElement|HTMLCollection|Array|String", "name": "node", "description": " The object to wrap."}, {"type": "document|Node", "name": "doc", "description": " optional The document containing the node. Defaults to current document."}, {"type": "boolean", "name": "isRoot", "description": " optional Whether or not this node should be treated as a root node. Root nodes\naren't allowed to traverse outside their DOM tree."}], "description": "Retrieves a Node instance for the given object\/string.", "guessedname": "get", "guessedtype": "function"}, "hasChildNodes": {"return": {"type": "Boolean", "description": "Whether or not the node has any childNodes"}, "description": "Passes through to DOM method.", "guessedname": "hasChildNodes", "guessedtype": "property"}, "blur": {"description": "Passes through to DOM method.", "guessedname": "blur", "guessedtype": "property"}, "test": {"return": {"type": "boolean", "description": "Whether or not the node matches the selector."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Test if the supplied node matches the supplied selector.", "guessedname": "test", "guessedtype": "function"}, "insertBefore": {"params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be inserted"}, {"type": "String | HTMLElement | Node", "name": "refNode", "description": " Node to be inserted before"}], "description": "Passes through to DOM method.", "guessedname": "insertBefore", "guessedtype": "property"}, "get": {"return": {"type": "any", "description": "Current value of the property"}, "params": [{"type": "String", "name": "prop", "description": " Property to get"}], "description": "Get the value of the property\/attribute on the HTMLElement bound to this Node.\nOnly strings\/numbers\/booleans are passed through unless a GETTER exists.", "guessedname": "get", "guessedtype": "function"}, "getElementsByTagName": {"return": {"type": "NodeList", "description": "A NodeList representing the HTMLCollection"}, "params": [{"type": "String", "name": "tagName", "description": " The tagName to collect"}], "description": "Passes through to DOM method.", "guessedname": "getElementsByTagName", "guessedtype": "property"}, "getStyle": {"return": {"type": "String", "description": "The current value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Retrieves a style attribute from the given node.", "guessedname": "getStyle", "guessedtype": "function"}, "hasAttribute": {"return": {"type": "Boolean", "description": "Whether or not the attribute is present"}, "params": [{"type": "String", "name": "attribute", "description": " The attribute to test for"}], "description": "Passes through to DOM method.", "guessedname": "hasAttribute", "guessedtype": "property"}, "replaceChild": {"return": {"type": "Node", "description": "The replaced node"}, "params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be inserted"}, {"type": "String | HTMLElement | Node", "name": "refNode", "description": " Node to be replaced"}], "description": "Passes through to DOM method.", "guessedname": "replaceChild", "guessedtype": "property"}, "detach": {"params": [{"type": "String", "name": "type", "description": " The type of DOM Event"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}], "description": "Attaches a handler for the given DOM event.", "guessedname": "detach", "guessedtype": "function"}, "reset": {"description": "Passes through to DOM method.\nOnly valid on FORM elements", "guessedname": "reset", "guessedtype": "property"}, "scrollIntoView": {"description": "Passes through to DOM method.", "guessedname": "scrollIntoView", "guessedtype": "property"}, "hasMethod": {"return": {"type": "Boolean", "description": "Whether or not the HTMLElement can use the method"}, "params": [{"type": "String", "name": "method", "description": " The method to check for"}], "description": "Tests whether or not the bound HTMLElement can use the given method.", "guessedname": "hasMethod", "guessedtype": "function"}, "setAttribute": {"params": [{"type": "String", "name": "attribute", "description": " The attribute to set"}, {"type": "String", "name": "The", "description": " value to apply to the attribute"}], "description": "Passes through to DOM method.", "guessedname": "setAttribute", "guessedtype": "property"}, "removeChild": {"return": {"type": "Node", "description": "The removed node"}, "params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be removed"}], "description": "Passes through to DOM method.", "guessedname": "removeChild", "guessedtype": "property"}, "compareTo": {"return": {"type": "Boolean", "description": "True if the nodes match, false if they do not."}, "params": [{"type": "String | HTMLElement | Node", "name": "refNode", "description": " The reference node to compare to the node."}], "description": "Compares nodes to determine if they match.\nNode instances can be compared to each other and\/or HTMLElements\/selectors.", "guessedname": "compareTo", "guessedtype": "function"}}, "file": "Node.js", "guessedtype": "property", "shortname": "Node", "properties": {"body": {"type": "Node", "description": "Returns a Node instance."}, "childNodes": {"type": "NodeList", "description": "Returns a NodeList instance."}, "offsetParent": {"type": "Node", "description": "Returns a Node instance."}, "documentElement": {"type": "Node", "description": "Returns a Node instance."}, "tFoot": {"type": "Node", "description": "Returns a Node instance."}, "text": {"type": "String", "description": "Normalizes nodeInnerText and textContent."}, "cells": {"type": "NodeList", "description": "Returns a NodeList instance."}, "ownerDocument": {"type": "Doc", "description": "Returns a Node instance."}, "firstChild": {"type": "Node", "description": "Returns a Node instance."}, "options": {"type": "NodeList", "description": "Returns a NodeList instance."}, "elements": {"type": "NodeList", "description": "Returns a NodeList instance."}, "parentNode": {"type": "Node", "description": "Returns a Node instance."}, "tBodies": {"type": "NodeList", "description": "Returns a NodeList instance."}, "rows": {"type": "NodeList", "description": "Returns a NodeList instance."}, "lastChild": {"type": "Node", "description": "Returns a Node instance."}, "previousSibling": {"type": "Node", "description": "Returns a Node instance."}, "children": {"type": "NodeList", "description": "Returns a NodeList instance."}, "tHead": {"type": "Node", "description": "Returns a Node instance."}}, "description": "A wrapper for DOM Nodes.\nNode properties can be accessed via the set\/get methods.\nWith the exception of the noted properties,\nonly strings, numbers, and booleans are passed through. \nUse Y.get() or Y.Node.get() to create Node instances."}, "DD.Proxy": {"name": "DD.Proxy", "constructors": [{"description": "This class extends dd-drag to allow for creating a proxy drag node, instead of dragging the original node."}], "namespace": "DD", "module": "dd-proxy", "events": {"beforeBorderStyleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeBorderStyleChange", "description": "Fires before the value for the configuration attribute 'borderStyle' changes. Return false to cancel the attribute change."}, "proxyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "proxyChange", "description": "Fires when the value for the configuration attribute 'proxy' changes."}, "positionProxyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "positionProxyChange", "description": "Fires when the value for the configuration attribute 'positionProxy' changes."}, "beforeResizeFrameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeResizeFrameChange", "description": "Fires before the value for the configuration attribute 'resizeFrame' changes. Return false to cancel the attribute change."}, "moveOnEndChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "moveOnEndChange", "description": "Fires when the value for the configuration attribute 'moveOnEnd' changes."}, "beforePositionProxyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforePositionProxyChange", "description": "Fires before the value for the configuration attribute 'positionProxy' changes. Return false to cancel the attribute change."}, "beforeProxyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeProxyChange", "description": "Fires before the value for the configuration attribute 'proxy' changes. Return false to cancel the attribute change."}, "beforeMoveOnEndChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeMoveOnEndChange", "description": "Fires before the value for the configuration attribute 'moveOnEnd' changes. Return false to cancel the attribute change."}, "resizeFrameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "resizeFrameChange", "description": "Fires when the value for the configuration attribute 'resizeFrame' changes."}, "borderStyleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "borderStyleChange", "description": "Fires when the value for the configuration attribute 'borderStyle' changes."}}, "guessedname": "DDM", "methods": {"_setFrame": {"description": "If resizeProxy is set to true (default) it will resize the proxy element to match the size of the Drag Element.\nIf positionProxy is set to true (default) it will position the proxy element in the same location as the Drag Element.", "private": "", "guessedname": "_setFrame", "guessedtype": "function"}, "end": {"description": "Ends the drag operation, if moveOnEnd is set it will position the Drag Element to the new location of the proxy.", "guessedname": "end", "guessedtype": "function"}, "start": {"description": "Starts the drag operation and sets the dragNode config option.", "guessedname": "start", "guessedtype": "function"}, "_createFrame": {"description": "Create the proxy element if it doesn't already exist and set the DD.DDM._proxy value", "private": "", "guessedname": "_createFrame", "guessedtype": "function"}, "initializer": {"description": "Lifecycle method", "private": "", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Drag", "superclass": "Drag", "file": "proxy.js", "guessedtype": "property", "shortname": "Proxy", "configs": {"borderStyle": {"type": "Boolean", "description": "The default border style for the border of the proxy. Default: 1px solid #808080", "guessedname": "borderStyle", "guessedtype": "property"}, "positionProxy": {"type": "Boolean", "description": "Make the Proxy node appear in the same place as the original node. Default: true", "guessedname": "positionProxy", "guessedtype": "property"}, "resizeFrame": {"type": "Boolean", "description": "Make the Proxy node assume the size of the original node. Default: true", "guessedname": "resizeFrame", "guessedtype": "property"}, "proxy": {"type": "Boolean", "description": "Make this Draggable instance a Proxy instance. Default: false", "guessedname": "proxy", "guessedtype": "property"}, "moveOnEnd": {"type": "Boolean", "description": "Move the original node at the end of the drag. Default: true", "guessedname": "moveOnEnd", "guessedtype": "property"}}, "description": "This class extends dd-drag to allow for creating a proxy drag node, instead of dragging the original node."}, "Anim": {"name": "Anim", "configs": {"node": {"type": "Node", "description": "The object to be animated.", "guessedname": "node", "guessedtype": "property"}, "isAnimated": {"default": "false", "type": "Boolean", "description": "Whether or not the animation is currently animated.", "guessedname": "isAnimated", "guessedtype": "property"}, "direction": {"default": "\"normal\"", "type": "String", "description": "How iterations of the animation should behave. \nPossible values are \"normal\" and \"alternate\".\nNormal will repeat the animation, alternate will reverse on every other pass.", "guessedname": "direction", "guessedtype": "property"}, "from": {"type": "Object", "description": "The starting values for the animated properties. \nFields may be strings, numbers, or functions.\nIf a function is used, the return value becomes the from value.\nIf no from value is specified, the DEFAULT_GETTER will be used.", "guessedname": "from", "guessedtype": "property"}, "iterations": {"default": "1", "type": "Int", "description": "The number of times the animation should run", "guessedname": "iterations", "guessedtype": "property"}, "iterationCount": {"default": "0", "type": "Int", "description": "The number of iterations that have occurred.\nResets when an animation ends (reaches iteration count or stop() called).", "guessedname": "iterationCount", "guessedtype": "property"}, "elapsedTime": {"default": "0", "type": "Int", "description": "Current time the animation has been running.", "guessedname": "elapsedTime", "guessedtype": "property"}, "to": {"type": "Object", "description": "The ending values for the animated properties. \nFields may be strings, numbers, or functions.", "guessedname": "to", "guessedtype": "property"}, "startTime": {"default": "0", "type": "Int", "description": "Date stamp for the first frame of the animation.", "guessedname": "startTime", "guessedtype": "property"}, "duration": {"type": "Number", "description": "The length of the animation.  Defaults to \"1\" (second).", "guessedname": "duration", "guessedtype": "property"}, "easing": {"type": "Function", "description": "The method that will provide values to the attribute(s) during the animation. \nDefaults to \"YAHOO.util.Easing.easeNone\".", "guessedname": "easing", "guessedtype": "property"}}, "namespace": "", "module": "animation", "events": {"beforeToChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeToChange", "description": "Fires before the value for the configuration attribute 'to' changes. Return false to cancel the attribute change."}, "isAnimatedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "isAnimatedChange", "description": "Fires when the value for the configuration attribute 'isAnimated' changes."}, "beforeIterationCountChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeIterationCountChange", "description": "Fires before the value for the configuration attribute 'iterationCount' changes. Return false to cancel the attribute change."}, "fromChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "fromChange", "description": "Fires when the value for the configuration attribute 'from' changes."}, "beforeEasingChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeEasingChange", "description": "Fires before the value for the configuration attribute 'easing' changes. Return false to cancel the attribute change."}, "easingChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "easingChange", "description": "Fires when the value for the configuration attribute 'easing' changes."}, "beforeElapsedTimeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeElapsedTimeChange", "description": "Fires before the value for the configuration attribute 'elapsedTime' changes. Return false to cancel the attribute change."}, "iterationCountChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "iterationCountChange", "description": "Fires when the value for the configuration attribute 'iterationCount' changes."}, "beforeIterationsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeIterationsChange", "description": "Fires before the value for the configuration attribute 'iterations' changes. Return false to cancel the attribute change."}, "startTimeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "startTimeChange", "description": "Fires when the value for the configuration attribute 'startTime' changes."}, "beforeIsAnimatedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeIsAnimatedChange", "description": "Fires before the value for the configuration attribute 'isAnimated' changes. Return false to cancel the attribute change."}, "durationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' changes."}, "toChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "toChange", "description": "Fires when the value for the configuration attribute 'to' changes."}, "beforeDurationChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDurationChange", "description": "Fires before the value for the configuration attribute 'duration' changes. Return false to cancel the attribute change."}, "nodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' changes."}, "beforeFromChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeFromChange", "description": "Fires before the value for the configuration attribute 'from' changes. Return false to cancel the attribute change."}, "beforeStartTimeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeStartTimeChange", "description": "Fires before the value for the configuration attribute 'startTime' changes. Return false to cancel the attribute change."}, "beforeDirectionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDirectionChange", "description": "Fires before the value for the configuration attribute 'direction' changes. Return false to cancel the attribute change."}, "iterationsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "iterationsChange", "description": "Fires when the value for the configuration attribute 'iterations' changes."}, "directionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' changes."}, "beforeNodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeNodeChange", "description": "Fires before the value for the configuration attribute 'node' changes. Return false to cancel the attribute change."}, "elapsedTimeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "elapsedTimeChange", "description": "Fires when the value for the configuration attribute 'elapsedTime' changes."}}, "guessedname": "IS_ANIMATED", "methods": {"start": {"static": "", "description": "Starts the animation thread.\nOnly one thread can run at a time.", "guessedname": "start", "guessedtype": "function"}, "run": {"param": "{Number|String} elapsed optional Millisecond or\npercent start time marker.", "static": "", "description": "Called per Interval to handle each animation frame.", "guessedname": "run", "guessedtype": "function"}, "pause": {"description": "Pauses the animation and\nfreezes it in its current state and time.\nCalling run() will continue where it left off.", "guessedname": "pause", "guessedtype": "function"}, "stop": {"static": "", "description": "Stops the _timer.", "guessedname": "pause", "guessedtype": "function"}}, "file": "Anim.js", "guessedtype": "property", "shortname": "Anim", "properties": {"DEFAULT_GETTER": {"static": "", "description": "The default getter to use when getting object properties.", "guessedname": "DEFAULT_GETTER", "guessedtype": "function"}, "DEFAULT_UNIT": {"static": "", "description": "The default unit to use with properties that pass the RE_DEFAULT_UNIT test.", "guessedname": "DEFAULT_UNIT", "guessedtype": "property"}, "RE_DEFAULT_UNIT": {"static": "", "description": "Regex of properties that should use the default unit.", "guessedname": "RE_DEFAULT_UNIT", "guessedtype": "property"}, "DEFAULT_SETTER": {"static": "", "description": "The default setter to use when setting object properties.", "guessedname": "DEFAULT_SETTER", "guessedtype": "function"}}, "description": "Handles animation _queueing and threading."}, "Get": {"name": "Get", "namespace": "", "module": "yui", "guessedname": "Get", "methods": {"_purge": {"private": "", "description": "Removes the nodes for the specified queue", "guessedname": "_purge", "guessedtype": "function"}, "_finalize": {"guessedname": "_finalize", "params": [{"type": "string", "name": "id", "description": "  the transaction id"}], "description": "Called by the the helper for detecting script load in Safari", "private": "", "guessedtype": "function"}, "_autoPurge": {"private": "", "description": "Removes processed queues and corresponding nodes", "guessedname": "_autoPurge", "guessedtype": "function"}, "_finish": {"guessedname": "_finish", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}], "description": "The request is complete, so executing the requester's callback", "private": "", "guessedtype": "function"}, "_linkNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a link node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the css file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}], "guessedname": "_linkNode", "guessedtype": "function"}, "script": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more script nodes into the head\nof the current document or the document in a specified window.", "static": "", "guessedname": "script", "guessedtype": "function", "params": [{"type": "string|string[]", "name": "url", "description": "  the url or urls to the script(s)"}, {"type": "object", "name": "opts", "description": "  Options: \n<dl>\n<dt>onSuccess<\/dt>\n<dd>\ncallback to execute when the script(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>onFailure<\/dt>\n<dd>\ncallback to execute when the script load operation fails\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted successfully<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove any nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>scope<\/dt>\n<dd>the execution context for the callbacks<\/dd>\n<dt>win<\/dt>\n<dd>a window other than the one the utility occupies<\/dd>\n<dt>autopurge<\/dt>\n<dd>\nsetting to true will let the utilities cleanup routine purge \nthe script once loaded\n<\/dd>\n<dt>data<\/dt>\n<dd>\ndata that is supplied to the callback when the script(s) are\nloaded.\n<\/dd>\n<dt>varName<\/dt>\n<dd>\nvariable that should be available when a script is finished\nloading.  Used to help Safari 2.x and below with script load \ndetection.  The type of this property should match what was\npassed into the url parameter: if loading a single url, a\nstring can be supplied.  If loading multiple scripts, you\nmust supply an array that contains the variable name for\neach script.\n<\/dd>\n<dt>insertBefore<\/dt>\n<dd>node or node id that will become the new node's nextSibling<\/dd>\n<\/dl>\n<dt>charset<\/dt>\n<dd>Node charset, default utf-8<\/dd>\n<pre>\n\/\/ assumes yahoo, dom, and event are already on the page\n&nbsp;&nbsp;Y.Get.script(\n&nbsp;&nbsp;[\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/dragdrop\/dragdrop-min.js\",\n&nbsp;&nbsp;&nbsp;\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/animation\/animation-min.js\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(o.data); \/\/ foo\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new Y.DDProxy(\"dd1\"); \/\/ also new o.reference(\"dd1\"); would work\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(\"won't cause error because Y is the scope\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(o.nodes.length === 2) \/\/ true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/ o.purge(); \/\/ optionally remove the script nodes immediately\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(\"transaction failed\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;data: \"foo\",\n&nbsp;&nbsp;&nbsp;&nbsp;scope: Y,\n&nbsp;&nbsp;&nbsp;&nbsp;\/\/ win: otherframe \/\/ target another window\/frame\n&nbsp;&nbsp;&nbsp;&nbsp;autopurge: true \/\/ allow the utility to choose when to remove the nodes\n&nbsp;&nbsp;&#125;);\n<\/pre>"}]}, "_returnData": {"private": "", "description": "Returns the data payload for callback functions", "guessedname": "_returnData", "guessedtype": "function"}, "queue": {"guessedname": "_queue", "params": [{"type": "string", "name": "type", "description": "  the type of node to insert"}, {"type": "string", "name": "url", "description": "  the url to load"}, {"type": "", "name": "opts", "description": " the hash of options for this request"}], "description": "Saves the state for the request and begins loading\nthe requested urls", "private": "", "guessedtype": "function"}, "_scriptNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a script node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the script file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}], "guessedname": "_scriptNode", "guessedtype": "function"}, "_node": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates an HTML element, this is not appended to a document", "private": "", "params": [{"type": "string", "name": "type", "description": "  the type of element"}, {"type": "string", "name": "attr", "description": "  the attributes"}, {"type": "Window", "name": "win", "description": "  optional window to create the element in"}], "guessedname": "_node", "guessedtype": "function"}, "abort": {"params": [{"type": "string|object", "name": "either", "description": " the tId or the object returned from\nscript() or css()"}], "description": "Abort a transaction", "guessedname": "abort", "guessedtype": "function"}, "_next": {"guessedname": "_next", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "loaded", "description": "  the url that was just loaded, if any"}], "description": "Loads the next item for a given request", "private": "", "guessedtype": "function"}, "_track": {"guessedname": "_track", "params": [{"type": "string", "name": "type", "description": "  the type of node to track"}, {"type": "HTMLElement", "name": "n", "description": "  the node to track"}, {"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "url", "description": "  the url that is being loaded"}, {"type": "Window", "name": "win", "description": "  the targeted window"}, {"type": "", "name": "qlength", "description": " the number of remaining items in the queue,\nincluding this one"}, {"type": "Function", "name": "trackfn", "description": "  function to execute when finished\nthe default is _next"}], "description": "Detects when a node has been loaded.  In the case of\nscript nodes, this does not guarantee that contained\nscript is ready to use.", "private": "", "guessedtype": "function"}, "css": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more css link nodes into the \nhead of the current document or the document in a specified\nwindow.", "static": "", "guessedname": "css", "guessedtype": "function", "params": [{"type": "string", "name": "url", "description": "  the url or urls to the css file(s)"}, {"type": "", "name": "opts", "description": " Options: \n<dl>\n<dt>onSuccess<\/dt>\n<dd>\ncallback to execute when the css file(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>win<\/dl>\n<dd>the window the link nodes(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>scope<\/dt>\n<dd>the execution context for the callbacks<\/dd>\n<dt>win<\/dt>\n<dd>a window other than the one the utility occupies<\/dd>\n<dt>data<\/dt>\n<dd>\ndata that is supplied to the callbacks when the nodes(s) are\nloaded.\n<\/dd>\n<dt>insertBefore<\/dt>\n<dd>node or node id that will become the new node's nextSibling<\/dd>\n<dt>charset<\/dt>\n<dd>Node charset, default utf-8<\/dd>\n<\/dl>\n<pre>\nY.Get.css(\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/menu\/assets\/skins\/sam\/menu.css\");\n<\/pre>\n<pre>\nY.Get.css([\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/menu\/assets\/skins\/sam\/menu.css\",\n\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/logger\/assets\/skins\/sam\/logger.css\"]);\n<\/pre>"}]}}, "static": "", "file": "Get.js", "guessedtype": "function", "shortname": "Get", "properties": {"POLL_FREQ": {"description": "The default poll freqency in ms, when needed", "default": "10", "static": "", "guessedname": "POLL_FREQ", "guessedtype": "property", "type": "int"}, "qidx": {"guessedname": "qidx", "type": "int", "description": "queue index used to generate transaction ids", "private": "", "guessedtype": "property"}, "queues": {"private": "", "description": "hash of queues to manage multiple requests", "guessedname": "queues", "guessedtype": "property"}, "purging": {"guessedname": "purging", "type": "boolean", "description": "interal property used to prevent multiple simultaneous purge \nprocesses", "private": "", "guessedtype": "property"}, "TIMEOUT": {"description": "The length time to poll for varName when loading a script in\nSafari 2.x before the transaction fails.\nproperty TIMEOUT", "default": "2000", "static": "", "guessedname": "TIMEOUT", "guessedtype": "property", "type": "int"}, "nidx": {"guessedname": "nidx", "type": "int", "description": "node index used to generate unique node ids", "private": "", "guessedtype": "property"}, "PURGE_THRESH": {"description": "The number of request required before an automatic purge.\nproperty PURGE_THRESH", "default": "20", "static": "", "guessedname": "PURGE_THRESH", "guessedtype": "property", "type": "int"}}, "description": "Fetches and inserts one or more script or link nodes into the document"}, "DD.DDM": {"guessedname": "DDMBase", "name": "DD.DDM", "configs": {"clickPixelThresh": {"type": "Number", "description": "The number of pixels to move to start a drag operation, default is 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}}, "constructors": [{"description": "Extends the dd-ddm-base Class to add support for the viewport shim to allow a draggable node to drag to be dragged over an iframe or any other node that traps mousemove events.\nIt is also required to have Drop Targets enabled, as the viewport shim will contain the shims for the Drop Targets."}, {"description": "Provides the base Drag Drop Manger required for making a Node draggable."}, {"description": "Extends the dd-ddm Class to add support for the placement of Drop Target shims inside the viewport shim. It also handles all Drop Target related events and interactions."}], "namespace": "DD", "module": "dd-ddm-drop", "events": {"clickPixelThreshChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "clickPixelThreshChange", "description": "Fires when the value for the configuration attribute 'clickPixelThresh' changes."}, "beforeClickPixelThreshChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeClickPixelThreshChange", "description": "Fires before the value for the configuration attribute 'clickPixelThresh' changes. Return false to cancel the attribute change."}}, "methods": {"cssSizestoObject": {"return": {"type": "Object", "description": "The gutter Object Literal."}, "params": [{"type": "String", "name": "gutter", "description": " CSS style string for gutter: '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)"}], "description": "Helper method to use to set the gutter from the attribute setter.", "guessedname": "cssSizestoObject", "guessedtype": "function"}, "_move": {"description": "Internal listener for the mousemove DOM event to pass to the Drag's move method.", "private": "", "guessedname": "_move", "guessedtype": "function"}, "_init": {"description": "DDM's init method", "private": "", "guessedname": "_init", "guessedtype": "function"}, "_deactivateTargets": {"description": "This method fires the drop:hit, drag:drophit, drag:dropmiss methods and deactivates the shims..", "private": "", "guessedname": "_deactivateTargets", "guessedtype": "function"}, "_resetMode": {"description": "Private method to reset the interaction mode to the default after a drag operation", "private": "", "guessedname": "_resetMode", "guessedtype": "function"}, "_start": {"guessedname": "_start", "params": [{"type": "Number", "name": "x", "description": " The x position of the drag element"}, {"type": "Number", "name": "y", "description": " The y position of the drag element"}, {"type": "Number", "name": "w", "description": " The width of the drag element"}, {"type": "Number", "name": "h", "description": " The height of the drag element"}], "description": "Internal method used by Drag to signal the start of a drag operation", "private": "", "guessedtype": "function"}, "unregTarget": {"params": [{"type": "Object", "name": "t", "description": " The Target to remove from the tars collection"}], "description": "Remove the passed in Target from the tars collection", "guessedname": "unregTarget", "guessedtype": "function"}, "regTarget": {"params": [{"type": "Object", "name": "t", "description": " The Target to add to the tars collection"}], "description": "Add the passed in Target to the tars collection", "guessedname": "regTarget", "guessedtype": "function"}, "_dropMove": {"guessedname": "_dropMove", "params": [{"type": "Boolean", "name": "force", "description": " Optional force at start."}], "description": "This method is called when the move method is called on the Drag Object.", "private": "", "guessedtype": "function"}, "_unregDrag": {"guessedname": "_unregDrag", "params": [{"type": "Drag", "name": "d", "description": " The drag object."}], "description": "Remove this drag object from the DDM._drags array.", "private": "", "guessedtype": "function"}, "clearCache": {"description": "Clears the cache data used for this interaction.", "guessedname": "clearCache", "guessedtype": "function"}, "_hasActiveShim": {"guessedname": "_hasActiveShim", "return": {"type": "Boolean", "description": ""}, "description": "This method checks the _activeShims Object to see if there is a shim active.", "private": "", "guessedtype": "function"}, "_startDrag": {"guessedname": "_startDrag", "params": [{"type": "Number", "name": "x", "description": " The x position of the drag element"}, {"type": "Number", "name": "y", "description": " The y position of the drag element"}, {"type": "Number", "name": "w", "description": " The width of the drag element"}, {"type": "Number", "name": "h", "description": " The height of the drag element"}], "description": "Factory method to be overwritten by other DDM's", "private": "", "guessedtype": "function"}, "_end": {"description": "Internal method used by Drag to signal the end of a drag operation", "private": "", "guessedname": "_end", "guessedtype": "function"}, "_setMode": {"description": "Private method to set the interaction mode based on the activeDrag's config", "private": "", "guessedname": "_setMode", "guessedtype": "function"}, "getBestMatch": {"return": {"type": "Object or Array", "description": ""}, "params": [{"type": "Array", "name": "drops", "description": " An Array of drops to scan for the best match."}, {"type": "Boolean", "name": "all", "description": " If present, it returns an Array. First item is best match, second is an Array of the other items in the original Array."}], "description": "This method will gather the area for all potential targets and see which has the hightest covered area and return it.", "guessedname": "getBestMatch", "guessedtype": "function"}, "addValid": {"return": {"type": "Self", "description": ""}, "params": [{"type": "Object", "name": "drop", "description": ""}], "description": "Add a Drop Target to the list of Valid Targets. This list get's regenerated on each new drag operation.", "guessedname": "addValid", "guessedtype": "function"}, "_createPG": {"description": "Creates the shim and adds it's listeners to it.", "private": "", "guessedname": "_createPG", "guessedtype": "function"}, "_activateTargets": {"description": "Clear the cache and activate the shims of all the targets", "private": "", "guessedname": "_activateTargets", "guessedtype": "function"}, "getDrop": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String\/Object", "name": "node", "description": " The Node instance or Selector string to check for a valid Drop Object"}], "description": "Get a valid Drop instance back from a Node or a selector string, false otherwise", "guessedname": "getDrop", "guessedtype": "function"}, "getDrag": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String\/Object", "name": "node", "description": " The Node instance or Selector string to check for a valid Drag Object"}], "description": "Get a valid Drag instance back from a Node or a selector string, false otherwise", "guessedname": "getDrag", "guessedtype": "function"}, "_endDrag": {"description": "Factory method to be overwritten by other DDM's", "private": "", "guessedname": "_endDrag", "guessedtype": "function"}, "rnd": {"return": {"type": "Number", "description": "The rounded number"}, "params": [{"type": "Number", "name": "The", "description": " number to round"}], "description": "Round a number to the nearest 100th.", "guessedname": "rnd", "guessedtype": "function"}, "setXY": {"params": [{"type": "Object", "name": "node", "description": " The node to set the position of"}, {"type": "Array", "name": "xy", "description": " The Array of left\/top position to be set."}], "description": "A simple method to set the top and left position from offsets instead of page coordinates", "guessedname": "setXY", "guessedtype": "function"}, "_pg_deactivate": {"description": "Deactivates the shim", "private": "", "guessedname": "_pg_deactivate", "guessedtype": "function"}, "_pg_activate": {"description": "Activates the shim", "private": "", "guessedname": "_pg_activate", "guessedtype": "function"}, "_lookup": {"guessedname": "_lookup", "return": {"type": "Array", "description": "The valid Drop Targets that are in the viewport."}, "description": "Filters the list of Drops down to those in the viewport.", "private": "", "guessedtype": "function"}, "isOverTarget": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "Object", "name": "drop", "description": " The drop to check against"}], "description": "Check to see if the Drag element is over the target, method varies on current mode", "guessedname": "isOverTarget", "guessedtype": "function"}, "_regDrag": {"guessedname": "_regDrag", "params": [{"type": "Drag", "name": "d", "description": " The Drag object"}], "description": "Adds a reference to the drag object to the DDM._drags array, called in the constructor of Drag.", "private": "", "guessedtype": "function"}, "_pg_size": {"description": "Sizes the shim on: activatation, window:scroll, window:resize", "private": "", "guessedname": "_pg_size", "guessedtype": "function"}, "_handleTargetOver": {"guessedname": "_handleTargetOver", "params": [{"type": "Boolean", "name": "force", "description": " Force it to run the first time."}], "description": "This method execs _handleTargetOver on all valid Drop Targets", "private": "", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "ddm-drop.js", "guessedtype": "function", "shortname": "DDM", "properties": {"_pg": {"guessedname": "_pg", "type": "{Node}", "description": "The shim placed over the screen to track the mousemove event.", "private": "", "guessedtype": "property"}, "useHash": {"type": "{Boolean}", "description": "Should we only check targets that are in the viewport on drags (for performance), default: true", "guessedname": "useHash", "guessedtype": "property"}, "activeDrag": {"type": "{Drag}", "description": "A reference to the currently active draggable object.", "guessedname": "activeDrag", "guessedtype": "property"}, "POINT": {"type": "Number", "description": "In point mode, a Drop is targeted by the cursor being over the Target", "guessedname": "POINT", "guessedtype": "property"}, "_debugShim": {"guessedname": "_debugShim", "type": "{Boolean}", "description": "Set this to true to set the shims opacity to .5 for debugging it, default: false.", "private": "", "guessedtype": "property"}, "otherDrops": {"type": "{Object}", "description": "An object literal of Other Drop Targets that we encountered during this interaction (in the case of overlapping Drop Targets)", "guessedname": "otherDrops", "guessedtype": "property"}, "validDrops": {"type": "{Array}", "description": "An array of the valid Drop Targets for this interaction.", "guessedname": "validDrops", "guessedtype": "property"}, "mode": {"type": "Number", "description": "The mode that the drag operations will run in 0 for Point, 1 for Intersect, 2 for Strict", "guessedname": "mode", "guessedtype": "property"}, "STRICT": {"type": "Number", "description": "In strict mode, a Drop is targeted by the \"entire\" drag node being over the Target", "guessedname": "STRICT", "guessedtype": "property"}, "clickPixelThresh": {"type": "{Number}", "description": "The number of pixels moved needed to start a drag operation, default 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "clickTimeThresh": {"type": "{Number}", "description": "The number of milliseconds a mousedown needs to exceed to start a drag operation, default 1000.", "guessedname": "clickTimeThresh", "guessedtype": "property"}, "INTERSECT": {"type": "Number", "description": "In intersect mode, a Drop is targeted by \"part\" of the drag node being over the Target", "guessedname": "INTERSECT", "guessedtype": "property"}, "_activeShims": {"guessedname": "_activeShims", "type": "{Object}", "description": "Placeholder for all active shims on the page", "private": "", "guessedtype": "property"}, "tars": {"type": "{Array}", "description": "All of the Targets", "guessedname": "tars", "guessedtype": "property"}, "activeDrop": {"type": "{Object}", "description": "A reference to the active Drop Target", "guessedname": "activeDrop", "guessedtype": "property"}, "_drags": {"guessedname": "_drags", "type": "{Array}", "description": "Holder for all registered drag elements.", "private": "", "guessedtype": "property"}, "_oldMode": {"guessedname": "_oldMode", "type": "Number", "description": "Placeholder for the mode when the drag object changes it..", "private": "", "guessedtype": "property"}}, "description": "Extends the dd-ddm-base Class to add support for the viewport shim to allow a draggable node to drag to be dragged over an iframe or any other node that traps mousemove events.\nIt is also required to have Drop Targets enabled, as the viewport shim will contain the shims for the Drop Targets."}, "JSON": {"name": "JSON", "namespace": "", "module": "JSON", "guessedname": "JSON", "methods": {"parse": {"return": {"type": "MIXED", "description": "the native JavaScript representation of the JSON string"}, "description": "Parse a JSON string, returning the native JavaScript representation.", "throws": "SyntaxError", "static": "", "guessedname": "parse", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  JSON string data"}, {"type": "function", "name": "reviver", "description": "  (optional) function(k,v) passed each key value pair of object literals, allowing pruning or altering values"}], "public": ""}, "stringify": {"return": {"type": "string", "description": "JSON string representation of the input"}, "description": "Converts an arbitrary value to a JSON string representation.\nCyclical object or array references are replaced with null.\nIf a whitelist is provided, only matching object keys will be included.\nIf a depth limit is provided, objects and arrays at that depth will\nbe stringified as empty.", "static": "", "guessedname": "stringify", "guessedtype": "function", "params": [{"type": "MIXED", "name": "o", "description": "  any arbitrary object to convert to JSON string"}, {"type": "Array", "name": "w", "description": "  (optional) whitelist of acceptable object keys to include"}, {"type": "number", "name": "d", "description": "  (optional) depth limit to recurse objects\/arrays (practical minimum 1)"}], "public": ""}, "dateToString": {"return": {"type": "String", "description": "stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ"}, "description": "Serializes a Date instance as a UTC date string.  Used internally by\nstringify.  Override this method if you need Dates serialized in a\ndifferent format.", "static": "", "guessedname": "dateToString", "guessedtype": "function", "params": [{"type": "Date", "name": "d", "description": "  The Date to serialize"}]}, "_revive": {"return": {"type": "MIXED", "description": "The results of the filtered data"}, "description": "Traverses nested objects, applying a reviver function to each (key,value)\nfrom the scope if the key:value's containing object.  The value returned\nfrom the function will replace the original value in the key:value pair.\nIf the value returned is undefined, the key will be omitted from the\nreturned object.", "private": "", "static": "", "guessedname": "_revive", "guessedtype": "function", "params": [{"type": "MIXED", "name": "data", "description": "  Any JavaScript data"}, {"type": "Function", "name": "reviver", "description": "  filter or mutation function"}]}}, "static": "", "file": "Stringify.js", "guessedtype": "property", "shortname": "JSON", "properties": {"_INVALID": {"description": "Final step in the validation.  Regex used to test the string left after\nall previous replacements for invalid characters.", "private": "", "static": "", "guessedname": "_INVALID", "guessedtype": "property", "type": "{RegExp}"}, "_BRACKETS": {"description": "Third step in the validation.  Regex used to remove all open square\nbrackets following a colon, comma, or at the beginning of the string.", "private": "", "static": "", "guessedname": "_BRACKETS", "guessedtype": "property", "type": "{RegExp}"}, "_SPECIAL_CHARS": {"description": "Regex used to replace special characters in strings for JSON\nstringification.", "private": "", "static": "", "guessedname": "_SPECIAL_CHARS", "guessedtype": "property", "type": "{RegExp}"}, "_CHARS": {"description": "Character substitution map for common escapes and special characters.", "private": "", "static": "", "guessedname": "_CHARS", "guessedtype": "property", "type": "{Object}"}, "_ESCAPES": {"description": "First step in the validation.  Regex used to replace all escape\nsequences (i.e. \"\\\\\", etc) with '@' characters (a non-JSON character).", "private": "", "static": "", "guessedname": "_ESCAPES", "guessedtype": "property", "type": "{RegExp}"}, "_VALUES": {"description": "Second step in the validation.  Regex used to replace all simple\nvalues with ']' characters.", "private": "", "static": "", "guessedname": "_VALUES", "guessedtype": "property", "type": "{RegExp}"}}, "description": "Provides Y.JSON.parse method to take JSON strings and return native\nJavaScript objects."}, "Base": {"name": "Base", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal of configuration property name\/value pairs"}], "description": "Provides a base class for managed attribute based\nobjects, which automates chaining of init and destroy\nlifecycle methods and automatic instantiation of\nregistered Attributes, through the static ATTRS property"}], "namespace": "", "module": "base", "events": {"": {"params": [{"type": "EventFacade", "name": "e", "description": " Event object"}, {"type": "", "name": "config", "description": " Object literal of configuration name\/value pairs"}], "description": "Init event, fired prior to initialization. Invoking\nthe preventDefault method on the EventFacade provided \nto subscribers will prevent initialization from occuring.\n<p>\nSubscribers to the after momemt of this event, will be notified\nafter initialization of the object is complete (and therefore\ncannot prevent initialization).\n<\/p>", "param": "{EventFacade} e Event object"}}, "guessedname": "Base", "methods": {"on": {"description": "Alias for the subscribe method.", "guessedname": "on", "guessedtype": "function"}, "toString": {"description": "Default toString implementation", "guessedname": "toString", "guessedtype": "function"}, "_defInitFn": {"private": "", "description": "Default init event handler", "guessedname": "_defInitFn", "guessedtype": "function"}, "subscribe": {"return": {"type": "Event.Handle", "description": "unsubscribe handle"}, "params": [{"type": "String", "name": "type", "description": " The type of event to subscribe to. If \nthe type string does not contain a prefix (\"prefix:eventType\"), \nthe name property of the instance will be used as the default prefix."}, {"type": "Function", "name": "fn", "description": " The callback, invoked when the event is fired."}, {"type": "Object", "name": "context", "description": " The execution context"}, {"type": "Object*", "name": "args*", "description": " 1..n params to supply to the callback"}], "description": "Subscribe to a custom event hosted by this object.\n<p>\nOverrides EventTarget's subscribe method, to add the name prefix \nof the instance to the event type, if absent.\n<\/p>", "guessedname": "subscribe", "guessedtype": "function"}, "fire": {"return": {"type": "Boolean", "description": "the return value from EventTarget.fire"}, "params": [{"type": "String|Object", "name": "type", "description": " The type of the event, or an object that contains\na 'type' property. If the type does not contain a prefix (\"prefix:eventType\"),\nthe name property of the instance will be used as the default prefix."}, {"type": "Object*", "name": "arguments", "description": " an arbitrary set of parameters to pass to \nthe handler."}], "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters.\n<p>\nOverrides EventTarget's fire method, to add the name prefix \nof the instance to the event type, if absent.\n<\/p>", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"params": [{"type": "String", "name": "type", "description": "    The type, or name of the event. If \nthe type string does not contain a prefix (\"prefix:eventType\"), \nthe name property of the instance will be used as the default prefix."}], "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.\n<p>\nOverrides EventTarget's unsubscribeAll method, to add the name prefix \nof the instance to the event type, if absent.\n<\/p>", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "after": {"params": [{"type": "String", "name": "type", "description": " The type of event to subscribe to. If \nthe type string does not contain a prefix (\"prefix:eventType\"), \nthe name property of the instance will be used as the default prefix."}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "Object", "name": "context", "description": " The execution context"}, {"type": "Object*", "name": "args*", "description": " 1..n params to supply to the callback"}], "description": "Subscribe to a custom event hosted by this object.  The\nsupplied callback will execute <em>after<\/em> any listeners added\nvia the subscribe method, and after the default function,\nif configured for the event, has executed.\n<p>\nOverrides EventTarget's after method, to add the name prefix \nof the instance to the event type, if absent.\n<\/p>", "guessedname": "after", "guessedtype": "function"}, "publish": {"return": {"type": "Event.Custom", "description": "the custom event"}, "params": [{"type": "String", "name": "type", "description": "  The type, or name of the event. If the type does not \ncontain a prefix (\"prefix:eventType\"), the name property of the instance will \nbe used as the default prefix."}, {"type": "Object", "name": "opts", "description": " Optional config params (see EventTarget publish for details)"}], "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned. \n<p>\nOverrides EventTarget's publish method, to add the name prefix \nof the instance to the event type, if absent.\n<\/p>", "guessedname": "publish", "guessedtype": "function"}, "_destroyHierarchy": {"private": "", "description": "Destroys the class hierarchy rooted at this base class by invoking\nthe descructor method on the prototype of each class in the hierarchy.", "guessedname": "_destroyHierarchy", "guessedtype": "function"}, "init": {"final": "", "params": [{"type": "Object", "name": "config", "description": " Object literal of configuration property name\/value pairs"}], "description": "Init lifecycle method, invoked during construction.\nFires the init event prior to invoking initializers on\nthe class hierarchy.", "guessedname": "init", "guessedtype": "function"}, "_defDestroyFn": {"private": "", "description": "Default destroy event handler", "guessedname": "_defDestroyFn", "guessedtype": "function"}, "_initHierarchy": {"guessedname": "_initHierarchy", "params": [{"type": "Object", "name": "userConf", "description": " Config hash containing attribute name\/value pairs"}], "description": "Initializes the class hierarchy rooted at this base class,\nwhich includes initializing attributes for each class defined \nin the class's static ATTRS property and invoking the initializer \nmethod on the prototype of each class in the hierarchy.", "private": "", "guessedtype": "function"}, "unsubscribe.\n<p>\nOverrides EventTarget's unsubscribe method, to add the name prefix \nof the instance to the event type, if absent.\n<\/p>": {"return": {"type": "boolean", "description": "true if the subscriber was found and detached."}, "params": [{"type": "String|Object", "name": "type", "description": "  Either the handle to the subscriber or the \ntype of event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events. If \nthe type string does not contain a prefix \n(\"prefix:eventType\"), the name property of the \ninstance will be used as the default prefix."}, {"type": "Function", "name": "fn", "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."}, {"type": "Object", "name": "context", "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes one or more listeners the from the specified event", "guessedname": "unsubscribe", "guessedtype": "function"}, "destroy": {"description": "Destroy lifecycle method. Fires the destroy\nevent, prior to invoking destructors for the\nclass heirarchy.\n<p>\nSubscribers to the destroy\nevent can preventDefault to prevent destruction\nfrom proceeding.\n<\/p>", "final": "", "guessedname": "destroy", "guessedtype": "function"}, "_getClasses": {"protected": "", "return": {"type": "Array", "description": "array of classes"}, "description": "Returns the top down class heirarchy for this object,\nwith Base being the first class in the array", "guessedname": "_getClasses", "guessedtype": "function"}}, "uses": ["Attribute"], "file": "Base.js", "guessedtype": "function", "shortname": "Base", "properties": {"destroyed": {"type": "Boolean", "description": "Flag indicating whether or not this object\nhas been through the destory lifecycle phase.", "guessedname": "destroyed", "guessedtype": "property"}, "initialized": {"type": "Boolean", "description": "Flag indicating whether or not this object\nhas been through the init lifecycle state.", "guessedname": "initialized", "guessedtype": "property"}, "NAME": {"static": "", "description": "Name string to be used to identify instances of \nthis class, for example in prefixing events.\nClasses extending Base, should define their own\nstatic NAME property.", "guessedname": "NAME", "guessedtype": "property"}, "name": {"type": "String", "description": "The name string to be used to identify \nthis instance of object.", "guessedname": "name", "guessedtype": "property"}}, "description": "Provides a base class for managed attribute based\nobjects, which automates chaining of init and destroy\nlifecycle methods and automatic instantiation of\nregistered Attributes, through the static ATTRS property"}, "DD.DragConstained": {"name": "DD.DragConstained", "constructors": [{"description": "This class extends the dd-drag module to add the constraining methods to it. It supports constraining to a region, node or viewport. It also\nsupports tick based moves and XY axis constraints."}], "namespace": "DD", "module": "dd-constrain", "events": {"constrain2viewChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "constrain2viewChange", "description": "Fires when the value for the configuration attribute 'constrain2view' changes."}, "beforeConstrain2nodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeConstrain2nodeChange", "description": "Fires before the value for the configuration attribute 'constrain2node' changes. Return false to cancel the attribute change."}, "tickXChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "tickXChange", "description": "Fires when the value for the configuration attribute 'tickX' changes."}, "tickXArrayChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "tickXArrayChange", "description": "Fires when the value for the configuration attribute 'tickXArray' changes."}, "gutterChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "gutterChange", "description": "Fires when the value for the configuration attribute 'gutter' changes."}, "constrain2nodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "constrain2nodeChange", "description": "Fires when the value for the configuration attribute 'constrain2node' changes."}, "stickYChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "stickYChange", "description": "Fires when the value for the configuration attribute 'stickY' changes."}, "beforeGutterChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeGutterChange", "description": "Fires before the value for the configuration attribute 'gutter' changes. Return false to cancel the attribute change."}, "tickYArrayChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "tickYArrayChange", "description": "Fires when the value for the configuration attribute 'tickYArray' changes."}, "stickXChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "stickXChange", "description": "Fires when the value for the configuration attribute 'stickX' changes."}, "beforeStickYChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeStickYChange", "description": "Fires before the value for the configuration attribute 'stickY' changes. Return false to cancel the attribute change."}, "tickYChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "tickYChange", "description": "Fires when the value for the configuration attribute 'tickY' changes."}, "beforeTickYArrayChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTickYArrayChange", "description": "Fires before the value for the configuration attribute 'tickYArray' changes. Return false to cancel the attribute change."}, "beforeConstrain2viewChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeConstrain2viewChange", "description": "Fires before the value for the configuration attribute 'constrain2view' changes. Return false to cancel the attribute change."}, "beforeStickXChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeStickXChange", "description": "Fires before the value for the configuration attribute 'stickX' changes. Return false to cancel the attribute change."}, "constrain2regionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "constrain2regionChange", "description": "Fires when the value for the configuration attribute 'constrain2region' changes."}, "beforeTickXArrayChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTickXArrayChange", "description": "Fires before the value for the configuration attribute 'tickXArray' changes. Return false to cancel the attribute change."}, "beforeTickYChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTickYChange", "description": "Fires before the value for the configuration attribute 'tickY' changes. Return false to cancel the attribute change."}, "beforeConstrain2regionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeConstrain2regionChange", "description": "Fires before the value for the configuration attribute 'constrain2region' changes. Return false to cancel the attribute change."}, "beforeTickXChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTickXChange", "description": "Fires before the value for the configuration attribute 'tickX' changes. Return false to cancel the attribute change."}}, "guessedname": "DRAG_NODE", "methods": {"_calcTickArray": {"return": {"type": "", "description": "The tick position"}, "description": "This method is used with the tickXArray and tickYArray config options", "private": "", "params": [{"type": "Number", "name": "pos", "description": " The current X or Y position"}, {"type": "Number", "name": "ticks", "description": " The array containing our custom tick positions."}, {"type": "Number", "name": "off1", "description": " The min offset that we can't pass (region)"}, {"type": "Number", "name": "off2", "description": " The max offset that we can't pass (region)"}], "guessedname": "_calcTickArray", "guessedtype": "function"}, "_checkRegion": {"return": {"type": "Array", "description": "The new XY that is inside the region"}, "description": "", "private": "", "params": [{"type": "Array", "name": "_xy", "description": " The XY to check if it's in the current region, if it isn't inside the region, it will reset the xy array to be inside the region."}], "guessedname": "_checkRegion", "guessedtype": "function"}, "_align": {"return": {"type": "Array", "description": "The modified XY coords."}, "description": "Override of Drag _align to account for region checking and tick checking", "private": "", "params": [{"type": "Array", "name": "xy", "description": " The XY to check for ticks and region"}], "guessedname": "_align", "guessedtype": "function"}, "_checkTicks": {"return": {"type": "Array", "description": "The calced XY coords"}, "description": "This method delegates the proper helper method for tick calculations", "private": "", "params": [{"type": "Array", "name": "xy", "description": " The XY coords for the Drag"}, {"type": "Object", "name": "r", "description": " The optional region that we are bound to."}], "guessedname": "_checkTicks", "guessedtype": "function"}, "_calcTicks": {"return": {"type": "Number", "description": "The new position based on the tick calculation"}, "description": "Helper method to calculate the tick offsets for a given position", "private": "", "params": [{"type": "Number", "name": "pos", "description": " The current X or Y position"}, {"type": "Number", "name": "start", "description": " The start X or Y position"}, {"type": "Number", "name": "tick", "description": " The X or Y tick increment"}, {"type": "Number", "name": "off1", "description": " The min offset that we can't pass (region)"}, {"type": "Number", "name": "off2", "description": " The max offset that we can't pass (region)"}], "guessedname": "_calcTicks", "guessedtype": "function"}, "getRegion": {"return": {"type": "Object", "description": ""}, "params": [{"type": "Boolean", "name": "inc", "description": " Include the node's height and width"}], "description": "Get the active region: viewport, node, custom region", "guessedname": "getRegion", "guessedtype": "function"}, "inRegion": {"return": {"type": "Boolean", "description": "True if the XY is inside the region, false otherwise."}, "params": [{"type": "Array", "name": "xy", "description": " Optional XY to check, if not supplied this.get('dragNode').getXY() is used."}], "description": "Checks if the XY passed or the dragNode is inside the active region.", "guessedname": "inRegion", "guessedtype": "function"}}, "extends": "Drag", "superclass": "Drag", "file": "constrain.js", "guessedtype": "property", "shortname": "DragConstained", "configs": {"tickX": {"type": "Number\/false", "description": "The X tick offset the drag node should snap to on each drag move. False for no ticks. Default: false", "guessedname": "tickX", "guessedtype": "property"}, "tickY": {"type": "Number\/false", "description": "The Y tick offset the drag node should snap to on each drag move. False for no ticks. Default: false", "guessedname": "tickY", "guessedtype": "property"}, "constrain2region": {"type": "Object", "description": "An Object Literal containing a valid region (top, right, bottom, left) of page positions to constrain the drag node to.", "guessedname": "constrain2region", "guessedtype": "property"}, "tickYArray": {"type": "Array", "description": "An array of page coordinates to use as Y ticks for drag movement.", "guessedname": "tickYArray", "guessedtype": "property"}, "constrain2node": {"type": "Object", "description": "Will attempt to constrain the drag node to the bounderies of this node.", "guessedname": "constrain2node", "guessedtype": "property"}, "stickX": {"type": "Boolean", "description": "Stick the drag movement to the X-Axis. Default: false", "guessedname": "stickX", "guessedtype": "property"}, "stickY": {"type": "Boolean", "description": "Stick the drag movement to the Y-Axis", "guessedname": "stickY", "guessedtype": "property"}, "gutter": {"type": "String", "description": "CSS style string for the gutter of a region (supports negative values): '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)", "guessedname": "gutter", "guessedtype": "property"}, "constrain2view": {"type": "Object", "description": "Will attempt to constrain the drag node to the bounderies of the viewport region.", "guessedname": "constrain2view", "guessedtype": "property"}, "tickXArray": {"type": "Array", "description": "An array of page coordinates to use as X ticks for drag movement.", "guessedname": "tickXArray", "guessedtype": "property"}}, "description": "This class extends the dd-drag module to add the constraining methods to it. It supports constraining to a region, node or viewport. It also\nsupports tick based moves and XY axis constraints."}, "DD.Drop": {"name": "DD.Drop", "configs": {"node": {"type": "Node", "description": "Y.Node instanace to use as the element to make a Drop Target", "guessedname": "node", "guessedtype": "property"}, "padding": {"type": "String", "description": "CSS style padding to make the Drop Target bigger than the node.", "guessedname": "padding", "guessedtype": "property"}, "groups": {"type": "Array", "description": "Array of groups to add this drop into.", "guessedname": "groups", "guessedtype": "property"}, "lock": {"type": "Boolean", "description": "Set to lock this drop element.", "guessedname": "lock", "guessedtype": "property"}}, "constructors": [{"description": "This class provides the ability to create a Drop Target."}], "namespace": "DD", "module": "dd-drop", "properties": {"_groups": {"guessedname": "_groups", "type": "Array", "description": "The groups this target belongs to.", "private": "", "guessedtype": "property"}, "_valid": {"guessedname": "_valid", "type": "Boolean", "description": "Flag for determining if the target is valid in this operation.", "private": "", "guessedtype": "property"}, "shim": {"type": "{Object}", "description": "Node reference to the targets shim", "guessedname": "shim", "guessedtype": "property"}, "region": {"type": "Object", "description": "A region object associated with this target, used for checking regions while dragging.", "guessedname": "region", "guessedtype": "property"}, "overTarget": {"type": "Boolean", "description": "This flag is tripped when a drag element is over this target.", "guessedname": "overTarget", "guessedtype": "property"}, "_active": {"guessedname": "_active", "type": "Boolean", "description": "Is the target active and ready to be used..", "private": "", "guessedtype": "property"}}, "guessedname": "NODE", "methods": {"_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_handleOverTarget": {"guessedname": "_handleTargetOver", "params": [{"type": "", "name": "force", "description": " Force a check on initialization"}], "description": "This handles the over target call made from this object or from the DDM", "private": "", "guessedtype": "function"}, "_handleOverEvent": {"description": "Handles the mouseover DOM event on the Target Shim", "private": "", "guessedname": "_handleOverEvent", "guessedtype": "function"}, "sizeShim": {"description": "Positions and sizes the shim with the raw data from the node, this can be used to programatically adjust the Targets shim for Animation..", "guessedname": "sizeShim", "guessedtype": "function"}, "initializer": {"description": "Private lifecycle method", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "_createShim": {"description": "Creates the Target shim and adds it to the DDM's playground..", "private": "", "guessedname": "_createShim", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Simple toString method.", "guessedname": "toString", "guessedtype": "function"}, "inGroup": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "Array", "name": "groups", "description": " The groups to check against"}], "description": "Check if this target is in one of the supplied groups.", "guessedname": "inGroup", "guessedtype": "function"}, "_activateShim": {"description": "Activates the shim and adds some interaction CSS classes", "private": "", "guessedname": "_activateShim", "guessedtype": "function"}, "_deactivateShim": {"description": "Removes classes from the target, resets some flags and sets the shims deactive position [-999, -999]", "private": "", "guessedname": "_deactivateShim", "guessedtype": "function"}, "_handleOut": {"description": "Handles the mouseout DOM event on the Target Shim", "private": "", "guessedname": "_handleOutEvent", "guessedtype": "function"}}, "extends": "base", "superclass": "base", "file": "drop.js", "guessedtype": "property", "shortname": "Drop", "events": {"": {"bubbles": "DD.DDM", "type": "Event.Custom", "description": "drop:over", "guessedname": "EV_DROP_OVER", "guessedtype": "property"}, "paddingChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "paddingChange", "description": "Fires when the value for the configuration attribute 'padding' changes."}, "groupsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "groupsChange", "description": "Fires when the value for the configuration attribute 'groups' changes."}, "beforePaddingChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforePaddingChange", "description": "Fires before the value for the configuration attribute 'padding' changes. Return false to cancel the attribute change."}, "nodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' changes."}, "beforeGroupsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeGroupsChange", "description": "Fires before the value for the configuration attribute 'groups' changes. Return false to cancel the attribute change."}, "beforeNodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeNodeChange", "description": "Fires before the value for the configuration attribute 'node' changes. Return false to cancel the attribute change."}, "lockChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "lockChange", "description": "Fires when the value for the configuration attribute 'lock' changes."}, "beforeLockChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeLockChange", "description": "Fires before the value for the configuration attribute 'lock' changes. Return false to cancel the attribute change."}}, "description": "This class provides the ability to create a Drop Target."}, "Plugin.DragPlugin": {"name": "Plugin.DragPlugin", "constructors": [{"description": "This is a simple Drag plugin that can be attached to a Node via the plug method."}], "namespace": "Plugin", "module": "dd-plugin", "guessedname": "Plugin", "extends": "drag", "superclass": "drag", "file": "dd-plugin.js", "guessedtype": "property", "shortname": "DragPlugin", "properties": {"NS": {"type": "{String}", "description": "The Drag instance will be placed on the Node instance under the dd namespace. It can be accessed via Node.dd;", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"type": "{String}", "description": "dd-plugin", "guessedname": "NAME", "guessedtype": "property"}}, "description": "This is a simple Drag plugin that can be attached to a Node via the plug method."}, "Event.Target": {"description": "Event.Target is designed to be used with Y.augment to wrap \nEvent.Custom in an interface that allows events to be subscribed to \nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all.", "namespace": "", "module": "yui", "guessedname": "EventTarget", "methods": {"getEvent": {"return": {"type": "Event.Target", "description": "the custom event or a falsy value"}, "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}], "description": "Returns the custom event of the provided type has been created, a\nfalsy value otherwise", "guessedname": "getEvent", "guessedtype": "function"}, "removeTarget": {"params": [{"type": "Event.Target", "name": "o", "description": "  the target to remove"}], "description": "Removes a bubble target", "guessedname": "removeTarget", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "the return value from Event.Custom.fire"}, "params": [{"type": "String|Object", "name": "type", "description": "  The type of the event, or an object that contains\na 'type' property."}, {"type": "Object*", "name": "arguments", "description": "  an arbitrary set of parameters to pass to \nthe handler."}], "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters.\nIf the custom event object hasn't been created, then the event hasn't \nbeen published and it has no subscribers.  For performance sake, we \nimmediate exit in this case.  This means the event won't bubble, so \nif the intention is that a bubble target be notified, the event must \nbe published on this object first.", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"params": [{"type": "string", "name": "type", "description": "    The type, or name of the event"}], "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "after": {"params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "", "name": "context", "description": " The execution context"}, {"type": "", "name": "args*", "description": " 1..n params to supply to the callback"}], "description": "Subscribe to a custom event hosted by this object.  The\nsupplied callback will execute after any listeners add\nvia the subscribe method, and after the default function,\nif configured for the event, has executed.", "guessedname": "after", "guessedtype": "function"}, "publish": {"return": {"type": "Event.Custom", "description": "the custom event"}, "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}, {"type": "object", "name": "opts", "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\ncontext: defines the default execution context.  If not defined\nthe default context will be this instance.\n<\/li>\n<li>\nsilent: if true, the custom event will not generate log messages.\nThis is false by default.\n<\/li>\n<li>\nonSubscribeCallback: specifies a callback to execute when the\nevent has a new subscriber.  This will fire immediately for\neach queued subscriber if any exist prior to the creation of\nthe event.\n<\/li>\n<\/ul>"}], "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.", "guessedname": "publish", "guessedtype": "function"}, "subscribe": {"params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "", "name": "context", "description": " The execution context"}, {"type": "", "name": "args*", "description": " 1..n params to supply to the callback"}], "description": "Subscribe to a custom event hosted by this object", "guessedname": "subscribe", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "true if the subscriber was found and detached."}, "params": [{"type": "string|Object", "name": "type", "description": "    Either the handle to the subscriber or the \ntype of event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events."}, {"type": "Function", "name": "fn", "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."}, {"type": "Object", "name": "context", "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes one or more listeners the from the specified event", "guessedname": "unsubscribe", "guessedtype": "function"}, "addTarget": {"params": [{"type": "Event.Target", "name": "o", "description": "  the target to add"}], "description": "Registers another Event.Target as a bubble target.  Bubble order\nis determined by the order registered.  Multiple targets can\nbe specified.", "guessedname": "addTarget", "guessedtype": "function"}, "bubble": {"return": {"type": "boolean", "description": "the aggregated return value from Event.Custom.fire"}, "params": [{"type": "Event.Custom", "name": "evt", "description": "  the custom event to propagate"}], "description": "Propagate an event", "guessedname": "bubble", "guessedtype": "function"}}, "file": "event-target.js", "guessedtype": "function", "shortname": "Event.Target", "name": "Event.Target"}, "DD.Drag": {"name": "DD.Drag", "configs": {"node": {"type": "Node", "description": "Y.Node instanace to use as the element to initiate a drag operation", "guessedname": "node", "guessedtype": "property"}, "activeHandle": {"type": "Node", "description": "This config option is set by Drag to inform you of which handle fired the drag event (in the case that there are several handles): default false.", "guessedname": "activeHandle", "guessedtype": "property"}, "dragNode": {"type": "Node", "description": "Y.Node instanace to use as the draggable element, defaults to node", "guessedname": "dragNode", "guessedtype": "property"}, "move": {"type": "Boolean", "description": "If this is false, the drag element will not move with the cursor: default true. Can be used to \"resize\" the element.", "guessedname": "move", "guessedtype": "property"}, "target": {"type": "Boolean", "description": "This attribute only works if the dd-drop module has been loaded. It will make this node a drop target as well as draggable.", "guessedname": "target", "guessedtype": "property"}, "lock": {"type": "Boolean", "description": "Set to lock this drag element so that it can't be dragged: default false.", "guessedname": "lock", "guessedtype": "property"}, "offsetNode": {"type": "Boolean", "description": "Offset the drag element by the difference in cursor position: default true", "guessedname": "offsetNode", "guessedtype": "property"}, "clickPixelThresh": {"type": "Number", "description": "The number of pixels to move to start a drag operation, default is 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "groups": {"type": "Array", "description": "Array of groups to add this drag into.", "guessedname": "groups", "guessedtype": "property"}, "useShim": {"type": "Boolean", "description": "Use the protective shim on all drag operations: default true. Only works with dd-ddm, not dd-ddm-base.", "guessedname": "useShim", "guessedtype": "property"}, "dragMode": {"type": "Boolean", "description": "This attribute only works if the dd-drop module is active. It will make this node a drop target as well as draggable", "guessedname": "dragMode", "guessedtype": "property"}, "dragging": {"type": "Boolean", "description": "This attribute is not meant to be used by the implementor, it is meant to be used as an Event tracker so you can listen for it to change.", "guessedname": "dragging", "guessedtype": "property"}, "data": {"type": "Mixed", "description": "A payload holder to store arbitrary data about this drag object, can be used to store any value.", "guessedname": "data", "guessedtype": "property"}, "primaryButtonOnly": {"type": "Boolean", "description": "By default a drag operation will only begin if the mousedown occurred with the primary mouse button. Setting this to false will allow for all mousedown events to trigger a drag.", "guessedname": "primaryButtonOnly", "guessedtype": "property"}, "clickTimeThresh": {"type": "Number", "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.", "guessedname": "clickTimeThresh", "guessedtype": "property"}}, "constructors": [{"description": "This class provides the ability to drag a Node."}], "namespace": "DD", "module": "dd-drag", "properties": {"_groups": {"guessedname": "_groups", "type": "{Array}", "description": "Storage Array for the groups this drag belongs to.", "private": "", "guessedtype": "property"}, "_handles": {"guessedname": "_handles", "type": "{Array}", "description": "A private hash of the valid drag handles", "private": "", "guessedtype": "property"}, "_invalids": {"guessedname": "_invalids", "type": "{Array}", "description": "A private hash of the invalid selector strings", "private": "", "guessedtype": "property"}, "_clickTimeout": {"guessedname": "_clickTimeout", "type": "{Boolean}", "description": "Holder for the setTimeout call", "private": "", "guessedtype": "property"}, "_ev_md": {"guessedname": "_ev_md", "type": "{Event}", "description": "A private reference to the mousedown DOM event", "private": "", "guessedtype": "property"}, "target": {"type": "{Object}", "description": "This will be a reference to the Drop instance associated with this drag if the target: true config attribute is set..", "guessedname": "target", "guessedtype": "property"}, "mouseXY": {"type": "{Array}", "description": "The XY coords of the mousemove", "guessedname": "mouseXY", "guessedtype": "property"}, "region": {"type": "Object", "description": "A region object associated with this drag, used for checking regions while dragging.", "guessedname": "region", "guessedtype": "property"}, "_dragThreshMet": {"guessedname": "_dragThreshMet", "type": "{Boolean}", "description": "Private flag to see if the drag threshhold was met", "private": "", "guessedtype": "property"}, "startXY": {"type": "{Array}", "description": "The initial mouse position", "guessedname": "startXY", "guessedtype": "property"}, "nodeXY": {"type": "{Array}", "description": "The initial element position", "guessedname": "nodeXY", "guessedtype": "property"}, "deltaXY": {"type": "{Array}", "description": "The offset of the mouse position to the element's position", "guessedname": "deltaXY", "guessedtype": "property"}, "lastXY": {"type": "{Array}", "description": "The position of the element as it's moving (for offset calculations)", "guessedname": "lastXY", "guessedtype": "property"}, "_fromTimeout": {"guessedname": "_fromTimeout", "type": "{Boolean}", "description": "Flag to determine if the drag operation came from a timeout", "private": "", "guessedtype": "property"}, "_ieSelectBack": {"private": "", "description": "We will hold a copy of the current \"onselectstart\" method on this property, and reset it after we are done using it.", "guessedname": "_ieSelectBack", "guessedtype": "property"}}, "guessedname": "DDM", "methods": {"_move": {"guessedname": "_move", "params": [{"type": "Event", "name": "ev", "description": " The mousemove DOM event"}], "description": "Fired from DragDropMgr (DDM) on mousemove.", "private": "", "guessedtype": "function"}, "removeInvalid": {"return": {"type": "Self", "description": ""}, "params": [{"type": "String", "name": "str", "description": " The invalid handle to remove from the internal list."}], "description": "Remove an invalid handle added by addInvalid", "guessedname": "removeInvalid", "guessedtype": "function"}, "addHandle": {"return": {"type": "Self", "description": ""}, "params": [{"type": "String", "name": "str", "description": " The selector to test for a valid handle. Must be a child of the element."}], "description": "Add a handle to a drag element. Drag only initiates when a mousedown happens on this element.", "guessedname": "addHandle", "guessedtype": "function"}, "initializer": {"description": "Internal init handler", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "removeHandle": {"return": {"type": "Self", "description": ""}, "params": [{"type": "String", "name": "str", "description": " The selector for the handle to be removed."}], "description": "Remove a Selector added by addHandle", "guessedname": "removeHandle", "guessedtype": "function"}, "_handleMouseDownEvent": {"guessedname": "_handleMouseDownEvent", "params": [], "description": "Handler for the mousedown DOM event", "private": "", "guessedtype": "function"}, "end": {"description": "Ends the drag operation", "guessedname": "end", "guessedtype": "function"}, "destructor": {"guessedname": "destructor", "return": {"type": "Self", "description": ""}, "description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners", "private": "", "guessedtype": "function"}, "start": {"description": "Starts the drag operation", "guessedname": "start", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String name for the object"}, "description": "General toString method for logging", "guessedname": "toString", "guessedtype": "function"}, "_ieSelectFix": {"description": "The function we use as the onselectstart handler when we start a drag in Internet Explorer", "private": "", "guessedname": "_ieSelectFix", "guessedtype": "function"}, "_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_handleMouseDown": {"guessedname": "_handleMouseDown", "params": [], "description": "Handler for the mousedown DOM event", "private": "", "guessedtype": "function"}, "_timeoutCheck": {"description": "The method passed to setTimeout to determine if the clickTimeThreshold was met.", "private": "", "guessedname": "_timeoutCheck", "guessedtype": "function"}, "_fixIEMouseDown": {"description": "This method copies the onselectstart listner on the document to the _ieSelectFix property", "private": "", "guessedname": "_fixIEMouseDown", "guessedtype": "function"}, "_fixIEMouseUp": {"description": "This method copies the _ieSelectFix property back to the onselectstart listner on the document.", "private": "", "guessedname": "_fixIEMouseUp", "guessedtype": "function"}, "_setStartPosition": {"guessedname": "_setStartPosition", "params": [{"type": "Array", "name": "xy", "description": " The XY coords to set the position to."}], "description": "Sets the current position of the Element and calculates the offset", "private": "", "guessedtype": "function"}, "addInvalid": {"return": {"type": "Self", "description": ""}, "params": [{"type": "String", "name": "str", "description": " The selector to test against to determine if this is an invalid drag handle."}], "description": "Add a selector string to test the handle against. If the test passes the drag operation will not continue.", "guessedname": "addInvalid", "guessedtype": "function"}, "_handleMouseUp": {"guessedname": "_handleMouseUp", "params": [], "description": "Handler for the mouseup DOM event", "private": "", "guessedtype": "function"}, "_align": {"return": {"type": "", "description": "Array"}, "description": "Calculates the offsets and set's the XY that the element will move to.", "private": "", "params": [{"type": "Array", "name": "xy", "description": " The xy coords to align with."}], "guessedname": "_align", "guessedtype": "function", "type": "{Array}"}, "_handleTarget": {"return": {"type": "Boolean\/Object", "description": ""}, "description": "Attribute handler for the target config attribute.", "private": "", "params": [], "guessedname": "_handleTarget", "guessedtype": "function"}, "validClick": {"return": {"type": "Boolean", "description": ""}, "params": [], "description": "Method first checks to see if we have handles, if so it validates the click against the handle. Then if it finds a valid handle, it checks it against the invalid handles list. Returns true if a good handle was used, false otherwise.", "guessedname": "validClick", "guessedtype": "function"}, "_moveNode": {"guessedname": "_moveNode", "params": [{"type": "Array", "name": "eXY", "description": " The XY to move the element to, usually comes from the mousemove DOM event."}, {"type": "Boolean", "name": "noFire", "description": " If true, the drag:drag event will not fire."}], "description": "This method performs the actual element move.", "private": "", "guessedtype": "function"}}, "extends": "base", "superclass": "base", "file": "drag.js", "guessedtype": "property", "shortname": "Drag", "events": {"": {"description": "drag:mouseDown", "defaultfn": "_handleMouseDown", "guessedname": "EV_MOUSE_DOWN", "guessedtype": "property", "preventable": "", "bubbles": "DD.DDM", "type": "Event.Custom"}, "clickPixelThreshChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "clickPixelThreshChange", "description": "Fires when the value for the configuration attribute 'clickPixelThresh' changes."}, "groupsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "groupsChange", "description": "Fires when the value for the configuration attribute 'groups' changes."}, "offsetNodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "offsetNodeChange", "description": "Fires when the value for the configuration attribute 'offsetNode' changes."}, "draggingChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "draggingChange", "description": "Fires when the value for the configuration attribute 'dragging' changes."}, "dataChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' changes."}, "beforeGroupsChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeGroupsChange", "description": "Fires before the value for the configuration attribute 'groups' changes. Return false to cancel the attribute change."}, "beforeDataChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDataChange", "description": "Fires before the value for the configuration attribute 'data' changes. Return false to cancel the attribute change."}, "beforeClickPixelThreshChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeClickPixelThreshChange", "description": "Fires before the value for the configuration attribute 'clickPixelThresh' changes. Return false to cancel the attribute change."}, "primaryButtonOnlyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "primaryButtonOnlyChange", "description": "Fires when the value for the configuration attribute 'primaryButtonOnly' changes."}, "dragModeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "dragModeChange", "description": "Fires when the value for the configuration attribute 'dragMode' changes."}, "beforeDragModeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDragModeChange", "description": "Fires before the value for the configuration attribute 'dragMode' changes. Return false to cancel the attribute change."}, "useShimChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "useShimChange", "description": "Fires when the value for the configuration attribute 'useShim' changes."}, "clickTimeThreshChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "clickTimeThreshChange", "description": "Fires when the value for the configuration attribute 'clickTimeThresh' changes."}, "beforeOffsetNodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeOffsetNodeChange", "description": "Fires before the value for the configuration attribute 'offsetNode' changes. Return false to cancel the attribute change."}, "lockChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "lockChange", "description": "Fires when the value for the configuration attribute 'lock' changes."}, "targetChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' changes."}, "beforeMoveChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeMoveChange", "description": "Fires before the value for the configuration attribute 'move' changes. Return false to cancel the attribute change."}, "beforeClickTimeThreshChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeClickTimeThreshChange", "description": "Fires before the value for the configuration attribute 'clickTimeThresh' changes. Return false to cancel the attribute change."}, "nodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' changes."}, "dragNodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "dragNodeChange", "description": "Fires when the value for the configuration attribute 'dragNode' changes."}, "beforePrimaryButtonOnlyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforePrimaryButtonOnlyChange", "description": "Fires before the value for the configuration attribute 'primaryButtonOnly' changes. Return false to cancel the attribute change."}, "beforeTargetChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeTargetChange", "description": "Fires before the value for the configuration attribute 'target' changes. Return false to cancel the attribute change."}, "activeHandleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "activeHandleChange", "description": "Fires when the value for the configuration attribute 'activeHandle' changes."}, "beforeActiveHandleChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeActiveHandleChange", "description": "Fires before the value for the configuration attribute 'activeHandle' changes. Return false to cancel the attribute change."}, "beforeDraggingChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDraggingChange", "description": "Fires before the value for the configuration attribute 'dragging' changes. Return false to cancel the attribute change."}, "moveChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the previous attribute value and the new value."}], "name": "moveChange", "description": "Fires when the value for the configuration attribute 'move' changes."}, "beforeDragNodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeDragNodeChange", "description": "Fires before the value for the configuration attribute 'dragNode' changes. Return false to cancel the attribute change."}, "beforeUseShimChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeUseShimChange", "description": "Fires before the value for the configuration attribute 'useShim' changes. Return false to cancel the attribute change."}, "beforeNodeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeNodeChange", "description": "Fires before the value for the configuration attribute 'node' changes. Return false to cancel the attribute change."}, "beforeLockChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "eventInfo", "description": "An object containing the current attribute value and the new value."}], "name": "beforeLockChange", "description": "Fires before the value for the configuration attribute 'lock' changes. Return false to cancel the attribute change."}}, "description": "This class provides the ability to drag a Node."}, "Event.Handle": {"name": "Event.Handle", "constructors": [{"params": [{"type": "Event.Custom", "name": "evt", "description": "  the custom event"}, {"type": "Event.Subscriber", "name": "sub", "description": "  the subscriber"}], "description": "Return value from all subscribe operations"}], "namespace": "", "module": "yui", "guessedname": "EventHandle", "methods": {"detach": {"description": "Detaches this subscriber", "guessedname": "detach", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Event.Handle", "properties": {"evt": {"type": "Event.Custom", "description": "The custom event", "guessedname": "evt", "guessedtype": "property"}, "sub": {"type": "Event.Subscriber", "description": "The subscriber object", "guessedname": "sub", "guessedtype": "property"}}, "description": "Return value from all subscribe operations"}, "object": {"methods": {"keys": {"return": {"type": "string[]", "description": "the keys"}, "params": [{"type": "", "name": "o", "description": " an object"}], "description": "Returns an array containing the object's keys", "guessedname": "keys", "guessedtype": "function"}, "each": {"return": {"type": "YUI", "description": "the YUI instance"}, "params": [{"type": "", "name": "o", "description": " the object to iterate"}, {"type": "function", "name": "f", "description": "  the function to execute"}, {"type": "", "name": "c", "description": " the execution context"}, {"type": "boolean", "name": "proto", "description": "  include proto"}], "description": "Executes a function on each item. The function\nreceives the value, the key, and the object\nas paramters (in that order).", "guessedname": "each", "guessedtype": "function"}, "Object": {"return": {"type": "", "description": "the new object"}, "params": [{"type": "", "name": "The", "description": " supplier object"}], "description": "Returns a new object based upon the supplied object.  By\ndefault the new object's prototype will have all members\non the object.tructor prototype.", "guessedname": "Object", "guessedtype": "function"}, "substitute": {"return": {"type": "String", "description": "the substituted string"}, "params": [{"type": "String", "name": "s", "description": "  The string that will be modified."}, {"type": "Object", "name": "o", "description": "  An object containing the replacement values"}, {"type": "Function", "name": "f", "description": "  An optional function that can be used to\nprocess each match.  It receives the key,\nvalue, and any extra metadata included with\nthe key inside of the braces."}], "description": "Does variable substitution on a string. It scans through the string \nlooking for expressions enclosed in { } braces. If an expression \nis found, it is used a key on the object.  If there is a space in\nthe key, the first word is used for the key and the rest is provided\nto an optional function to be used to programatically determine the\nvalue (the extra information might be used for this decision). If \nthe value for the key in the object, or what is returned from the\nfunction has a string value, number value, or object value, it is \nsubstituted for the bracket expression and it repeats.  If this\nvalue is an object, it uses the Object's toString() if this has\nbeen overridden, otherwise it does a shallow dump of the key\/value\npairs.", "guessedname": "substitute", "guessedtype": "function"}, "owns": {"return": {"type": "", "description": "Boolean"}, "description": "Determines whether or not the property was added\nto the object instance.  Returns false if the property is not present\nin the object, or was inherited from the prototype.\nThis abstraction is provided to basic hasOwnProperty for Safari 1.3.x.\nThis \nThere is a discrepancy between Y.Object.owns and\nObject.prototype.hasOwnProperty when the property is a primitive added to\nboth the instance AND prototype with the same value:\n<pre>\nvar A = function() {};\nA.prototype.foo = 'foo';\nvar a = new A();\na.foo = 'foo';\nalert(a.hasOwnProperty('foo')); \/\/ true\nalert(Y.Object.owns(a, 'foo')); \/\/ false when using fallback\n<\/pre>", "parma": "p {string} the property to look for", "params": [{"type": "any", "name": "o", "description": "  The object being testing"}], "guessedname": "owns", "guessedtype": "property"}}, "description": "Object utils", "namespace": "", "module": "yui", "file": "Object.js", "shortname": "object", "name": "object"}, "Event.Facade": {"file": "event-facade.js", "name": "Event.Facade", "namespace": "", "param": "ev {Event} the DOM event", "methods": {"stopImmediatePropagation": {"description": "Stops the propagation to the next bubble target and\nprevents any additional listeners from being exectued\non the current target.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "stopPropagation": {"description": "Stops the propagation to the next bubble target", "guessedname": "stopPropagation", "guessedtype": "function"}, "preventDefault": {"description": "Prevents the event's default behavior", "guessedname": "preventDefault", "guessedtype": "function"}, "halt": {"params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "guessedname": "halt", "guessedtype": "function"}}, "module": "yui", "guessedname": "Facade", "guessedtype": "function", "shortname": "Event.Facade", "properties": {"pageX": {"type": "int", "description": "The X location of the event on the page (including scroll)", "guessedname": "pageX", "guessedtype": "property"}, "relatedTarget": {"type": "Node", "propery": "relatedTarget", "description": "Node reference to the relatedTarget", "guessedname": "relatedTarget", "guessedtype": "property"}, "time": {"type": "Date", "description": "Timestamp for the event", "guessedname": "time", "guessedtype": "property"}, "details": {"type": "Array", "description": "The event details.  Currently supported for Custom\nEvents only, where it contains the arguments that\nwere passed to fire().", "guessedname": "details", "guessedtype": "property"}, "which": {"type": "int", "description": "The button that was pushed.  Same as button.", "guessedname": "which", "guessedtype": "property"}, "pageY": {"type": "int", "description": "The Y location of the event on the page (including scroll)", "guessedname": "pageY", "guessedtype": "property"}, "originalTarget": {"type": "Node", "propery": "originalTarget", "description": "Node reference for the element that the listener was attached to.", "guessedname": "originalTarget", "guessedtype": "property"}, "charCode": {"type": "int", "description": "The charCode for key events.  Same as keyCode", "guessedname": "charCode", "guessedtype": "property"}, "keyCode": {"type": "int", "description": "The keyCode for key events.  Uses charCode if keyCode is not available", "guessedname": "c", "guessedtype": "property"}, "target": {"type": "Node", "propery": "target", "description": "Node reference for the targeted element", "guessedname": "target", "guessedtype": "property"}}, "description": "Wraps a DOM event, properties requiring browser abstraction are\nfixed here.  Provids a security layer when required."}, "Event.Custom": {"name": "Event.Custom", "constructors": [{"params": [{"type": "String", "name": "type", "description": " The type of event, which is passed to the callback\nwhen the event fires"}, {"type": "Object", "name": "context", "description": " The context the event will fire from.  \"this\" will\nrefer to this object in the callback.  Default value: \nthe window object.  The listener can override this."}, {"type": "boolean", "name": "silent", "description": " pass true to prevent the event from writing to\nthe debug system"}], "description": "The Event.Custom class lets you define events for your application\nthat can be subscribed to by one or more independent component."}], "namespace": "", "module": "yui", "events": {"": {"type": "Y.Event.Custom", "params": [{"type": "Function", "name": "fn", "description": " The function to execute"}, {"type": "Object", "name": "obj", "description": " An object to be passed along when the event \nfires"}, {"type": "boolean|Object", "name": "override", "description": " If true, the obj passed in becomes \nthe execution context of the listener.\nif an object, that object becomes the\nthe execution context."}], "description": "Custom events provide a custom event that fires whenever there is\na new subscriber to the event.  This provides an opportunity to\nhandle the case where there is a non-repeating event that has\nalready fired has a new subscriber.", "guessedname": "subscribeEvent", "guessedtype": "property"}}, "guessedname": "CustomEvent", "methods": {"after": {"return": {"type": "Event.Handle", "description": "unsubscribe handle"}, "params": [{"type": "Function", "name": "fn", "description": "        The function to execute"}, {"type": "Object", "name": "obj", "description": "       An object to be passed along when the event fires"}, {"type": "", "name": "args*", "description": " 1..n params to provide to the listener"}], "description": "Listen for this event after the normal subscribers have been notified and\nthe default behavior has been applied.  If a normal subscriber prevents the \ndefault behavior, it also prevents after listeners from firing.", "guessedname": "after", "guessedtype": "function"}, "log": {"params": [{"type": "string", "name": "msg", "description": "  message to log"}, {"type": "string", "name": "cat", "description": "  log category"}], "description": "Logger abstraction to centralize the application of the silent flag", "guessedname": "log", "guessedtype": "function"}, "_delete": {"params": [{"type": "", "name": "subscriber", "description": " object"}], "private": "", "guessedname": "_delete", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "false if one of the subscribers returned false, \ntrue otherwise"}, "params": [{"type": "Object*", "name": "arguments", "description": " an arbitrary set of parameters to pass to \nthe handler."}], "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The type of event<\/li>\n<li>All of the arguments fire() was executed with as an array<\/li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod<\/li>\n<\/ul>", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"return": {"type": "int", "description": "The number of listeners unsubscribed"}, "description": "Removes all listeners", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "_notify": {"guessedname": "_notify", "params": [{"type": "Event.Subscriber", "name": "s", "description": "  the subscriber"}, {"type": "Array", "name": "args", "description": "  the arguments array to apply to the listener"}], "description": "Notify a single subscriber", "private": "", "guessedtype": "function"}, "applyConfig": {"params": [{"type": "", "name": "o", "description": " hash of properties to apply"}, {"type": "boolean", "name": "force", "description": "  if true, properties that exist on the event \nwill be overwritten."}], "description": "Apply configuration properties", "guessedname": "applyConfig", "guessedtype": "function"}, "subscribe": {"return": {"type": "Event.Handle", "description": "unsubscribe handle"}, "params": [{"type": "Function", "name": "fn", "description": "        The function to execute"}, {"type": "Object", "name": "obj", "description": "       An object to be passed along when the event fires"}, {"type": "", "name": "args*", "description": " 1..n params to provide to the listener"}], "description": "Listen for this event", "guessedname": "subscribe", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "True if the subscriber was found and detached."}, "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed"}, {"type": "Object", "name": "obj", "description": "  The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes subscribers.", "guessedname": "unsubscribe", "guessedtype": "function"}, "stopImmediatePropagation": {"description": "Stops propagation to bubble targets, and prevents any remaining\nsubscribers on the current target from executing.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}, "stopPropagation": {"description": "Stop propagation to bubble targets", "guessedname": "stopPropagation", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Event.Custom", "properties": {"fired": {"default": "false;", "type": "boolean", "description": "This event has fired if true", "guessedname": "fired", "guessedtype": "property"}, "defaultFn": {"type": "Function", "description": "The default function to execute after event listeners\nhave fire, but only if the default action was not\nprevented.", "guessedname": "defaultFn", "guessedtype": "property"}, "fireOnce": {"default": "false;", "type": "boolean", "description": "This event should only fire one time if true, and if\nit has fired, any new subscribers should be notified\nimmediately.", "guessedname": "fireOnce", "guessedtype": "property"}, "prevented": {"type": "int", "description": "Flag for preventDefault that is modified during fire().\nif it is not 0, the default behavior for this event", "guessedname": "prevented", "guessedtype": "property"}, "preventedFn": {"type": "Function", "description": "The function to execute if a subscriber calls\npreventDefault", "guessedname": "preventedFn", "guessedtype": "property"}, "subscribers": {"type": "Event.Subscriber{}", "description": "The subscribers to this event", "guessedname": "subscribers", "guessedtype": "property"}, "host": {"type": "Event.Target", "description": "Specifies the host for this custom event.  This is used\nto enable event bubbling", "guessedname": "host", "guessedtype": "property"}, "stopped": {"type": "int", "description": "Flag for stopPropagation that is modified during fire()\n1 means to stop propagation to bubble targets.  2 means\nto also stop additional subscribers on this target.", "guessedname": "stopped", "guessedtype": "property"}, "silent": {"type": "boolean", "description": "By default all custom events are logged in the debug build, set silent\nto true to disable debug outpu for this event.", "guessedname": "silent", "guessedtype": "property"}, "context": {"type": "object", "description": "The context the the event will fire from by default.  Defaults to the YUI\ninstance.", "guessedname": "context", "guessedtype": "property"}, "preventable": {"default": "true", "type": "boolean", "description": "Specifies whether or not this event's default function\ncan be canceled by a subscriber by executing preventDefault() \non the event facade", "guessedname": "preventable", "guessedtype": "property"}, "stoppedFn": {"type": "Function", "description": "The function to execute if a subscriber calls\nstopPropagation or stopImmediatePropagation", "guessedname": "stoppedFn", "guessedtype": "property"}, "type": {"type": "string", "description": "The type of event, returned to subscribers when the event fires", "guessedname": "type", "guessedtype": "property"}, "bubbles": {"default": "true", "type": "boolean", "description": "Specifies whether or not a subscriber can stop the event propagation\nvia stopPropagation(), stopImmediatePropagation(), or halt()", "guessedname": "bubbles", "guessedtype": "property"}, "afters": {"type": "Event.Subscriber{}", "description": "'After' subscribers", "guessedname": "afters", "guessedtype": "property"}}, "description": "The Event.Custom class lets you define events for your application\nthat can be subscribed to by one or more independent component."}, "lang": {"description": "Provides the language utilites and extensions used by the library", "namespace": "", "module": "yui", "guessedname": "Lang", "methods": {"isArray": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is an array.\nTesting typeof\/instanceof\/constructor of arrays across frame \nboundaries isn't possible in Safari unless you have a reference\nto the other frame to test against its Array prototype.  To\nhandle this case, we test well-known array properties instead.\nproperties.", "guessedname": "isArray", "guessedtype": "function"}, "trim": {"return": {"type": "string", "description": "the trimmed string"}, "params": [{"type": "string", "name": "s", "description": "  the string to trim"}], "description": "Returns a string without any leading or trailing whitespace.  If \nthe input is not a string, the input will be returned untouched.", "guessedname": "trim", "guessedtype": "function"}, "isString": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a string", "guessedname": "isString", "guessedtype": "function"}, "isBoolean": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a boolean", "guessedname": "isBoolean", "guessedtype": "function"}, "later": {"return": {"type": "", "description": "a timer object. Call the cancel() method on this object to \nstop the timer."}, "params": [{"type": "int", "name": "when", "description": "  the number of milliseconds to wait until the fn \nis executed"}, {"type": "", "name": "o", "description": " the context object"}, {"type": "Function|String", "name": "fn", "description": "  the function to execute or the name of \nthe method in the 'o' object to execute"}, {"type": "", "name": "data", "description": " [Array] data that is provided to the function.  This accepts\neither a single item or an array.  If an array is provided, the\nfunction is executed with one parameter for each array item.  If\nyou need to pass a single array parameter, it needs to be wrapped in\nan array [myarray]"}, {"type": "boolean", "name": "periodic", "description": "  if true, executes continuously at supplied \ninterval until canceled"}], "description": "Executes the supplied function in the context of the supplied \nobject 'when' milliseconds later.  Executes the function a \nsingle time unless periodic is set to true.", "guessedname": "later", "guessedtype": "function"}, "isNull": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is null", "guessedname": "isNull", "guessedtype": "function"}, "isValue": {"return": {"type": "boolean", "description": "true if it is not null\/undefined\/NaN || false"}, "params": [{"type": "any", "name": "o", "description": "  the item to test"}], "description": "A convenience method for detecting a legitimate non-null value.\nReturns false for null\/undefined\/NaN, true for other values, \nincluding 0\/false\/''", "guessedname": "isValue", "guessedtype": "function"}, "isFunction": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a function", "guessedname": "isFunction", "guessedtype": "function"}, "isNumber": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a legal number", "guessedname": "isNumber", "guessedtype": "function"}, "isObject": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}, {"type": "boolean", "name": "failfn", "description": "  fail if the input is a function"}], "description": "Determines whether or not the provided object is of type object\nor function", "guessedname": "isObject", "guessedtype": "function"}, "isUndefined": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is undefined", "guessedname": "isUndefined", "guessedtype": "function"}}, "file": "Lang.js", "guessedtype": "property", "shortname": "lang", "name": "lang"}, "Attribute": {"name": "Attribute", "namespace": "", "module": "attribute", "methods": {"set": {"params": [{"type": "String", "name": "name", "description": " The name of the attribute"}, {"type": "Any", "name": "value", "description": " The value to apply to the attribute"}, {"type": "Object", "name": "Event", "description": " options. This object will be mixed into\nthe event facade passed as the first argument to subscribers \nto attribute change events"}], "description": "Sets the value of an attribute.", "guessedname": "set", "guessedtype": "function"}, "_defAttrSet": {"guessedname": "_defAttrSet", "params": [{"type": "EventFacade", "name": "CustomEvent", "description": " Facade"}], "description": "Default handler implementation for set events", "private": "", "guessedtype": "function"}, "get": {"params": [{"type": "String", "name": "key", "description": " The attribute whose value will be returned."}], "description": "Returns the current value of the attribute. If the attribute\nhas been configured with a 'get' handler, this method will delegate\nto the 'get' handler to obtain the value of the attribute.\nThe 'get' handler will be passed the current value of the attribute \nas the only argument.", "guessedname": "get", "guessedtype": "function"}, "setAtts": {"params": [{"type": "Object", "name": "atts", "description": "  A hash of attributes: name\/value pairs"}], "description": "Sets multiple attribute values.", "guessedname": "setAtts", "guessedtype": "function"}, "remove": {"params": [{"type": "String", "name": "name", "description": " The attribute key"}], "description": "Removes an attribute.", "guessedname": "remove", "guessedtype": "function"}, "_setSubValue": {"return": {"type": "Object", "description": "The modified object, with the new sub value set, or \nundefined, if the path was invalid."}, "description": "Sets the sub value at the provided path on the value object.\nReturns the modified value object, or undefined if the path is invalid.", "private": "", "params": [{"type": "Array", "name": "path", "description": "  A path array, specifying the object traversal path\nat which to set the sub value."}, {"type": "Object", "name": "val", "description": "  The object on which to set the sub value."}, {"type": "Any", "name": "subval", "description": "  The sub value to set."}], "guessedname": "_setSubValue", "guessedtype": "function"}, "_initAttValue": {"guessedname": "_initAttValue", "params": [{"type": "String", "name": "att", "description": " Attribute name"}, {"type": "Object", "name": "cfg", "description": " Default attribute configuration\nobject literal"}, {"type": "Object", "name": "Initial", "description": " attribute values."}], "description": "Set the initial value of the given attribute from\neither the default configuration provided, or the \nover-ridden value if it exists in the initValues \nhash provided.", "private": "", "guessedtype": "function"}, "add": {"params": [{"type": "String", "name": "name", "description": " The attribute key"}, {"type": "Object", "name": "hash", "description": " (optional) An object literal specifying the configuration for the attribute."}], "description": "Adds an attribute.\n<p>\nThe hash argument object literal supports the following optional properties:\n<\/p>\n<dl>\n<dt>value {Any}<\/dt>\n<dd>The initial value to set on the attribute<\/dd>\n<dt>readonly {Boolean}<\/dt>\n<dd>Whether or not the attribute is read only. Attributes having readonly set to true\ncannot be set by invoking the set method<\/dd>\n<dt>set {Function}<\/dt>\n<dd>The setter function to be invoked (within the context of the host object) before \nthe attribute is stored by a call to the set method. The value returned by the \nset function will be the finally stored value.<\/dd>\n<dt>get {Function}<\/dt>\n<dd>The getter function to be invoked (within the context of the host object) before\nthe stored values is returned to a user invoking the get method for the attribute.\nThe value returned by the get function is the final value which will be returned to the \nuser when they invoke get.<\/dd>\n<dt>validator {Function}<\/dt>\n<dd>The validator function which is invoked prior to setting the stored value. Returning\nfalse from the validator function will prevent the value from being stored<\/dd>\n<dt>clone {Number}<\/dt>\n<dd>If and how the value returned by a call to the get method, should be de-referenced from\nthe stored value. By default values are not cloned, and hence a call to get will return\na reference to the stored value. See Attribute.CLONE for more details about the clone \noptions available<\/dd>\n<\/dl>", "guessedname": "addAtt", "guessedtype": "function"}, "getAtts": {"return": {"type": "Object", "description": "A hash of attributes: name\/values pairs"}, "description": "Gets multiple attribute values.", "guessedname": "getAtts", "guessedtype": "function"}, "_initAtts": {"protected": "", "params": [{"type": "Object", "name": "cfg", "description": " Attribute configuration object literal"}, {"type": "Object", "name": "initValues", "description": " Name\/Value hash of initial values to apply"}], "description": "Configures attributes, and sets initial values", "guessedname": "_initAtts", "guessedtype": "function"}, "_splitAttrValues": {"private": "", "description": "Utility to split out regular attribute values\nfrom complex attribute values", "guessedname": "_splitAttVals", "guessedtype": "function"}, "_clone": {"see": "Attribute.CLONE", "params": [{"type": "Object", "name": "val", "description": ""}, {"type": "Object", "name": "type", "description": ""}], "description": "Clone utility method, which will \nclone the provided value using YUI's \nmerge, or clone utilities based\non the clone type provided.", "private": ""}, "_getSubValue": {"return": {"type": "Any", "description": "The value stored in the path or undefined if not found."}, "description": "Retrieves the sub value at the provided path,\nfrom the value object provided.", "private": "", "params": [{"type": "Array", "name": "path", "description": "  A path array, specifying the object traversal path\nfrom which to obtain the sub value."}, {"type": "Object", "name": "val", "description": "  The object from which to extract the property value"}], "guessedname": "_getSubValue", "guessedtype": "function"}}, "uses": ["EventTarget"], "file": "Attribute.js", "shortname": "Attribute", "properties": {"Attribute.CLONE": {"type": "{Object}\n<p>\nConstants for clone formats supported by Attribute\n<\/p>\n<p>\nBy default attribute values returned by the get method\nare not cloned. However setting the attribute's \"clone\"\nproperty to:\n<\/p>\n<dl>\n<dt>Attribute.CLONE.DEEP<\/dt>\n<dd>Will result in a deep cloned value being returned\n(using Y.clone). This can be expensive for complex\nobjects.\n<\/dd>\n<dt>Attribute.CLONE.SHALLOW<\/dt>\n<dd>Will result in a shallow cloned value being returned\n(using Y.merge).\n<\/dd>\n<dt>Attribute.CLONE.IMMUTABLE<\/dt>\n<dd>Will result in a deep cloned value being returned\nwhen using the get method. Additionally users will\nnot be able to set sub values of the attribute \nusing the complex attribute notation (obj.set(\"x.y.z, 5)).\nHowever the value of the attribute can be changed, making\nit different from a READONLY attribute.\n<\/dd>\n<dt>Attribute.CLONE.NONE<\/dt>\n<dd>\nThe value will not be cloned, resulting in a reference\nto the stored value being passed back, if the value is an object.\nThis is the default behavior.\n<\/dd>\n<\/dl>", "static": "", "final": "", "guessedname": "CLONE", "guessedtype": "property"}}, "description": "Attribute provides managed attribute support. \n<p>\nThe class is designed to be augmented onto a host class, \nand allows the host to support get\/set methods for attributes,\ninitial configuration support and attribute change events.\n<\/p>\n<p>Attributes added to the host can:<\/p>\n<ul>\n<li>Be defined as read-only.<\/li>\n<li>Be defined with a set function, which can be used to manipulate\nvalues passed to Attribute's set method, before they are stored.<\/li>\n<li>Be defined with a validator function, to validate values before they are stored.<\/li>\n<li>Be defined with a get function, which can be used to manipulate stored values,\nbefore they are returned by Attribute's get method.<\/li>\n<li>Specify if and how they should be cloned on 'get' (see Attribute.CLONE for supported clone modes).<\/li>\n<\/ul>"}, "Event.Subscriber": {"name": "Event.Subscriber", "constructors": [{"params": [{"type": "Function", "name": "fn", "description": "       The wrapped function to execute"}, {"type": "Object", "name": "obj", "description": "      An object to be passed along when the event fires"}, {"type": "Array", "name": "args", "description": "        subscribe() additional arguments"}], "description": "Stores the subscriber information to be used when the event fires."}], "namespace": "", "module": "yui", "guessedname": "Subscriber", "methods": {"contains": {"return": {"type": "boolean", "description": "true if the supplied arguments match this \nsubscriber's signature."}, "params": [{"type": "Function", "name": "fn", "description": " the function to execute"}, {"type": "Object", "name": "obj", "description": " an object to be passed along when the event fires"}], "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.", "guessedname": "contains", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}, "notify": {"params": [{"type": "", "name": "defaultContext", "description": " The execution context if not overridden\nby the subscriber"}, {"type": "Array", "name": "args", "description": "  Arguments array for the subscriber"}], "description": "Executes the subscriber.", "guessedname": "notify", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Event.Subscriber", "properties": {"wrappedFn": {"type": "Function", "description": "}\nfn bound to obj with additional arguments applied via Y.bind", "guessedname": "wrappedFn", "guessedtype": "property"}, "args": {"type": "Array", "description": "Optional additional arguments supplied to subscribe().  If present,\nthese will be appended to the arguments supplied to fire()"}, "obj": {"type": "Object", "description": "An optional custom object that will passed to the callback when\nthe event fires", "guessedname": "obj", "guessedtype": "property"}, "id": {"type": "String", "description": "Unique subscriber id", "guessedname": "id", "guessedtype": "property"}, "fn": {"type": "Function", "description": "The callback that will be execute when the event fires\nThis is wrapped by Y.bind if obj was supplied.", "guessedname": "fn", "guessedtype": "property"}}, "description": "Stores the subscriber information to be used when the event fires."}, "Y.Easing": {"name": "Y.Easing", "namespace": "Y", "module": "animation", "guessedname": "Easing", "methods": {"easeIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end. (quadratic)", "guessedname": "easeIn", "guessedtype": "function"}, "easeInStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end. (quartic)", "guessedname": "easeInStrong", "guessedtype": "function"}, "bounceBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off start and end.", "guessedname": "bounceBoth", "guessedtype": "function"}, "backOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Overshoots end, then reverses and comes back to end.", "guessedname": "backOut", "guessedtype": "function"}, "elasticBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap both elastic effect.", "guessedname": "elasticBoth", "guessedtype": "function"}, "elasticOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap out elastic effect.", "guessedname": "elasticOut", "guessedtype": "function"}, "bounceOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off end.", "guessedname": "bounceOut", "guessedtype": "function"}, "backBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction, overshoots end, \nthen reverses and comes back to end.", "guessedname": "backBoth", "guessedtype": "function"}, "easeBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end. (quadratic)", "guessedname": "easeBoth", "guessedtype": "function"}, "bounceIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounce off of start.", "guessedname": "bounceIn", "guessedtype": "function"}, "easeOutStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.  (quartic)", "guessedname": "easeOutStrong", "guessedtype": "function"}, "easeNone": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Uniform speed between points.", "guessedname": "easeNone", "guessedtype": "function"}, "elasticIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap in elastic effect.", "guessedname": "elasticIn", "guessedtype": "function"}, "easeBothStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end. (quartic)", "guessedname": "easeBothStrong", "guessedtype": "function"}, "easeOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.  (quadratic)", "guessedname": "easeOut", "guessedtype": "function"}, "backIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction and moves to end.", "guessedname": "backIn", "guessedtype": "function"}}, "file": "Easing.js", "guessedtype": "property", "shortname": "Easing", "description": "Singleton that determines how an animation proceeds from start to end."}, "ua": {"description": "Browser\/platform detection", "namespace": "", "module": "yui", "guessedname": "UA", "file": "UA.js", "guessedtype": "function", "shortname": "ua", "properties": {"opera": {"type": "float", "description": "Opera version number or 0.  Example: 9.2", "guessedname": "opera", "guessedtype": "property"}, "gecko": {"type": "float", "description": "Gecko engine revision number.  Will evaluate to 1 if Gecko \nis detected but the revision could not be found. Other browsers\nwill be 0.  Example: 1.8\n<pre>\nFirefox 1.0.0.4: 1.7.8   <-- Reports 1.7\nFirefox 1.5.0.9: 1.8.0.9 <-- Reports 1.8\nFirefox 2.0.0.3: 1.8.1.3 <-- Reports 1.8\nFirefox 3 alpha: 1.9a4   <-- Reports 1.9\n<\/pre>", "guessedname": "gecko", "guessedtype": "property"}, "ie": {"type": "float", "description": "Internet Explorer version number or 0.  Example: 6", "guessedname": "ie", "guessedtype": "property"}, "webkit": {"type": "float", "description": "AppleWebKit version.  KHTML browsers that are not WebKit browsers \nwill evaluate to 1, other browsers 0.  Example: 418.9.1\n<pre>\nSafari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the \nlatest available for Mac OSX 10.3.\nSafari 2.0.2:         416     <-- hasOwnProperty introduced\nSafari 2.0.4:         418     <-- preventDefault fixed\nSafari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run\ndifferent versions of webkit\nSafari 2.0.4 (419.3): 419     <-- Tiger installations that have been\nupdated, but not updated\nto the latest patch.\nWebkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native SVG\nand many major issues fixed).\nSafari 3.0.4 (523.12) 523.12  <-- First Tiger release - automatic update\nfrom 2.x via the 10.4.11 OS patch\n<\/pre>\nhttp:\/\/developer.apple.com\/internet\/safari\/uamatrix.html", "guessedname": "webkit", "guessedtype": "property"}, "mobile": {"type": "string", "description": "The mobile property will be set to a string containing any relevant\nuser agent information when a modern mobile browser is detected.\nCurrently limited to Safari on the iPhone\/iPod Touch, Nokia N-series\ndevices with the WebKit-based browser, and Opera Mini.", "guessedname": "mobile", "guessedtype": "property"}}, "name": "ua"}, "Event": {"name": "Event", "namespace": "", "module": "yui", "guessedname": "Event", "methods": {"onDOMReady": {"description": "Executes the supplied callback when the DOM is first usable.  This\nwill execute immediately if called after the DOMReady event has\nfired.   @todo the DOMContentReady event does not fire when the\nscript is dynamically injected into the page.  This means the\nDOMReady custom event will never fire in FireFox or Opera when the\nlibrary is injected.  It _will_ fire in Safari, and the IE \nimplementation would allow for us to fire it if the defered script\nis not available.  We want this to behave the same in all browsers.\nIs there a way to identify when the script has been injected \ninstead of included inline?  Is there a way to know whether the \nwindow onload event has fired without having had a listener attached \nto it when it did so?\n<p>The callback is a Event.Custom, so the signature is:<\/p>\n<p>type &lt;string&gt;, args &lt;array&gt;, customobject &lt;object&gt;<\/p>\n<p>For DOMReady events, there are no fire argments, so the\nsignature is:<\/p>\n<p>\"DOMReady\", [], obj<\/p>", "static": "", "guessedname": "onDOMReady", "guessedtype": "function", "params": [{"type": "function", "name": "fn", "description": " what to execute when the element is found."}], "optional": "context execution context"}, "nativeRemove": {"description": "Basic remove listener", "private": "", "static": "", "guessedname": "nativeRemove", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "addListener": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Appends an event handler", "static": "", "guessedname": "addListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to assign the \nlistener to."}, {"type": "String", "name": "type", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "override", "description": "  If true, the obj passed in becomes\nthe execution context of the listener. If an\nobject, this object becomes the execution\ncontext."}]}, "getListeners": {"return": {"type": "Y.Custom.Event", "description": "the custom event wrapper for the DOM event(s)"}, "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.", "static": "", "guessedname": "getListeners", "guessedtype": "function", "params": [{"type": "HTMLElement|string", "name": "el", "description": "  the element or element id to inspect"}, {"type": "string", "name": "type", "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"}]}, "getEvent": {"return": {"type": "Event", "description": "the event"}, "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.", "static": "", "guessedname": "getEvent", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event parameter from the handler"}, {"type": "HTMLElement", "name": "boundEl", "description": " the element the listener is attached to"}]}, "resolve": {"private": "", "description": "Returns a wrapped node.  Intended to be used on event targets,\nso it will return the node's parent if the target is a text\nnode", "guessedname": "resolve", "guessedtype": "function"}, "purgeElement": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to purge"}, {"type": "boolean", "name": "recurse", "description": " recursively purge this element's children\nas well.  Use with caution."}, {"type": "string", "name": "type", "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"}], "description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.", "guessedname": "purgeElement", "guessedtype": "function"}, "_unload": {"guessedname": "_unload", "static": "", "description": "Removes all listeners registered by pe.event.  Called \nautomatically during the unload event.", "private": "", "guessedtype": "function"}, "_tryPreloadAttach": {"guessedname": "_tryPreloadAttach", "static": "", "description": "Polling function that runs before the onload event fires, \nattempting to attach to DOM Nodes as soon as they are \navailable", "private": "", "guessedtype": "function"}, "generateId": {"return": {"type": "string", "description": "the resulting id of the element"}, "description": "Generates an unique ID for the element if it does not already \nhave one.", "static": "", "guessedname": "generateId", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element to create the id for"}]}, "_isValidCollection": {"return": {"type": "boolean", "description": "true if the object is array-like and populated"}, "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different \nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also \nfail if the object is an array, but is empty.", "private": "", "static": "", "guessedname": "_isValidCollection", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to test"}]}, "onContentReady": {"static": "", "params": [{"type": "string", "name": "id", "description": " the id of the element to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is ready."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, fn will execute\nin the context of p_obj.  If an object, fn will\nexectute in the context of that object"}], "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>"}, "startInterval": {"static": "", "private": "", "guessedname": "startInterval", "guessedtype": "function"}, "nativeAdd": {"description": "Adds a DOM event directly without the caching, cleanup, context adj, etc", "private": "", "static": "", "guessedname": "nativeAdd", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "_load": {"guessedname": "_load", "static": "", "description": "hook up any deferred listeners", "private": "", "guessedtype": "function"}, "onAvailable": {"static": "", "params": [{"type": "string||string[]", "name": "id", "description": " the id of the element, or an array\nof ids to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, fn will execute\nin the context of p_obj, if set to an object it\nwill execute in the context of that object"}, {"type": "boolean", "name": "checkContent", "description": "  check child node readiness (onContentReady)"}], "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>"}, "wrapNode": {"private": "", "description": "Wraps an element in a Node facade", "guessedname": "wrapNode", "guessedtype": "function"}, "on": {"see": "addListener", "static": "", "description": "Y.Event.on is an alias for addListener", "guessedname": "attach", "guessedtype": "function"}, "removeListener": {"return": {"type": "boolean", "description": "true if the unbind was successful, false *  otherwise."}, "description": "Removes an event listener", "static": "", "guessedname": "removeListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to remove\nthe listener from."}, {"type": "String", "name": "type", "description": " the type of event to remove."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are *  removed."}]}}, "static": "", "file": "event-dom.js", "guessedtype": "function", "shortname": "Event", "properties": {"DOMReady": {"type": "boolean", "static": "", "description": "True when the document is initially usable", "guessedname": "DOMReady", "guessedtype": "property"}, "_retryCount": {"guessedname": "_retryCount", "static": "", "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load.", "private": "", "guessedtype": "property"}, "POLL_RETRYS": {"description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 2000@amp;20 ms, so it will poll\nfor 40 seconds or until all outstanding handlers are bound\n(whichever comes first).", "static": "", "guessedname": "POLL_RETRYS", "guessedtype": "property", "type": "int", "final": ""}, "_dri": {"guessedname": "_dri", "static": "", "description": "document readystate poll handle", "private": "", "guessedtype": "property"}, "_wrappers": {"description": "Custom event wrappers for DOM events.  Key is \n'event:' + Element uid stamp + event type", "private": "", "static": "", "guessedname": "_wrappers", "guessedtype": "property", "type": "Y.Event.Custom"}, "POLL_INTERVAL": {"description": "The poll interval in milliseconds", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "int", "final": ""}, "webkitKeymap": {"private": "", "description": "webkit key remapping required for Safari < 3.1", "guessedname": "webkitKeymap", "guessedtype": "property"}, "_interval": {"guessedname": "_interval", "static": "", "description": "poll handle", "private": "", "guessedtype": "property"}, "_el_events": {"guessedname": "_el_events", "static": "", "description": "Custom event wrapper map DOM events.  Key is \nElement uid stamp.  Each item is a hash of custom event\nwrappers as provided in the _wrappers collection.  This\nprovides the infrastructure for getListeners.", "private": "", "guessedtype": "property"}, "lastError": {"type": "Error", "static": "", "description": "addListener\/removeListener can throw errors in unexpected scenarios.\nThese errors are suppressed, the method returns false, and this property\nis set", "guessedname": "lastError", "guessedtype": "property"}, "loadComplete": {"description": "True after the onload event has fired", "private": "", "static": "", "guessedname": "loadComplete", "guessedtype": "property", "type": "boolean"}, "_avail": {"guessedname": "_avail", "static": "", "description": "onAvailable listeners", "private": "", "guessedtype": "property"}}, "description": "The event utility provides functions to add and remove event listeners,\nevent cleansing.  It also tries to automatically remove listeners it\nregisters during the unload event."}}, "version": "3.00PR1", "modules": {"node": {"classlist": ["Node", "NodeList"], "name": "node", "filelist": ["Node.js", "NodeClassName.js"], "description": "DOM Abstractions."}, "yui": {"name": "yui", "classlist": ["array", "Event.Handle", "Event.Custom", "Event.Subscriber", "Event", "Event.Facade", "Event.Target", "Get", "lang", "object", "ua", "YUI"], "filelist": ["Array.js", "Compat.js", "Core.js", "Do.js", "Dump.js", "event-custom.js", "event-dom.js", "event-facade.js", "event-ready.js", "event-target.js", "Get.js", "Init.js", "Lang.js", "Later.js", "Object.js", "Substitute.js", "UA.js", "YUI.js"], "guessedname": "YUI", "guessedtype": "property", "description": "YUI core"}, "dd-ddm-drop": {"classlist": ["DD.DDM"], "name": "dd-ddm-drop", "filelist": ["ddm-drop.js"], "description": "Extends the dd-ddm Class to add support for the placement of Drop Target shims inside the viewport shim. It also handles all Drop Target related events and interactions."}, "dd-constrain": {"classlist": ["DD.DragConstained"], "name": "dd-constrain", "filelist": ["constrain.js"], "description": "This class extends the dd-drag module to add the constraining methods to it. It supports constraining to a region, node or viewport. It also\nsupports tick based moves and XY axis constraints."}, "dd-drop": {"classlist": ["DD.Drop"], "name": "dd-drop", "filelist": ["drop.js"], "description": "This class provides the ability to create a Drop Target."}, "attribute": {"name": "attribute", "classlist": ["Attribute"], "filelist": ["Attribute.js"], "guessedname": "O", "guessedtype": "property", "description": "Managed Attribute Provider"}, "nodeextras": {"classlist": [], "name": "nodeextras", "filelist": ["NodeRegion.js"], "description": "Extended interface for Node"}, "nodeclassname": {"classlist": [], "name": "nodeclassname", "filelist": ["NodeScreen.js"], "description": "Extended Node interface for managing classNames."}, "JSON": {"classlist": ["JSON"], "name": "JSON", "filelist": ["Stringify.js"], "description": "Provides Y.JSON.stringify method for converting objects to JSON strings."}, "base": {"name": "base", "classlist": ["Base"], "filelist": ["Base.js"], "guessedname": "L", "guessedtype": "property", "description": "Base class support for objects requiring\nmanaged attributes and acting as event targets"}, "dd-ddm": {"classlist": ["DD.DDM"], "name": "dd-ddm", "filelist": ["ddm.js"], "description": "Extends the dd-ddm-base Class to add support for the viewport shim to allow a draggable node to drag to be dragged over an iframe or any other node that traps mousemove events.\nIt is also required to have Drop Targets enabled, as the viewport shim will contain the shims for the Drop Targets."}, "dd-plugin": {"classlist": ["Plugin.DragPlugin"], "name": "dd-plugin", "filelist": ["dd-plugin.js"], "description": "This is a simple Drag plugin that can be attached to a Node via the plug method."}, "dd-drag": {"classlist": ["DD.Drag"], "name": "dd-drag", "filelist": ["drag.js"], "description": "This class provides the ability to drag a Node."}, "dd-proxy": {"classlist": ["DD.Proxy"], "name": "dd-proxy", "filelist": ["proxy.js"], "description": "This class extends dd-drag to allow for creating a proxy drag node, instead of dragging the original node."}, "animation": {"classlist": ["Anim", "Anim", "Y.Easing"], "name": "animation", "filelist": ["Anim.js", "Easing.js", "NodeFXPlugin.js"], "description": "Animation Utility."}, "dd-ddm-base": {"classlist": ["DD.DDM"], "name": "dd-ddm-base", "filelist": ["ddm-base.js"], "description": "Provides the base Drag Drop Manger required for making a Node draggable."}}, "namespaces": ["DD", "Plugin", "Y"], "filemap": {"Array.js": {"classlist": ["array"], "name": "Array.js", "module": "yui"}, "ddm-base.js": {"classlist": ["DD.DDM"], "name": "ddm-base.js", "module": "dd-ddm-base"}, "Later.js": {"classlist": [], "name": "Later.js", "module": "yui"}, "Do.js": {"classlist": [], "name": "Do.js", "module": "yui"}, "Parse.js": {"classlist": ["JSON"], "name": "Parse.js", "module": "JSON"}, "NodeExtras.js": {"classlist": [], "name": "NodeExtras.js", "module": "nodeclassname"}, "constrain.js": {"classlist": ["DD.DragConstained"], "name": "constrain.js", "module": "dd-constrain"}, "dd-plugin.js": {"classlist": ["Plugin.DragPlugin"], "name": "dd-plugin.js", "module": "dd-plugin"}, "NodeScreen.js": {"classlist": [], "name": "NodeScreen.js", "module": "nodeclassname"}, "NodeFXPlugin.js": {"classlist": [], "name": "NodeFXPlugin.js", "module": "animation"}, "Dump.js": {"classlist": [], "name": "Dump.js", "module": "yui"}, "proxy.js": {"classlist": ["DD.Proxy"], "name": "proxy.js", "module": "dd-proxy"}, "UA.js": {"classlist": ["ua"], "name": "UA.js", "module": "yui"}, "ddm.js": {"classlist": ["DD.DDM"], "name": "ddm.js", "module": "dd-ddm"}, "Object.js": {"classlist": ["object"], "name": "Object.js", "module": "yui"}, "YUI.js": {"classlist": ["YUI"], "name": "YUI.js", "module": "yui"}, "drag.js": {"classlist": ["DD.Drag"], "name": "drag.js", "module": "dd-drag"}, "Attribute.js": {"classlist": ["Attribute"], "name": "Attribute.js", "module": "attribute"}, "event-ready.js": {"classlist": [], "name": "event-ready.js", "module": "yui"}, "Anim.js": {"classlist": ["Anim", "Anim"], "name": "Anim.js", "module": "animation"}, "event-custom.js": {"classlist": ["Event.Handle", "Event.Custom", "Event.Subscriber"], "name": "event-custom.js", "module": "yui"}, "Substitute.js": {"classlist": [], "name": "Substitute.js", "module": "yui"}, "Core.js": {"classlist": [], "name": "Core.js", "module": "yui"}, "Base.js": {"classlist": ["Base"], "name": "Base.js", "module": "base"}, "ddm-drop.js": {"classlist": ["DD.DDM"], "name": "ddm-drop.js", "module": "dd-ddm-drop"}, "NodeRegion.js": {"classlist": [], "name": "NodeRegion.js", "module": "nodeextras"}, "Compat.js": {"classlist": [], "name": "Compat.js", "module": "yui"}, "Lang.js": {"classlist": ["lang"], "name": "Lang.js", "module": "yui"}, "io.js": {"classlist": [], "name": "io.js"}, "Easing.js": {"classlist": ["Y.Easing"], "name": "Easing.js", "module": "animation"}, "event-target.js": {"classlist": ["Event.Target"], "name": "event-target.js", "module": "yui"}, "NodeClassName.js": {"classlist": [], "name": "NodeClassName.js", "module": "node"}, "Stringify.js": {"classlist": ["JSON"], "name": "Stringify.js", "module": "JSON"}, "event-facade.js": {"classlist": ["Event.Facade"], "name": "event-facade.js", "module": "yui"}, "event-dom.js": {"classlist": ["Event"], "name": "event-dom.js", "module": "yui"}, "Node.js": {"classlist": ["Node", "NodeList"], "name": "Node.js", "module": "node"}, "Get.js": {"classlist": ["Get"], "name": "Get.js", "module": "yui"}, "drop.js": {"classlist": ["DD.Drop"], "name": "drop.js", "module": "dd-drop"}, "Init.js": {"classlist": [], "name": "Init.js", "module": "yui"}}}