{"classmap": {"Node": {"name": "Node", "namespace": "", "module": "node", "guessedname": "BASE_NODE", "methods": {"appendChild": {"return": {"type": "Node", "description": "The appended node"}, "params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be appended"}], "description": "Passes through to DOM method.", "guessedname": "appendChild", "guessedtype": "property"}, "all": {"return": {"type": "NodeList", "description": "A wrapper instance for the supplied nodes."}, "params": [{"type": "HTMLCollection|Array|String", "name": "node", "description": " The object to wrap."}, {"type": "document|Node", "name": "doc", "description": " optional The document containing the node. Defaults to current document."}], "description": "Retrieves a NodeList instance for the given object\/string.", "guessedname": "all", "guessedtype": "function"}, "set": {"params": [{"type": "String", "name": "prop", "description": " Property to set"}, {"type": "any", "name": "val", "description": " Value to apply to the given property"}], "description": "Set the value of the property\/attribute on the HTMLElement bound to this Node.\nOnly strings\/numbers\/booleans are passed through unless a SETTER exists.", "guessedname": "set", "guessedtype": "function"}, "getAttribute": {"return": {"type": "String", "description": "The current value of the attribute"}, "params": [{"type": "String", "name": "attribute", "description": " The attribute to retrieve"}], "description": "Passes through to DOM method.", "guessedname": "getAttribute", "guessedtype": "property"}, "focus": {"description": "Passes through to DOM method.", "guessedname": "focus", "guessedtype": "property"}, "cloneNode": {"return": {"type": "Node", "description": "The clone"}, "params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be cloned"}], "description": "Passes through to DOM method.", "guessedname": "cloneNode", "guessedtype": "property"}, "setStyle": {"params": [{"type": "String", "name": "attr", "description": " The style attribute to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "description": "Applies a CSS style to a given node.", "guessedname": "setStyle", "guessedtype": "function"}, "nodeInOut": {"description": "Wraps the input and outputs of a node instance", "guessedname": "nodeInOut", "guessedtype": "function"}, "query": {"return": {"type": "Node", "description": "A Node instance for the matching HTMLElement."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Retrieves a single node based on the given CSS selector.", "guessedname": "query", "guessedtype": "function"}, "queryAll": {"return": {"type": "NodeList", "description": "A NodeList instance for the matching HTMLCollection\/Array."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Retrieves a nodeList based on the given CSS selector.", "guessedname": "queryAll", "guessedtype": "function"}, "create": {"return": {"type": "Node", "description": "A new Node instance"}, "description": "Creates a Node instance from HTML string or jsonml", "param": "{String | Array} jsonml HTML string or jsonml", "params": [{"type": "String|Array", "name": "html", "description": " The string or jsonml to create from"}], "guessedname": "create", "guessedtype": "function"}, "submit": {"description": "Passes through to DOM method.\nOnly valid on FORM elements", "guessedname": "submit", "guessedtype": "property"}, "setStyles": {"params": [{"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "description": "Sets multiple style properties.", "guessedname": "setStyles", "guessedtype": "function"}, "get\nUse 'document' string to retrieve document Node instance from string": {"return": {"type": "Node", "description": "A wrapper instance for the supplied object."}, "params": [{"type": "document|HTMLElement|HTMLCollection|Array|String", "name": "node", "description": " The object to wrap."}, {"type": "document|Node", "name": "doc", "description": " optional The document containing the node. Defaults to current document."}], "description": "Retrieves a Node instance for the given object\/string.", "guessedname": "get", "guessedtype": "function"}, "hasChildNodes": {"return": {"type": "Boolean", "description": "Whether or not the node has any childNodes"}, "description": "Passes through to DOM method.", "guessedname": "hasChildNodes", "guessedtype": "property"}, "blur": {"description": "Passes through to DOM method.", "guessedname": "blur", "guessedtype": "property"}, "test": {"return": {"type": "boolean", "description": "Whether or not the node matches the selector."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Test if the supplied node matches the supplied selector.", "guessedname": "test", "guessedtype": "function"}, "insertBefore": {"params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be inserted"}, {"type": "String | HTMLElement | Node", "name": "refNode", "description": " Node to be inserted before"}], "description": "Passes through to DOM method.", "guessedname": "insertBefore", "guessedtype": "property"}, "get": {"return": {"type": "any", "description": "Current value of the property"}, "params": [{"type": "String", "name": "prop", "description": " Property to get"}], "description": "Get the value of the property\/attribute on the HTMLElement bound to this Node.\nOnly strings\/numbers\/booleans are passed through unless a GETTER exists.", "guessedname": "get", "guessedtype": "function"}, "getElementsByTagName": {"return": {"type": "NodeList", "description": "A NodeList representing the HTMLCollection"}, "params": [{"type": "String", "name": "tagName", "description": " The tagName to collect"}], "description": "Passes through to DOM method.", "guessedname": "getElementsByTagName", "guessedtype": "property"}, "getStyle": {"return": {"type": "String", "description": "The current value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Retrieves a style attribute from the given node.", "guessedname": "getStyle", "guessedtype": "function"}, "hasAttribute": {"return": {"type": "Boolean", "description": "Whether or not the attribute is present"}, "params": [{"type": "String", "name": "attribute", "description": " The attribute to test for"}], "description": "Passes through to DOM method.", "guessedname": "hasAttribute", "guessedtype": "property"}, "replaceChild": {"return": {"type": "Node", "description": "The replaced node"}, "params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be inserted"}, {"type": "String | HTMLElement | Node", "name": "refNode", "description": " Node to be replaced"}], "description": "Passes through to DOM method.", "guessedname": "replaceChild", "guessedtype": "property"}, "detach": {"params": [{"type": "String", "name": "type", "description": " The type of DOM Event"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}], "description": "Attaches a handler for the given DOM event.", "guessedname": "detach", "guessedtype": "function"}, "reset": {"description": "Passes through to DOM method.\nOnly valid on FORM elements", "guessedname": "reset", "guessedtype": "property"}, "scrollIntoView": {"description": "Passes through to DOM method.", "guessedname": "scrollIntoView", "guessedtype": "property"}, "hasMethod": {"return": {"type": "Boolean", "description": "Whether or not the HTMLElement can use the method"}, "params": [{"type": "String", "name": "method", "description": " The method to check for"}], "description": "Tests whether or not the bound HTMLElement can use the given method.", "guessedname": "hasMethod", "guessedtype": "function"}, "setAttribute": {"params": [{"type": "String", "name": "attribute", "description": " The attribute to set"}, {"type": "String", "name": "The", "description": " value to apply to the attribute"}], "description": "Passes through to DOM method.", "guessedname": "setAttribute", "guessedtype": "property"}, "removeChild": {"return": {"type": "Node", "description": "The removed node"}, "params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be removed"}], "description": "Passes through to DOM method.", "guessedname": "removeChild", "guessedtype": "property"}, "compareTo": {"return": {"type": "Boolean", "description": "True if the nodes match, false if they do not."}, "params": [{"type": "String | HTMLElement | Node", "name": "refNode", "description": " The reference node to compare to the node."}], "description": "Compares nodes to determine if they match.\nNode instances can be compared to each other and\/or HTMLElements\/selectors.", "guessedname": "compareTo", "guessedtype": "function"}}, "file": "Node.js", "guessedtype": "property", "shortname": "Node", "properties": {"body": {"type": "Node", "description": "Returns a Node instance."}, "childNodes": {"type": "NodeList", "description": "Returns a NodeList instance."}, "offsetParent": {"type": "Node", "description": "Returns a Node instance. \nOnly valid for HTMLElement nodes."}, "documentElement": {"type": "Node", "description": "Returns a Node instance."}, "docScrollY": {"type": "Number", "description": "Amount page has been scroll horizontally"}, "docHeight": {"type": "Number", "description": "Document height"}, "ownerDocument": {"type": "Doc", "description": "Returns a Node instance."}, "firstChild": {"type": "Node", "description": "Returns a Node instance."}, "docWidth": {"type": "Number", "description": "Document width"}, "winWidth": {"type": "String", "description": "Returns the inner width of the viewport (exludes scrollbar)."}, "docScrollX": {"type": "Number", "description": "Amount page has been scroll vertically"}, "parentNode": {"type": "Node", "description": "Returns a Node instance."}, "lastChild": {"type": "Node", "description": "Returns a Node instance."}, "previousSibling": {"type": "Node", "description": "Returns a Node instance."}, "winHeight": {"type": "String", "description": "Returns the inner height of the viewport (exludes scrollbar)."}}, "description": "A wrapper for DOM Nodes.\nNode properties can be accessed via the set\/get methods.\nWith the exception of the noted properties,\nonly strings, numbers, and booleans are passed through. \nUse Y.get() or Y.Node.get() to create Node instances."}, "Event.Facade": {"file": "event-facade.js", "name": "Event.Facade", "namespace": "", "param": "ev {Event} the DOM event", "methods": {"stopImmediatePropagation": {"description": "Stops the propagation to the next bubble target and\nprevents any additional listeners from being exectued\non the current target.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "stopPropagation": {"description": "Stops the propagation to the next bubble target", "guessedname": "stopPropagation", "guessedtype": "function"}, "preventDefault": {"description": "Prevents the event's default behavior", "guessedname": "preventDefault", "guessedtype": "function"}, "halt": {"params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "guessedname": "halt", "guessedtype": "function"}}, "module": "yui", "guessedname": "Facade", "guessedtype": "function", "shortname": "Event.Facade", "properties": {"pageX": {"type": "int", "description": "The X location of the event on the page (including scroll)", "guessedname": "pageX", "guessedtype": "property"}, "relatedTarget": {"type": "Node", "propery": "relatedTarget", "description": "Node reference to the relatedTarget", "guessedname": "relatedTarget", "guessedtype": "property"}, "time": {"type": "Date", "description": "Timestamp for the event", "guessedname": "time", "guessedtype": "property"}, "details": {"type": "Array", "description": "The event details.  Currently supported for Custom\nEvents only, where it contains the arguments that\nwere passed to fire().", "guessedname": "details", "guessedtype": "property"}, "which": {"type": "int", "description": "The button that was pushed.  Same as button.", "guessedname": "which", "guessedtype": "property"}, "pageY": {"type": "int", "description": "The Y location of the event on the page (including scroll)", "guessedname": "pageY", "guessedtype": "property"}, "originalTarget": {"type": "Node", "propery": "originalTarget", "description": "Node reference for the element that the listener was attached to.", "guessedname": "originalTarget", "guessedtype": "property"}, "charCode": {"type": "int", "description": "The charCode for key events.  Same as keyCode", "guessedname": "charCode", "guessedtype": "property"}, "keyCode": {"type": "int", "description": "The keyCode for key events.  Uses charCode if keyCode is not available", "guessedname": "c", "guessedtype": "property"}, "target": {"type": "Node", "propery": "target", "description": "Node reference for the targeted element", "guessedname": "target", "guessedtype": "property"}}, "description": "Wraps a DOM event, properties requiring browser abstraction are\nfixed here.  Provids a security layer when required."}, "NodeList": {"name": "NodeList", "namespace": "", "module": "node", "guessedname": "NodeList", "methods": {"getXY": {"return": {"type": "Array", "description": "The XY position of the element\nTODO: test inDocument\/display"}, "description": "Gets the current position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "guessedname": "getXY", "guessedtype": "function"}, "set": {"see": "Node", "params": [{"type": "String", "name": "prop", "description": " Property to set"}, {"type": "any", "name": "val", "description": " Value to apply to the given property"}], "description": "Set the value of the property\/attribute on all HTMLElements bound to this NodeList.\nOnly strings\/numbers\/booleans are passed through unless a SETTER exists.", "guessedname": "set", "guessedtype": "function"}, "get": {"return": {"type": "Array", "description": "Array containing the current values mapped to the Node indexes"}, "description": "Get the value of the property\/attribute for each of the HTMLElements bound to this NodeList.\nOnly strings\/numbers\/booleans are passed through unless a GETTER exists.", "see": "Node", "params": [{"type": "String", "name": "prop", "description": " Property to get"}], "guessedname": "get", "guessedtype": "function"}, "removeClass": {"return": {"type": "Boolean | Array", "description": "A pass\/fail boolean or array of booleans"}, "params": [{"type": "String", "name": "className", "description": " the class name to remove from the class attribute"}], "description": "Removes a class name from a given element or collection of elements.", "guessedname": "removeClass", "guessedtype": "function"}, "replaceClass": {"return": {"type": "Boolean | Array", "description": "A pass\/fail boolean or array of booleans"}, "params": [{"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for a given element or collection of elements.\nIf no oldClassName is present, the newClassName is simply added.", "guessedname": "replaceClass", "guessedtype": "function"}, "next": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "Function", "name": "method", "description": " A boolean function used to test siblings\nthat receives the sibling node being tested as its only argument"}], "description": "Returns the next HTMLElement sibling that passes the boolean method. \nReturns the nearest HTMLElement sibling if no method provided.", "guessedname": "next", "guessedtype": "function"}, "filter": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Filters the NodeList instance down to only nodes matching the given selector.", "see": "Selector", "params": [{"type": "String", "name": "selector", "description": " The selector to filter against"}], "guessedname": "filter", "guessedtype": "function"}, "item": {"return": {"type": "Node", "description": "The Node instance at the given index."}, "params": [{"type": "Number", "name": "index", "description": " The index of the target Node."}], "description": "Retrieves the Node instance at the given index.", "guessedname": "item", "guessedtype": "function"}, "setXY": {"params": [{"type": "Array", "name": "xy", "description": " Contains X & Y values for new position (coordinates are page-based)"}, {"type": "Boolean", "name": "noRetry", "description": " By default we try and set the position a second time if the first fails"}], "description": "Set the position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setXY", "guessedtype": "function"}, "each": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Applies the given function to each Node in the NodeList.", "see": "Y.each", "params": [{"type": "Function", "name": "fn", "description": " The function to apply"}], "guessedname": "each", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean | Array", "description": "A boolean value or array of boolean values"}, "params": [{"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether an HTMLElement has the given className.", "guessedname": "hasClass", "guessedtype": "function"}, "contains": {"return": {"type": "Boolean", "description": "Whether or not this node is an ancestor of needle"}, "params": [{"type": "String | HTMLElement", "name": "needle", "description": " The possible descendent"}], "description": "Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy.", "guessedname": "contains", "guessedtype": "function"}, "previous": {"return": {"type": "Node", "description": "Node instance or null if not found"}, "params": [{"type": "Function", "name": "method", "description": " A boolean function used to test siblings\nthat receives the sibling node being tested as its only argument"}], "description": "Returns the previous sibling that is an HTMLElement. \nReturns the nearest HTMLElement sibling if no method provided.", "guessedname": "previous", "guessedtype": "function"}, "addClass": {"return": {"type": "Boolean | Array", "description": "A pass\/fail boolean or array of booleans"}, "params": [{"type": "String", "name": "className", "description": " the class name to add to the class attribute"}], "description": "Adds a class name to a given element or collection of elements.", "guessedname": "addClass", "guessedtype": "function"}}, "file": "Node.js", "guessedtype": "function", "shortname": "NodeList", "properties": {"text": {"type": "String", "description": "Normalizes nodeInnerText and textContent."}, "children": {"type": "NodeList", "description": "A NodeList containing only HTMLElement child nodes"}}, "description": "A wrapper for interacting with DOM elements"}, "lang": {"description": "Provides the language utilites and extensions used by the library", "namespace": "", "module": "yui", "guessedname": "lang", "methods": {"isArray": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is an array.\nTesting typeof\/instanceof\/constructor of arrays across frame \nboundaries isn't possible in Safari unless you have a reference\nto the other frame to test against its Array prototype.  To\nhandle this case, we test well-known array properties instead.\nproperties.", "guessedname": "isArray", "guessedtype": "function"}, "trim": {"return": {"type": "string", "description": "the trimmed string"}, "params": [{"type": "string", "name": "s", "description": "  the string to trim"}], "description": "Returns a string without any leading or trailing whitespace.  If \nthe input is not a string, the input will be returned untouched.", "guessedname": "trim", "guessedtype": "function"}, "isString": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a string", "guessedname": "isString", "guessedtype": "function"}, "isBoolean": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a boolean", "guessedname": "isBoolean", "guessedtype": "function"}, "later": {"return": {"type": "", "description": "a timer object. Call the cancel() method on this object to \nstop the timer."}, "params": [{"type": "int", "name": "when", "description": "  the number of milliseconds to wait until the fn \nis executed"}, {"type": "", "name": "o", "description": " the context object"}, {"type": "Function|String", "name": "fn", "description": "  the function to execute or the name of \nthe method in the 'o' object to execute"}, {"type": "", "name": "data", "description": " [Array] data that is provided to the function.  This accepts\neither a single item or an array.  If an array is provided, the\nfunction is executed with one parameter for each array item.  If\nyou need to pass a single array parameter, it needs to be wrapped in\nan array [myarray]"}, {"type": "boolean", "name": "periodic", "description": "  if true, executes continuously at supplied \ninterval until canceled"}], "description": "Executes the supplied function in the context of the supplied \nobject 'when' milliseconds later.  Executes the function a \nsingle time unless periodic is set to true.", "guessedname": "later", "guessedtype": "function"}, "isNull": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is null", "guessedname": "isNull", "guessedtype": "function"}, "isValue": {"return": {"type": "boolean", "description": "true if it is not null\/undefined\/NaN || false"}, "params": [{"type": "any", "name": "o", "description": "  the item to test"}], "description": "A convenience method for detecting a legitimate non-null value.\nReturns false for null\/undefined\/NaN, true for other values, \nincluding 0\/false\/''", "guessedname": "isValue", "guessedtype": "function"}, "isFunction": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a function", "guessedname": "isFunction", "guessedtype": "function"}, "isNumber": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a legal number", "guessedname": "isNumber", "guessedtype": "function"}, "isObject": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}, {"type": "boolean", "name": "failfn", "description": "  fail if the input is a function"}], "description": "Determines whether or not the provided object is of type object\nor function", "guessedname": "isObject", "guessedtype": "function"}, "isUndefined": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is undefined", "guessedname": "isUndefined", "guessedtype": "function"}}, "file": "Lang.js", "guessedtype": "property", "shortname": "lang", "name": "lang"}, "Get": {"name": "Get", "namespace": "", "module": "yui", "guessedname": "Get", "methods": {"_purge": {"private": "", "description": "Removes the nodes for the specified queue", "guessedname": "_purge", "guessedtype": "function"}, "_finalize": {"guessedname": "_finalize", "params": [{"type": "string", "name": "id", "description": "  the transaction id"}], "description": "Called by the the helper for detecting script load in Safari", "private": "", "guessedtype": "function"}, "_autoPurge": {"private": "", "description": "Removes processed queues and corresponding nodes", "guessedname": "_autoPurge", "guessedtype": "function"}, "_finish": {"guessedname": "_finish", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}], "description": "The request is complete, so executing the requester's callback", "private": "", "guessedtype": "function"}, "_linkNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a link node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the css file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}], "guessedname": "_linkNode", "guessedtype": "function"}, "script": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more script nodes into the head\nof the current document or the document in a specified window.", "static": "", "guessedname": "script", "guessedtype": "function", "params": [{"type": "string|string[]", "name": "url", "description": "  the url or urls to the script(s)"}, {"type": "object", "name": "opts", "description": "  Options: \n<dl>\n<dt>onSuccess<\/dt>\n<dd>\ncallback to execute when the script(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>onFailure<\/dt>\n<dd>\ncallback to execute when the script load operation fails\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted successfully<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove any nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>scope<\/dt>\n<dd>the execution context for the callbacks<\/dd>\n<dt>win<\/dt>\n<dd>a window other than the one the utility occupies<\/dd>\n<dt>autopurge<\/dt>\n<dd>\nsetting to true will let the utilities cleanup routine purge \nthe script once loaded\n<\/dd>\n<dt>data<\/dt>\n<dd>\ndata that is supplied to the callback when the script(s) are\nloaded.\n<\/dd>\n<dt>varName<\/dt>\n<dd>\nvariable that should be available when a script is finished\nloading.  Used to help Safari 2.x and below with script load \ndetection.  The type of this property should match what was\npassed into the url parameter: if loading a single url, a\nstring can be supplied.  If loading multiple scripts, you\nmust supply an array that contains the variable name for\neach script.\n<\/dd>\n<dt>insertBefore<\/dt>\n<dd>node or node id that will become the new node's nextSibling<\/dd>\n<\/dl>\n<dt>charset<\/dt>\n<dd>Node charset, default utf-8<\/dd>\n<pre>\n\/\/ assumes yahoo, dom, and event are already on the page\n&nbsp;&nbsp;Y.Get.script(\n&nbsp;&nbsp;[\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/dragdrop\/dragdrop-min.js\",\n&nbsp;&nbsp;&nbsp;\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/animation\/animation-min.js\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(o.data); \/\/ foo\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new Y.DDProxy(\"dd1\"); \/\/ also new o.reference(\"dd1\"); would work\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(\"won't cause error because Y is the scope\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(o.nodes.length === 2) \/\/ true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/ o.purge(); \/\/ optionally remove the script nodes immediately\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(\"transaction failed\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;data: \"foo\",\n&nbsp;&nbsp;&nbsp;&nbsp;scope: Y,\n&nbsp;&nbsp;&nbsp;&nbsp;\/\/ win: otherframe \/\/ target another window\/frame\n&nbsp;&nbsp;&nbsp;&nbsp;autopurge: true \/\/ allow the utility to choose when to remove the nodes\n&nbsp;&nbsp;&#125;);\n<\/pre>"}]}, "_returnData": {"private": "", "description": "Returns the data payload for callback functions", "guessedname": "_returnData", "guessedtype": "function"}, "queue": {"guessedname": "_queue", "params": [{"type": "string", "name": "type", "description": "  the type of node to insert"}, {"type": "string", "name": "url", "description": "  the url to load"}, {"type": "", "name": "opts", "description": " the hash of options for this request"}], "description": "Saves the state for the request and begins loading\nthe requested urls", "private": "", "guessedtype": "function"}, "_scriptNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a script node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the script file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}], "guessedname": "_scriptNode", "guessedtype": "function"}, "_node": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates an HTML element, this is not appended to a document", "private": "", "params": [{"type": "string", "name": "type", "description": "  the type of element"}, {"type": "string", "name": "attr", "description": "  the attributes"}, {"type": "Window", "name": "win", "description": "  optional window to create the element in"}], "guessedname": "_node", "guessedtype": "function"}, "abort": {"params": [{"type": "string|object", "name": "either", "description": " the tId or the object returned from\nscript() or css()"}], "description": "Abort a transaction", "guessedname": "abort", "guessedtype": "function"}, "_next": {"guessedname": "_next", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "loaded", "description": "  the url that was just loaded, if any"}], "description": "Loads the next item for a given request", "private": "", "guessedtype": "function"}, "_track": {"guessedname": "_track", "params": [{"type": "string", "name": "type", "description": "  the type of node to track"}, {"type": "HTMLElement", "name": "n", "description": "  the node to track"}, {"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "url", "description": "  the url that is being loaded"}, {"type": "Window", "name": "win", "description": "  the targeted window"}, {"type": "", "name": "qlength", "description": " the number of remaining items in the queue,\nincluding this one"}, {"type": "Function", "name": "trackfn", "description": "  function to execute when finished\nthe default is _next"}], "description": "Detects when a node has been loaded.  In the case of\nscript nodes, this does not guarantee that contained\nscript is ready to use.", "private": "", "guessedtype": "function"}, "css": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more css link nodes into the \nhead of the current document or the document in a specified\nwindow.", "static": "", "guessedname": "css", "guessedtype": "function", "params": [{"type": "string", "name": "url", "description": "  the url or urls to the css file(s)"}, {"type": "", "name": "opts", "description": " Options: \n<dl>\n<dt>onSuccess<\/dt>\n<dd>\ncallback to execute when the css file(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>win<\/dl>\n<dd>the window the link nodes(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>scope<\/dt>\n<dd>the execution context for the callbacks<\/dd>\n<dt>win<\/dt>\n<dd>a window other than the one the utility occupies<\/dd>\n<dt>data<\/dt>\n<dd>\ndata that is supplied to the callbacks when the nodes(s) are\nloaded.\n<\/dd>\n<dt>insertBefore<\/dt>\n<dd>node or node id that will become the new node's nextSibling<\/dd>\n<dt>charset<\/dt>\n<dd>Node charset, default utf-8<\/dd>\n<\/dl>\n<pre>\nY.Get.css(\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/menu\/assets\/skins\/sam\/menu.css\");\n<\/pre>\n<pre>\nY.Get.css([\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/menu\/assets\/skins\/sam\/menu.css\",\n\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/logger\/assets\/skins\/sam\/logger.css\"]);\n<\/pre>"}]}}, "static": "", "file": "Get.js", "guessedtype": "function", "shortname": "Get", "properties": {"POLL_FREQ": {"description": "The default poll freqency in ms, when needed", "default": "10", "static": "", "guessedname": "POLL_FREQ", "guessedtype": "property", "type": "int"}, "qidx": {"guessedname": "qidx", "type": "int", "description": "queue index used to generate transaction ids", "private": "", "guessedtype": "property"}, "queues": {"private": "", "description": "hash of queues to manage multiple requests", "guessedname": "queues", "guessedtype": "property"}, "purging": {"guessedname": "purging", "type": "boolean", "description": "interal property used to prevent multiple simultaneous purge \nprocesses", "private": "", "guessedtype": "property"}, "TIMEOUT": {"description": "The length time to poll for varName when loading a script in\nSafari 2.x before the transaction fails.\nproperty TIMEOUT", "default": "2000", "static": "", "guessedname": "TIMEOUT", "guessedtype": "property", "type": "int"}, "nidx": {"guessedname": "nidx", "type": "int", "description": "node index used to generate unique node ids", "private": "", "guessedtype": "property"}, "PURGE_THRESH": {"description": "The number of request required before an automatic purge.\nproperty PURGE_THRESH", "default": "20", "static": "", "guessedname": "PURGE_THRESH", "guessedtype": "property", "type": "int"}}, "description": "Fetches and inserts one or more script or link nodes into the document"}, "Event.Handle": {"name": "Event.Handle", "constructors": [{"params": [{"type": "Event.Custom", "name": "evt", "description": "  the custom event"}, {"type": "Event.Subscriber", "name": "sub", "description": "  the subscriber"}], "description": "Return value from all subscribe operations"}], "namespace": "", "module": "yui", "guessedname": "EventHandle", "methods": {"detach": {"description": "Detaches this subscriber", "guessedname": "detach", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Event.Handle", "properties": {"evt": {"type": "Event.Custom", "description": "The custom event", "guessedname": "evt", "guessedtype": "property"}, "sub": {"type": "Event.Subscriber", "description": "The subscriber object", "guessedname": "sub", "guessedtype": "property"}}, "description": "Return value from all subscribe operations"}, "object": {"methods": {"keys": {"return": {"type": "string[]", "description": "the keys"}, "params": [{"type": "", "name": "o", "description": " an object"}], "description": "Returns an array containing the object's keys", "guessedname": "keys", "guessedtype": "function"}, "each": {"return": {"type": "YUI", "description": "the YUI instance"}, "params": [{"type": "", "name": "o", "description": " the object to iterate"}, {"type": "function", "name": "f", "description": "  the function to execute"}, {"type": "", "name": "c", "description": " the execution context"}], "description": "Executes a function on each item. The function\nreceives the value, the key, and the object\nas paramters (in that order).", "guessedname": "each", "guessedtype": "function"}, "object": {"return": {"type": "", "description": "the new object"}, "params": [{"type": "", "name": "The", "description": " supplier object"}], "description": "Returns a new object based upon the supplied object.  By\ndefault the new object's prototype will have all members\non the object.  Optionally, this can be limited to the\nsupplier's constructor prototype.", "guessedname": "object", "guessedtype": "function"}, "substitute": {"return": {"type": "String", "description": "the substituted string"}, "params": [{"type": "String", "name": "s", "description": "  The string that will be modified."}, {"type": "Object", "name": "o", "description": "  An object containing the replacement values"}, {"type": "Function", "name": "f", "description": "  An optional function that can be used to\nprocess each match.  It receives the key,\nvalue, and any extra metadata included with\nthe key inside of the braces."}], "description": "Does variable substitution on a string. It scans through the string \nlooking for expressions enclosed in { } braces. If an expression \nis found, it is used a key on the object.  If there is a space in\nthe key, the first word is used for the key and the rest is provided\nto an optional function to be used to programatically determine the\nvalue (the extra information might be used for this decision). If \nthe value for the key in the object, or what is returned from the\nfunction has a string value, number value, or object value, it is \nsubstituted for the bracket expression and it repeats.  If this\nvalue is an object, it uses the Object's toString() if this has\nbeen overridden, otherwise it does a shallow dump of the key\/value\npairs.", "guessedname": "substitute", "guessedtype": "function"}, "owns": {"return": {"type": "", "description": "Boolean"}, "description": "Determines whether or not the property was added\nto the object instance.  Returns false if the property is not present\nin the object, or was inherited from the prototype.\nThis abstraction is provided to basic hasOwnProperty for Safari 1.3.x.\nThis \nThere is a discrepancy between Y.object.owns and\nObject.prototype.hasOwnProperty when the property is a primitive added to\nboth the instance AND prototype with the same value:\n<pre>\nvar A = function() {};\nA.prototype.foo = 'foo';\nvar a = new A();\na.foo = 'foo';\nalert(a.hasOwnProperty('foo')); \/\/ true\nalert(Y.object.owns(a, 'foo')); \/\/ false when using fallback\n<\/pre>", "parma": "p {string} the property to look for", "params": [{"type": "any", "name": "o", "description": "  The object being testing"}], "guessedname": "owns", "guessedtype": "property"}}, "description": "Object utils", "namespace": "", "module": "yui", "file": "Object.js", "shortname": "object", "name": "object"}, "Event.Subscriber": {"name": "Event.Subscriber", "constructors": [{"params": [{"type": "Function", "name": "fn", "description": "       The wrapped function to execute"}, {"type": "Object", "name": "obj", "description": "      An object to be passed along when the event fires"}, {"type": "Array", "name": "args", "description": "        subscribe() additional arguments"}], "description": "Stores the subscriber information to be used when the event fires."}], "namespace": "", "module": "yui", "guessedname": "Subscriber", "methods": {"contains": {"return": {"type": "boolean", "description": "true if the supplied arguments match this \nsubscriber's signature."}, "params": [{"type": "Function", "name": "fn", "description": " the function to execute"}, {"type": "Object", "name": "obj", "description": " an object to be passed along when the event fires"}], "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.", "guessedname": "contains", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}, "notify": {"params": [{"type": "", "name": "defaultContext", "description": " The execution context if not overridden\nby the subscriber"}, {"type": "Array", "name": "args", "description": "  Arguments array for the subscriber"}], "description": "Executes the subscriber.", "guessedname": "notify", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Event.Subscriber", "properties": {"wrappedFn": {"type": "Function", "description": "}\nfn bound to obj with additional arguments applied via Y.bind", "guessedname": "wrappedFn", "guessedtype": "property"}, "args": {"type": "Array", "description": "Optional additional arguments supplied to subscribe().  If present,\nthese will be appended to the arguments supplied to fire()"}, "obj": {"type": "Object", "description": "An optional custom object that will passed to the callback when\nthe event fires", "guessedname": "obj", "guessedtype": "property"}, "id": {"type": "String", "description": "Unique subscriber id", "guessedname": "id", "guessedtype": "property"}, "fn": {"type": "Function", "description": "The callback that will be execute when the event fires\nThis is wrapped by Y.bind if obj was supplied.", "guessedname": "fn", "guessedtype": "property"}}, "description": "Stores the subscriber information to be used when the event fires."}, "Y.util.Selector": {"name": "Y.util.Selector", "namespace": "Y.util", "module": "selector", "guessedname": "Selector", "methods": {"test": {"return": {"type": "boolean", "description": "Whether or not the node matches the selector."}, "description": "Test if the supplied node matches the supplied selector.", "static": "", "guessedname": "test", "guessedtype": "function", "params": [{"type": "HTMLElement | String", "name": "node", "description": " An id or node reference to the HTMLElement being tested."}, {"type": "string", "name": "selector", "description": " The CSS Selector to test the node against."}]}, "filter": {"return": {"type": "array", "description": "An array of nodes from the supplied array that match the given selector."}, "description": "Filters a set of nodes based on a given CSS selector.", "static": "", "guessedname": "filter", "guessedtype": "function", "params": [{"type": "array", "name": "nodes", "description": " A set of nodes\/ids to filter."}, {"type": "string", "name": "selector", "description": " The selector used to test each node."}]}, "tokenize": {"description": "Break selector into token units per simple selector.\nCombinator is attached to left-hand selector.", "guessedname": "tokenize", "guessedtype": "function"}, "query": {"return": {"type": "Array", "description": "An array of nodes that match the given selector."}, "description": "Retrieves a set of nodes based on a given CSS selector.", "static": "", "guessedname": "query", "guessedtype": "function", "params": [{"type": "string", "name": "selector", "description": " The CSS Selector to test the node against."}, {"type": "HTMLElement | String", "name": "root", "description": " optional An id or HTMLElement to start the query from. Defaults to Selector.document."}, {"type": "Boolean", "name": "firstOnly", "description": " optional Whether or not to return only the first match."}]}}, "static": "", "file": "Selector.js", "guessedtype": "function", "shortname": "Selector", "properties": {"attrAliases": {"type": "object", "description": "Mapping of attributes to aliases, normally to work around HTMLAttributes\nthat conflict with JS reserved words.", "guessedname": "attrAliases", "guessedtype": "property"}, "operators": {"type": "object", "description": "List of operators and corresponding boolean functions. \nThese functions are passed the attribute and the current node's value of the attribute.", "guessedname": "operators", "guessedtype": "property"}, "document": {"default": "window.document", "type": "object", "description": "Default document for use queries", "guessedname": "document", "guessedtype": "property"}, "shorthand": {"type": "object", "description": "Mapping of shorthand tokens to corresponding attribute selector", "guessedname": "shorthand", "guessedtype": "property"}, "pseudos": {"type": "object", "description": "List of pseudo-classes and corresponding boolean functions. \nThese functions are called with the current node, and any value that was parsed with the pseudo regex.", "guessedname": "pseudos", "guessedtype": "property"}}, "description": "Provides helper methods for collecting and filtering DOM elements."}, "Event.Target": {"description": "Event.Target is designed to be used with Y.augment to wrap \nEvent.Custom in an interface that allows events to be subscribed to \nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all.", "namespace": "", "module": "yui", "guessedname": "EventTarget", "methods": {"getEvent": {"return": {"type": "Event.Target", "description": "the custom event or a falsy value"}, "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}], "description": "Returns the custom event of the provided type has been created, a\nfalsy value otherwise", "guessedname": "getEvent", "guessedtype": "function"}, "removeTarget": {"params": [{"type": "Event.Target", "name": "o", "description": "  the target to remove"}], "description": "Removes a bubble target", "guessedname": "removeTarget", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "the return value from Event.Custom.fire"}, "params": [{"type": "string", "name": "type", "description": "      the type, or name of the event"}, {"type": "Object*", "name": "arguments", "description": "  an arbitrary set of parameters to pass to \nthe handler."}], "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The first argument fire() was executed with<\/li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod<\/li>\n<\/ul>\nIf the custom event object hasn't been created, then the event hasn't \nbeen published and it has no subscribers.  For performance sake, we \nimmediate exit in this case.  This means the event won't bubble, so \nif the intention is that a bubble target be notified, the event must \nbe published on this object first.", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"params": [{"type": "string", "name": "type", "description": "    The type, or name of the event"}], "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "after": {"return": {"type": "", "description": "the detach handle"}, "description": "Executes the callback after the given event or\nmethod hosted on this object.\nThe signature differs based upon the type of\nitem that is being wrapped.\nCustom Event: type, callback, context, 1-n additional arguments\nto append to the callback's argument list.\nMethod: callback, object, methodName, context, 1-n additional \narguments to append to the callback's argument list.", "guessedname": "after", "guessedtype": "function"}, "publish": {"return": {"type": "Event.Custom", "description": "the custom event"}, "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}, {"type": "object", "name": "opts", "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\ncontext: defines the default execution context.  If not defined\nthe default context will be this instance.\n<\/li>\n<li>\nsilent: if true, the custom event will not generate log messages.\nThis is false by default.\n<\/li>\n<li>\nonSubscribeCallback: specifies a callback to execute when the\nevent has a new subscriber.  This will fire immediately for\neach queued subscriber if any exist prior to the creation of\nthe event.\n<\/li>\n<\/ul>"}], "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.", "guessedname": "publish", "guessedtype": "function"}, "subscribe": {"params": [{"type": "string", "name": "type", "description": "       The type, or name of the event"}, {"type": "function", "name": "fn", "description": "       The function to exectute when the event fires"}, {"type": "Object", "name": "context", "description": "    An object to be passed along when the event \nfires"}], "description": "Subscribe to a Event.Custom by event type", "guessedname": "subscribe", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "true if the subscriber was found and detached."}, "params": [{"type": "string|Object", "name": "type", "description": "    Either the handle to the subscriber or the \ntype of event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events."}, {"type": "Function", "name": "fn", "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."}, {"type": "Object", "name": "context", "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes one or more listeners the from the specified event", "guessedname": "unsubscribe", "guessedtype": "function"}, "addTarget": {"params": [{"type": "Event.Target", "name": "o", "description": "  the target to add"}], "description": "Registers another Event.Target as a bubble target.  Bubble order\nis determined by the order registered.  Multiple targets can\nbe specified.", "guessedname": "addTarget", "guessedtype": "function"}, "bubble": {"return": {"type": "boolean", "description": "the aggregated return value from Event.Custom.fire"}, "params": [{"type": "Event.Custom", "name": "evt", "description": "  the custom event to propagate"}], "description": "Propagate an event", "guessedname": "bubble", "guessedtype": "function"}, "before": {"return": {"type": "", "description": "the detach handle"}, "description": "Executes the callback before the given event or\nmethod hosted on this object.\nThe signature differs based upon the type of\nitem that is being wrapped.\nCustom Event: type, callback, context, 1-n additional arguments\nto append to the callback's argument list.\nMethod: callback, object, methodName, context, 1-n additional \narguments to append to the callback's argument list.", "guessedname": "before", "guessedtype": "function"}}, "file": "event-target.js", "guessedtype": "function", "shortname": "Event.Target", "properties": {"__yui_targets": {"guessedname": "__yui_targets", "type": "{}", "description": "Private storage of bubble targets", "private": "", "guessedtype": "property"}, "__yui_events": {"guessedname": "__yui_events", "type": "Object[]", "description": "Private storage of custom events", "private": "", "guessedtype": "property"}}, "name": "Event.Target"}, "YUI": {"methods": {"AlterReturn": {"description": "Return an AlterReturn object when you want to change the result returned\nfrom the core method to the caller", "guessedname": "AlterReturn", "guessedtype": "function"}, "use": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Bind a module to a YUI instance", "params": [{"type": "string", "name": "modules*", "description": "  1-n modules to bind (uses arguments array)"}, {"type": "function", "name": "*callback", "description": "  callback function executed when \nthe instance has the required functionality.  If included, it\nmust be the last parameter."}], "guessedname": "use", "guessedtype": "function", "todo": "Implement versioning?  loader can load different versions?\nShould sub-modules\/plugins be normal modules, or do\nwe add syntax for specifying these?\nYUI().use('dragdrop')\nYUI().use('dragdrop:2.4.0'); \/\/ specific version\nYUI().use('dragdrop:2.4.0-'); \/\/ at least this version\nYUI().use('dragdrop:2.4.0-2.9999.9999'); \/\/ version range\nYUI().use('*'); \/\/ use all available modules\nYUI().use('lang+dump+substitute'); \/\/ use lang and some plugins\nYUI().use('lang+*'); \/\/ use lang and all known plugins"}, "augment": {"return": {"type": "YUI", "description": "the YUI instance"}, "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}], "description": "Applies prototype properties from the supplier to the receiver.", "guessedname": "augment", "guessedtype": "function"}, "extend": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.", "static": "", "guessedname": "extend", "guessedtype": "function", "params": [{"type": "Function", "name": "r", "description": "   the object to modify"}, {"type": "Function", "name": "s", "description": " the object to inherit"}, {"type": "Object", "name": "px", "description": " prototype properties to add\/override"}, {"type": "Object", "name": "sx", "description": " static properties to add\/override"}]}, "mix": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Applies the supplier's properties to the receiver.  By default\nall prototype and static propertes on the supplier are applied\nto the corresponding spot on the receiver.  By default all\nproperties are applied, and a property that is already on the\nreciever will not be overwritten.  The default behavior can\nbe modified by supplying the appropriate parameters.", "static": "", "guessedname": "mix", "guessedtype": "function", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}, {"type": "int", "name": "mode", "description": " what should be copies, and to where\ndefault(0): object to object\n1: prototype to prototype (old augment)\n2: prototype to prototype and object props (new augment)\n3: prototype to object\n4: object to prototype"}, {"type": "boolean", "name": "merge", "description": "  merge objects instead of overwriting\/ignoring\nUsed by Y.aggregate"}]}, "bind": {"return": {"type": "", "description": "the wrapped function"}, "params": [{"type": "Function", "name": "f", "description": "  the function to bind"}, {"type": "", "name": "c", "description": " the execution context"}], "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the end of the arguments the function\nis executed with.", "guessedname": "bind", "guessedtype": "function"}, "clone": {"return": {"type": "Array|Object", "description": "the cloned object"}, "description": "Deep obj\/array copy.  Functions will are cloned with Y.bind.\nArray-like objects are treated as arrays.\nprimitives are returned untouched.  Optionally a\nfunction can be provided to handle other data types,\nfilter keys, validate values, etc.", "params": [{"type": "", "name": "o", "description": " what to clone"}, {"type": "boolean", "name": "safe", "description": "  if true, objects will not have prototype\nitems from the source.  If false, it does.  In this case, the\noriginal is initally protected, but the clone is not completely immune\nfrom changes to the source object prototype.  Also, cloned prototype\nitems that are deleted from the clone will result in the value\nof the source prototype to be exposed.  If operating on a non-safe\nclone, items should be nulled out rather than deleted."}, {"type": "", "name": "f", "description": " optional function to apply to each item in a collection\nit will be executed prior to applying the value to\nthe new object.  Return false to prevent the copy."}, {"type": "", "name": "c", "description": " optional execution context for f"}, {"type": "", "name": "owner", "description": " Owner object passed when clone is iterating an\nobject.  Used to set up context for cloned functions."}], "guessedname": "clone", "guessedtype": "function", "todo": "review"}, "after": {"return": {"type": "", "description": "unsubscribe handle"}, "description": "Executes the callback after a DOM event, custom event\nor method.  If the first argument is a function, it\nis assumed the target is a method.\nFor DOM and custom events:\ntype, callback, context, 1-n arguments\nFor methods:\ncallback, object (method host), methodName, context, 1-n arguments", "guessedname": "after", "guessedtype": "function"}, "_init": {"guessedname": "_init", "params": [{"type": "", "name": "o", "description": " config options"}], "description": "Initialize this YUI instance", "private": "", "guessedtype": "function"}, "AlterArgs": {"description": "Return an AlterArgs object when you want to change the arguments that\nwere passed into the function.  An example would be a service that scrubs\nout illegal characters prior to executing the core business logic.", "guessedname": "AlterArgs", "guessedtype": "function"}, "merge": {"return": {"type": "", "description": "the new merged object"}, "params": [{"type": "Object*", "name": "arguments", "description": "  the objects to merge"}], "description": "Returns a new object containing all of the properties of\nall the supplied objects.  The properties from later objects\nwill overwrite those in earlier objects.  Passing in a\nsingle object will create a shallow copy of it.  For a deep\ncopy, use clone.", "guessedname": "merge", "guessedtype": "function"}, "add": {"return": {"type": "YUI", "description": "the YUI instance\nrequires   - features that should be present before loading\noptional   - optional features that should be present if load optional defined\nuse  - features that should be attached automatically\nskinnable  -\nrollup\nomit - features that should not be loaded if this module is present"}, "params": [{"type": "string", "name": "name", "description": "  module name"}, {"type": "string", "name": "namespace", "description": "  name space for the module"}, {"type": "Function", "name": "fn", "description": "  entry point into the module that\nis used to bind module to the YUI instance"}, {"type": "string", "name": "version", "description": "  version string"}], "description": "Register a module", "guessedname": "add", "guessedtype": "function"}, "log": {"return": {"type": "YUI", "description": "YUI instance"}, "description": "If the 'debug' config is true, a 'yui:log' event will be\ndispatched, which the logger widget and anything else\ncan consume.  If the 'useConsole' config is true, it will\nwrite to the browser console if available.", "static": "", "guessedname": "log", "guessedtype": "function", "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)"}]}, "Error": {"description": "Return an Error object when you want to terminate the execution\nof all subsequent method calls", "guessedname": "Error", "guessedtype": "function"}, "aggregate": {"return": {"type": "YUI", "description": "the YUI instance"}, "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}], "description": "Applies object properties from the supplier to the receiver.  If\nthe target has the property, and the property is an object, the target\nobject will be augmented with the supplier's value.  If the property\nis an array, the suppliers value will be appended to the target.", "guessedname": "aggregate", "guessedtype": "function"}, "_setup": {"private": "", "description": "Finishes the instance setup. Attaches whatever modules were defined\nwhen the yui modules was registered.", "guessedname": "_setup", "guessedtype": "function"}, "namespace": {"return": {"type": "Object", "description": "A reference to the last namespace object created"}, "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nYUI.namespace(\"property.package\");\nYUI.namespace(\"YUI.property.package\");\n<\/pre>\nEither of the above would create YUI.property, then\nYUI.property.package\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nYUI.namespace(\"really.long.nested.namespace\");\n<\/pre>\nThis fails because \"long\" is a future reserved word in ECMAScript", "static": "", "guessedname": "namespace", "guessedtype": "function", "params": [{"type": "String*", "name": "arguments", "description": " 1-n namespaces to create"}]}, "dump": {"return": {"type": "String", "description": "the dump result"}, "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.", "params": [{"type": "Object", "name": "o", "description": "  The object to dump"}, {"type": "int", "name": "d", "description": "  How deep to recurse child objects, default 3"}], "guessedname": "dump", "guessedtype": "function", "todo": "dumping a window is causing an unhandled exception in\nFireFox.  Trying to account for it is hanging FireFox.\nCould be a FireBug interaction."}, "before": {"return": {"type": "", "description": "unsubscribe handle"}, "description": "Executes the callback before a DOM event, custom event\nor method.  If the first argument is a function, it\nis assumed the target is a method.\nFor DOM and custom events:\ntype, callback, context, 1-n arguments\nFor methods:\ncallback, object (method host), methodName, context, 1-n arguments", "guessedname": "before", "guessedtype": "function"}}, "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved.", "constructors": [{"params": [{"type": "", "name": "o", "description": " configuration object"}], "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved."}], "namespace": "", "module": "yui", "file": "YUI.js", "shortname": "YUI", "properties": {"_iefix": {"description": "IE will not enumerate native functions in a derived object even if the\nfunction was overridden.  This is a workaround for specific functions \nwe care about on the Object prototype.", "param": "{Function} r  the object to receive the augmentation", "static": "", "private": "", "guessedname": "_iefix", "guessedtype": "property"}}, "name": "YUI"}, "Y.JSON": {"name": "Y.JSON", "namespace": "", "module": "JSON", "guessedname": "JSON", "methods": {"parse": {"return": {"type": "MIXED", "description": "the native JavaScript representation of the JSON string"}, "description": "Parse a JSON string, returning the native JavaScript representation.", "throws": "SyntaxError", "static": "", "guessedname": "parse", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  JSON string data"}, {"type": "function", "name": "reviver", "description": "  (optional) function(k,v) passed each key value pair of object literals, allowing pruning or altering values"}], "public": ""}, "stringify": {"return": {"type": "string", "description": "JSON string representation of the input"}, "description": "Converts an arbitrary value to a JSON string representation.\nCyclical object or array references are replaced with null.\nIf a whitelist is provided, only matching object keys will be included.\nIf a depth limit is provided, objects and arrays at that depth will\nbe stringified as empty.", "static": "", "guessedname": "stringify", "guessedtype": "function", "params": [{"type": "MIXED", "name": "o", "description": "  any arbitrary object to convert to JSON string"}, {"type": "Array", "name": "w", "description": "  (optional) whitelist of acceptable object keys to include"}, {"type": "number", "name": "d", "description": "  (optional) depth limit to recurse objects\/arrays (practical minimum 1)"}], "public": ""}, "dateToString": {"return": {"type": "String", "description": "stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ"}, "description": "Serializes a Date instance as a UTC date string.  Used internally by\nstringify.  Override this method if you need Dates serialized in a\ndifferent format.", "static": "", "guessedname": "dateToString", "guessedtype": "function", "params": [{"type": "Date", "name": "d", "description": "  The Date to serialize"}]}, "_revive": {"return": {"type": "MIXED", "description": "The results of the filtered data"}, "description": "Traverses nested objects, applying a reviver function to each (key,value)\nfrom the scope if the key:value's containing object.  The value returned\nfrom the function will replace the original value in the key:value pair.\nIf the value returned is undefined, the key will be omitted from the\nreturned object.", "private": "", "static": "", "guessedname": "_revive", "guessedtype": "function", "params": [{"type": "MIXED", "name": "data", "description": "  Any JavaScript data"}, {"type": "Function", "name": "reviver", "description": "  filter or mutation function"}]}}, "static": "", "file": "Stringify.js", "guessedtype": "property", "shortname": "Y.JSON", "properties": {"_INVALID": {"description": "Final step in the validation.  Regex used to test the string left after\nall previous replacements for invalid characters.", "private": "", "static": "", "guessedname": "_INVALID", "guessedtype": "property", "type": "{RegExp}"}, "_BRACKETS": {"description": "Third step in the validation.  Regex used to remove all open square\nbrackets following a colon, comma, or at the beginning of the string.", "private": "", "static": "", "guessedname": "_BRACKETS", "guessedtype": "property", "type": "{RegExp}"}, "_SPECIAL_CHARS": {"description": "Regex used to replace special characters in strings for JSON\nstringification.", "private": "", "static": "", "guessedname": "_SPECIAL_CHARS", "guessedtype": "property", "type": "{RegExp}"}, "_CHARS": {"description": "Character substitution map for common escapes and special characters.", "private": "", "static": "", "guessedname": "_CHARS", "guessedtype": "property", "type": "{Object}"}, "_ESCAPES": {"description": "First step in the validation.  Regex used to replace all escape\nsequences (i.e. \"\\\\\", etc) with '@' characters (a non-JSON character).", "private": "", "static": "", "guessedname": "_ESCAPES", "guessedtype": "property", "type": "{RegExp}"}, "_VALUES": {"description": "Second step in the validation.  Regex used to replace all simple\nvalues with ']' characters.", "private": "", "static": "", "guessedname": "_VALUES", "guessedtype": "property", "type": "{RegExp}"}}, "description": "Provides Y.JSON.parse method to take JSON strings and return native\nJavaScript objects."}, "array": {"name": "array", "namespace": "", "module": "yui", "methods": {"test": {"todo": "current implementation (intenionally) will not implicitly \nhandle html elements that are array-like (forms, selects, etc).", "return": {"type": "int", "description": "a number indicating the results:\n0: Not an array or an array-like collection\n1: A real array. \n2: array-like collection."}, "description": "Evaluates the input to determine if it is an array, array-like, or \nsomething else.  This is used to handle the arguments collection \navailable within functions, and HTMLElement collections", "guessedname": "test", "guessedtype": "function"}, "array": {"todo": "this will not automatically convert elements that are also collections\nsuch as forms and selects.  Passing true as the third param will\nforce a conversion.", "params": [{"type": "", "name": "o", "description": " the item to arrayify"}, {"type": "int", "name": "i", "description": "  if an array or array-like, this is the start index"}, {"type": "boolean", "name": "al", "description": "  if true, it forces the array-like fork.  This\ncan be used to avoid multiple array.test calls."}], "description": "Returns an array:\n- Arrays are return unmodified unless the start position is specified.\n- \"Array-like\" collections (@see Array.test) are converted to arrays\n- For everything else, a new array is created with the input as the sole item\n- The start position is used if the input is or is like an array to return\na subset of the collection.", "guessedname": "array", "guessedtype": "function"}, "hash": {"return": {"type": "", "description": "the hash"}, "params": [{"type": "Array", "name": "k", "description": "  keyset"}, {"type": "Array", "name": "v", "description": "  optional valueset"}], "description": "Returns an object using the first array as keys, and\nthe second as values.  If the second array is not\nprovided the value is set to true for each.", "guessedname": "hash", "guessedtype": "function"}, "each": {"description": "Executes the supplied function on each item in the array.", "guessedname": "each", "guessedtype": "property"}}, "static": "", "file": "Array.js", "shortname": "array", "description": "Array utilities"}, "ua": {"description": "Browser\/platform detection", "namespace": "", "module": "yui", "guessedname": "ua", "file": "UA.js", "guessedtype": "function", "shortname": "ua", "properties": {"opera": {"type": "float", "description": "Opera version number or 0.  Example: 9.2", "guessedname": "opera", "guessedtype": "property"}, "gecko": {"type": "float", "description": "Gecko engine revision number.  Will evaluate to 1 if Gecko \nis detected but the revision could not be found. Other browsers\nwill be 0.  Example: 1.8\n<pre>\nFirefox 1.0.0.4: 1.7.8   <-- Reports 1.7\nFirefox 1.5.0.9: 1.8.0.9 <-- Reports 1.8\nFirefox 2.0.0.3: 1.8.1.3 <-- Reports 1.8\nFirefox 3 alpha: 1.9a4   <-- Reports 1.9\n<\/pre>", "guessedname": "gecko", "guessedtype": "property"}, "ie": {"type": "float", "description": "Internet Explorer version number or 0.  Example: 6", "guessedname": "ie", "guessedtype": "property"}, "webkit": {"type": "float", "description": "AppleWebKit version.  KHTML browsers that are not WebKit browsers \nwill evaluate to 1, other browsers 0.  Example: 418.9.1\n<pre>\nSafari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the \nlatest available for Mac OSX 10.3.\nSafari 2.0.2:         416     <-- hasOwnProperty introduced\nSafari 2.0.4:         418     <-- preventDefault fixed\nSafari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run\ndifferent versions of webkit\nSafari 2.0.4 (419.3): 419     <-- Tiger installations that have been\nupdated, but not updated\nto the latest patch.\nWebkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native SVG\nand many major issues fixed).\nSafari 3.0.4 (523.12) 523.12  <-- First Tiger release - automatic update\nfrom 2.x via the 10.4.11 OS patch\n<\/pre>\nhttp:\/\/developer.apple.com\/internet\/safari\/uamatrix.html", "guessedname": "webkit", "guessedtype": "property"}, "mobile": {"type": "string", "description": "The mobile property will be set to a string containing any relevant\nuser agent information when a modern mobile browser is detected.\nCurrently limited to Safari on the iPhone\/iPod Touch, Nokia N-series\ndevices with the WebKit-based browser, and Opera Mini.", "guessedname": "mobile", "guessedtype": "property"}}, "name": "ua"}, "Event": {"name": "Event", "namespace": "", "module": "yui", "guessedname": "Event", "methods": {"onDOMReady": {"description": "Executes the supplied callback when the DOM is first usable.  This\nwill execute immediately if called after the DOMReady event has\nfired.   @todo the DOMContentReady event does not fire when the\nscript is dynamically injected into the page.  This means the\nDOMReady custom event will never fire in FireFox or Opera when the\nlibrary is injected.  It _will_ fire in Safari, and the IE \nimplementation would allow for us to fire it if the defered script\nis not available.  We want this to behave the same in all browsers.\nIs there a way to identify when the script has been injected \ninstead of included inline?  Is there a way to know whether the \nwindow onload event has fired without having had a listener attached \nto it when it did so?\n<p>The callback is a Event.Custom, so the signature is:<\/p>\n<p>type &lt;string&gt;, args &lt;array&gt;, customobject &lt;object&gt;<\/p>\n<p>For DOMReady events, there are no fire argments, so the\nsignature is:<\/p>\n<p>\"DOMReady\", [], obj<\/p>", "static": "", "guessedname": "onDOMReady", "guessedtype": "function", "params": [{"type": "function", "name": "fn", "description": " what to execute when the element is found."}], "optional": "context execution context"}, "nativeRemove": {"description": "Basic remove listener", "private": "", "static": "", "guessedname": "nativeRemove", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "addListener": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Appends an event handler", "static": "", "guessedname": "addListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to assign the \nlistener to."}, {"type": "String", "name": "type", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "override", "description": "  If true, the obj passed in becomes\nthe execution context of the listener. If an\nobject, this object becomes the execution\ncontext."}]}, "getListeners": {"return": {"type": "Y.Custom.Event", "description": "the custom event wrapper for the DOM event(s)"}, "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.", "static": "", "guessedname": "getListeners", "guessedtype": "function", "params": [{"type": "HTMLElement|string", "name": "el", "description": "  the element or element id to inspect"}, {"type": "string", "name": "type", "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"}]}, "getEvent": {"return": {"type": "Event", "description": "the event"}, "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.", "static": "", "guessedname": "getEvent", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event parameter from the handler"}, {"type": "HTMLElement", "name": "boundEl", "description": " the element the listener is attached to"}]}, "resolve": {"private": "", "description": "Returns a wrapped node.  Intended to be used on event targets,\nso it will return the node's parent if the target is a text\nnode", "guessedname": "resolve", "guessedtype": "function"}, "purgeElement": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to purge"}, {"type": "boolean", "name": "recurse", "description": " recursively purge this element's children\nas well.  Use with caution."}, {"type": "string", "name": "type", "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"}], "description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.", "guessedname": "purgeElement", "guessedtype": "function"}, "_unload": {"guessedname": "_unload", "static": "", "description": "Removes all listeners registered by pe.event.  Called \nautomatically during the unload event.", "private": "", "guessedtype": "function"}, "_tryPreloadAttach": {"guessedname": "_tryPreloadAttach", "static": "", "description": "Polling function that runs before the onload event fires, \nattempting to attach to DOM Nodes as soon as they are \navailable", "private": "", "guessedtype": "function"}, "generateId": {"return": {"type": "string", "description": "the resulting id of the element"}, "description": "Generates an unique ID for the element if it does not already \nhave one.", "static": "", "guessedname": "generateId", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element to create the id for"}]}, "_isValidCollection": {"return": {"type": "boolean", "description": "true if the object is array-like and populated"}, "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different \nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also \nfail if the object is an array, but is empty.", "private": "", "static": "", "guessedname": "_isValidCollection", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to test"}]}, "onContentReady": {"static": "", "params": [{"type": "string", "name": "id", "description": " the id of the element to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is ready."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, fn will execute\nin the context of p_obj.  If an object, fn will\nexectute in the context of that object"}], "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>"}, "startInterval": {"static": "", "private": "", "guessedname": "startInterval", "guessedtype": "function"}, "nativeAdd": {"description": "Adds a DOM event directly without the caching, cleanup, context adj, etc", "private": "", "static": "", "guessedname": "nativeAdd", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "_load": {"guessedname": "_load", "static": "", "description": "hook up any deferred listeners", "private": "", "guessedtype": "function"}, "onAvailable": {"static": "", "params": [{"type": "string||string[]", "name": "id", "description": " the id of the element, or an array\nof ids to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, fn will execute\nin the context of p_obj, if set to an object it\nwill execute in the context of that object"}, {"type": "boolean", "name": "checkContent", "description": "  check child node readiness (onContentReady)"}], "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>"}, "wrapNode": {"private": "", "description": "Wraps an element in a Node facade", "guessedname": "wrapNode", "guessedtype": "function"}, "on": {"see": "addListener", "static": "", "description": "Y.Event.on is an alias for addListener", "guessedname": "attach", "guessedtype": "function"}, "removeListener": {"return": {"type": "boolean", "description": "true if the unbind was successful, false *  otherwise."}, "description": "Removes an event listener", "static": "", "guessedname": "removeListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to remove\nthe listener from."}, {"type": "String", "name": "type", "description": " the type of event to remove."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are *  removed."}]}}, "static": "", "file": "event-dom.js", "guessedtype": "function", "shortname": "Event", "properties": {"DOMReady": {"type": "boolean", "static": "", "description": "True when the document is initially usable", "guessedname": "DOMReady", "guessedtype": "property"}, "_retryCount": {"guessedname": "_retryCount", "static": "", "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load.", "private": "", "guessedtype": "property"}, "POLL_RETRYS": {"description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 2000@amp;20 ms, so it will poll\nfor 40 seconds or until all outstanding handlers are bound\n(whichever comes first).", "static": "", "guessedname": "POLL_RETRYS", "guessedtype": "property", "type": "int", "final": ""}, "_dri": {"guessedname": "_dri", "static": "", "description": "document readystate poll handle", "private": "", "guessedtype": "property"}, "_wrappers": {"description": "Custom event wrappers for DOM events.  Key is \n'event:' + Element uid stamp + event type", "private": "", "static": "", "guessedname": "_wrappers", "guessedtype": "property", "type": "Y.Event.Custom"}, "POLL_INTERVAL": {"description": "The poll interval in milliseconds", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "int", "final": ""}, "webkitKeymap": {"private": "", "description": "webkit key remapping required for Safari < 3.1", "guessedname": "webkitKeymap", "guessedtype": "property"}, "_interval": {"guessedname": "_interval", "static": "", "description": "poll handle", "private": "", "guessedtype": "property"}, "_el_events": {"guessedname": "_el_events", "static": "", "description": "Custom event wrapper map DOM events.  Key is \nElement uid stamp.  Each item is a hash of custom event\nwrappers as provided in the _wrappers collection.  This\nprovides the infrastructure for getListeners.", "private": "", "guessedtype": "property"}, "lastError": {"type": "Error", "static": "", "description": "addListener\/removeListener can throw errors in unexpected scenarios.\nThese errors are suppressed, the method returns false, and this property\nis set", "guessedname": "lastError", "guessedtype": "property"}, "loadComplete": {"description": "True after the onload event has fired", "private": "", "static": "", "guessedname": "loadComplete", "guessedtype": "property", "type": "boolean"}, "_avail": {"guessedname": "_avail", "static": "", "description": "onAvailable listeners", "private": "", "guessedtype": "property"}}, "description": "The event utility provides functions to add and remove event listeners,\nevent cleansing.  It also tries to automatically remove listeners it\nregisters during the unload event."}, "ChainedError": {"name": "ChainedError", "constructors": [{"params": [{"type": "String", "name": "message", "description": "  The message to display when the error occurs."}, {"type": "Error[]", "name": "errors", "description": "  an array containing the wrapped exceptions"}], "description": "ChainedErrors wrap one or more exceptions thrown by a subprocess."}], "namespace": "", "module": "yui", "guessedname": "ChainedError", "methods": {"valueOf": {"return": {"type": "String", "description": "A primitive value version of the error."}, "description": "Returns a primitive value version of the error. Same as toString().", "guessedname": "valueOf", "guessedtype": "function"}, "add": {"params": [{"type": "Error", "name": "e", "description": "  the error object to append"}], "description": "Append an error object", "guessedname": "add", "guessedtype": "function"}, "getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error message.", "guessedname": "getMessage", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the error."}, "description": "Returns a string representation of the error.", "guessedname": "toString", "guessedtype": "function"}, "next": {"return": {"type": "Error", "description": "the error that was thrown by the subsystem."}, "description": "Returns the next exception object this instance wraps", "guessedname": "next", "guessedtype": "function"}}, "extends": "Error", "superclass": "Error", "file": "event-custom.js", "guessedtype": "function", "shortname": "ChainedError", "properties": {"index": {"default": "0", "type": "int", "description": "Pointer to the current exception", "guessedname": "index", "guessedtype": "property"}, "errors": {"type": "Error[]", "description": "The list of wrapped exception objects", "guessedname": "errors", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ChainedErrors wrap one or more exceptions thrown by a subprocess."}, "Event.Custom": {"name": "Event.Custom", "constructors": [{"params": [{"type": "String", "name": "type", "description": " The type of event, which is passed to the callback\nwhen the event fires"}, {"type": "Object", "name": "context", "description": " The context the event will fire from.  \"this\" will\nrefer to this object in the callback.  Default value: \nthe window object.  The listener can override this."}, {"type": "boolean", "name": "silent", "description": " pass true to prevent the event from writing to\nthe debug system"}], "description": "The Event.Custom class lets you define events for your application\nthat can be subscribed to by one or more independent component."}], "namespace": "", "module": "yui", "events": {"subscribeEvent": {"type": "Y.Event.Custom", "params": [{"type": "Function", "name": "fn", "description": " The function to execute"}, {"type": "Object", "name": "obj", "description": " An object to be passed along when the event \nfires"}, {"type": "boolean|Object", "name": "override", "description": " If true, the obj passed in becomes \nthe execution context of the listener.\nif an object, that object becomes the\nthe execution context."}], "description": "Custom events provide a custom event that fires whenever there is\na new subscriber to the event.  This provides an opportunity to\nhandle the case where there is a non-repeating event that has\nalready fired has a new subscriber.", "guessedname": "subscribeEvent", "guessedtype": "property"}}, "guessedname": "CustomEvent", "methods": {"stopImmediatePropagation": {"description": "Stops propagation to bubble targets, and prevents any remaining\nsubscribers on the current target from executing.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "log": {"params": [{"type": "string", "name": "msg", "description": "  message to log"}, {"type": "string", "name": "cat", "description": "  log category"}], "description": "Logger abstraction to centralize the application of the silent flag", "guessedname": "log", "guessedtype": "function"}, "_delete": {"params": [{"type": "", "name": "subscriber", "description": " object"}], "private": "", "guessedname": "_delete", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "false if one of the subscribers returned false, \ntrue otherwise"}, "params": [{"type": "Object*", "name": "arguments", "description": " an arbitrary set of parameters to pass to \nthe handler."}], "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The type of event<\/li>\n<li>All of the arguments fire() was executed with as an array<\/li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod<\/li>\n<\/ul>", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"return": {"type": "int", "description": "The number of listeners unsubscribed"}, "description": "Removes all listeners", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "_notify": {"guessedname": "_notify", "params": [{"type": "Event.Subscriber", "name": "s", "description": "  the subscriber"}, {"type": "Array", "name": "args", "description": "  the arguments array to apply to the listener"}], "description": "Notify a single subscriber", "private": "", "guessedtype": "function"}, "applyConfig": {"params": [{"type": "", "name": "o", "description": " hash of properties to apply"}, {"type": "boolean", "name": "force", "description": "  if true, properties that exist on the event \nwill be overwritten."}], "description": "Apply configuration properties", "guessedname": "applyConfig", "guessedtype": "function"}, "subscribe": {"return": {"type": "", "description": "unsubscribe handle"}, "params": [{"type": "Function", "name": "fn", "description": "        The function to execute"}, {"type": "Object", "name": "obj", "description": "       An object to be passed along when the event \nfires"}, {"type": "boolean|Object", "name": "override", "description": " If true, the obj passed in becomes \nthe execution context of the listener.\nif an object, that object becomes the\nthe execution context."}], "description": "Subscribes the caller to this event", "guessedname": "subscribe", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "True if the subscriber was found and detached."}, "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed"}, {"type": "Object", "name": "obj", "description": "  The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes subscribers.", "guessedname": "unsubscribe", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}, "stopPropagation": {"description": "Stop propagation to bubble targets", "guessedname": "stopPropagation", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Event.Custom", "properties": {"fired": {"default": "false;", "type": "boolean", "description": "This event has fired if true", "guessedname": "fired", "guessedtype": "property"}, "defaultFn": {"type": "Function", "description": "The default function to execute after event listeners\nhave fire, but only if the default action was not\nprevented.", "guessedname": "defaultFn", "guessedtype": "property"}, "fireOnce": {"default": "false;", "type": "boolean", "description": "This event should only fire one time if true, and if\nit has fired, any new subscribers should be notified\nimmediately.", "guessedname": "fireOnce", "guessedtype": "property"}, "prevented": {"type": "int", "description": "Flag for preventDefault that is modified during fire().\nif it is not 0, the default behavior for this event", "guessedname": "prevented", "guessedtype": "property"}, "subscribers": {"type": "Event.Subscriber{}", "description": "The subscribers to this event", "guessedname": "subscribers", "guessedtype": "property"}, "cancelable": {"default": "true", "type": "boolean", "description": "Specifies whether or not this event's default function\ncan be canceled by a subscriber by executing preventDefault() \non the event facade", "guessedname": "cancelable", "guessedtype": "property"}, "host": {"type": "Event.Target", "description": "Specifies the host for this custom event.  This is used\nto enable event bubbling", "guessedname": "host", "guessedtype": "property"}, "stopped": {"type": "int", "description": "Flag for stopPropagation that is modified during fire()\n1 means to stop propagation to bubble targets.  2 means\nto also stop additional subscribers on this target.", "guessedname": "stopped", "guessedtype": "property"}, "context": {"type": "object", "description": "The context the the event will fire from by default.  Defaults to the YUI\ninstance.", "guessedname": "context", "guessedtype": "property"}, "bubbles": {"default": "true", "type": "boolean", "description": "Specifies whether or not a subscriber can stop the event propagation\nvia stopPropagation(), stopImmediatePropagation(), or halt()", "guessedname": "bubbles", "guessedtype": "property"}, "lastError": {"type": "Error", "description": "In order to make it possible to execute the rest of the subscriber\nstack when one thows an exception, the subscribers exceptions are\ncaught.  The most recent exception is stored in this property", "guessedname": "lastError", "guessedtype": "property"}, "type": {"type": "string", "description": "The type of event, returned to subscribers when the event fires", "guessedname": "type", "guessedtype": "property"}, "silent": {"type": "boolean", "description": "By default all custom events are logged in the debug build, set silent\nto true to disable debug outpu for this event.", "guessedname": "silent", "guessedtype": "property"}}, "description": "The Event.Custom class lets you define events for your application\nthat can be subscribed to by one or more independent component."}}, "version": "3.00pre", "modules": {"node": {"classlist": ["Node", "NodeList"], "name": "node", "filelist": ["Node.js", "NodeExtras.js"], "description": "DOM Abstractions."}, "yui": {"name": "yui", "classlist": ["array", "Event.Handle", "Event.Custom", "Event.Subscriber", "ChainedError", "Event", "Event.Facade", "Event.Target", "Get", "lang", "object", "ua", "YUI"], "filelist": ["Array.js", "Compat.js", "Core.js", "Do.js", "Dump.js", "event-custom.js", "event-dom.js", "event-facade.js", "event-ready.js", "event-target.js", "Get.js", "Init.js", "Lang.js", "Later.js", "Object.js", "Substitute.js", "UA.js", "YUI.js"], "guessedname": "YUI", "guessedtype": "property", "description": "YUI core"}, "JSON": {"classlist": ["Y.JSON"], "name": "JSON", "filelist": ["Stringify.js"], "description": "Provides Y.JSON.stringify method for converting objects to JSON strings."}, "nodeextras": {"classlist": [], "name": "nodeextras", "filelist": ["Selector.js"], "description": "Extended interface for Node"}, "selector": {"name": "selector", "title": "Selector Utility", "classlist": ["Y.util.Selector"], "filelist": [], "requires": "yahoo, dom", "description": "The selector module provides helper methods allowing CSS3 Selectors to be used with DOM elements."}}, "namespaces": ["Y.util"], "filemap": {"Array.js": {"classlist": ["array"], "name": "Array.js", "module": "yui"}, "Object.js": {"classlist": ["object"], "name": "Object.js", "module": "yui"}, "Do.js": {"classlist": [], "name": "Do.js", "module": "yui"}, "Parse.js": {"classlist": ["Y.JSON"], "name": "Parse.js", "module": "JSON"}, "NodeExtras.js": {"classlist": [], "name": "NodeExtras.js", "module": "node"}, "Dump.js": {"classlist": [], "name": "Dump.js", "module": "yui"}, "UA.js": {"classlist": ["ua"], "name": "UA.js", "module": "yui"}, "Later.js": {"classlist": [], "name": "Later.js", "module": "yui"}, "YUI.js": {"classlist": ["YUI"], "name": "YUI.js", "module": "yui"}, "event-ready.js": {"classlist": [], "name": "event-ready.js", "module": "yui"}, "event-custom.js": {"classlist": ["Event.Handle", "Event.Custom", "Event.Subscriber", "ChainedError"], "name": "event-custom.js", "module": "yui"}, "Selector.js": {"classlist": ["Y.util.Selector"], "name": "Selector.js", "module": "nodeextras"}, "Substitute.js": {"classlist": [], "name": "Substitute.js", "module": "yui"}, "Core.js": {"classlist": [], "name": "Core.js", "module": "yui"}, "Compat.js": {"classlist": [], "name": "Compat.js", "module": "yui"}, "Lang.js": {"classlist": ["lang"], "name": "Lang.js", "module": "yui"}, "io.js": {"classlist": [], "name": "io.js"}, "event-target.js": {"classlist": ["Event.Target"], "name": "event-target.js", "module": "yui"}, "Stringify.js": {"classlist": ["Y.JSON"], "name": "Stringify.js", "module": "JSON"}, "event-facade.js": {"classlist": ["Event.Facade"], "name": "event-facade.js", "module": "yui"}, "event-dom.js": {"classlist": ["Event"], "name": "event-dom.js", "module": "yui"}, "Node.js": {"classlist": ["Node", "NodeList"], "name": "Node.js", "module": "node"}, "Get.js": {"classlist": ["Get"], "name": "Get.js", "module": "yui"}, "Init.js": {"classlist": [], "name": "Init.js", "module": "yui"}}}